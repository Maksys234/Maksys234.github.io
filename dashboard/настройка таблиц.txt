create table public.activities (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  title text not null,
  description text null,
  type text not null,
  reference_id text null,
  created_at timestamp with time zone null default now(),
  constraint activities_pkey primary key (id),
  constraint activities_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.ai_messages (
  id uuid not null default extensions.uuid_generate_v4 (),
  session_id uuid not null,
  sender text not null,
  content text not null,
  content_type text null default 'text'::text,
  whiteboard_data jsonb null,
  sent_at timestamp with time zone null default now(),
  constraint ai_messages_pkey primary key (id),
  constraint ai_messages_session_id_fkey foreign KEY (session_id) references ai_sessions (id)
) TABLESPACE pg_default;
create table public.ai_sessions (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  title text not null,
  subject text not null,
  topic text null,
  study_plan_item_id uuid null,
  duration_minutes integer null,
  status text null default 'scheduled'::text,
  scheduled_for timestamp with time zone null,
  started_at timestamp with time zone null,
  ended_at timestamp with time zone null,
  ai_feedback jsonb null,
  user_rating integer null,
  user_feedback text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint ai_sessions_pkey primary key (id),
  constraint ai_sessions_study_plan_item_id_fkey foreign KEY (study_plan_item_id) references study_plan_items (id),
  constraint ai_sessions_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.ai_tutor_models (
  id serial not null,
  name text not null,
  description text null,
  avatar_url text null,
  specialization text null,
  personality text null,
  voice_id text null,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint ai_tutor_models_pkey primary key (id)
) TABLESPACE pg_default;
create table public.badges (
  id serial not null,
  title text not null,
  description text null,
  type text null,
  icon text null,
  points integer null default 50,
  requirements jsonb null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint badges_pkey primary key (id)
) TABLESPACE pg_default;
create table public.categories (
  id serial not null,
  name text not null,
  slug text not null,
  description text null,
  icon text null,
  color text null,
  order_position integer null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint categories_pkey primary key (id),
  constraint categories_slug_key unique (slug)
) TABLESPACE pg_default;
create table public.chat_history (
  id bigint generated always as identity not null,
  user_id uuid null,
  session_id text not null,
  topic_id text null,
  topic_name text null,
  role text not null,
  content text not null,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  constraint chat_history_pkey primary key (id),
  constraint chat_history_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint chat_history_role_check check ((role = any (array['user'::text, 'model'::text])))
) TABLESPACE pg_default;
create table public.diagnostic_tests (
  id serial not null,
  title text not null,
  description text null,
  subject text not null,
  grade text not null,
  exam_type text not null,
  difficulty integer null default 2,
  duration_minutes integer null default 60,
  is_published boolean null default true,
  questions jsonb null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint diagnostic_tests_pkey primary key (id)
) TABLESPACE pg_default;
create table public.exam_questions (
  id serial not null,
  question_text text not null,
  question_type text not null,
  options jsonb null,
  correct_answer text not null,
  solution_explanation text null,
  topic_id integer null,
  subtopic_id integer null,
  difficulty integer not null,
  source_year integer null,
  source_exam_type text null,
  image_url text null,
  created_at timestamp with time zone null default now(),
  constraint exam_questions_pkey primary key (id),
  constraint exam_questions_subtopic_id_fkey foreign KEY (subtopic_id) references exam_subtopics (id),
  constraint exam_questions_topic_id_fkey foreign KEY (topic_id) references exam_topics (id),
  constraint exam_questions_difficulty_check check (
    (
      (difficulty >= 1)
      and (difficulty <= 5)
    )
  )
) TABLESPACE pg_default;
create table public.exam_subtopics (
  id serial not null,
  topic_id integer not null,
  name text not null,
  description text null,
  created_at timestamp with time zone null default now(),
  constraint exam_subtopics_pkey primary key (id),
  constraint exam_subtopics_topic_id_fkey foreign KEY (topic_id) references exam_topics (id)
) TABLESPACE pg_default;
create table public.exam_topics (
  id serial not null,
  name text not null,
  subject text not null,
  importance_weight numeric(3, 2) not null default 1.0,
  description text null,
  created_at timestamp with time zone null default now(),
  constraint exam_topics_pkey primary key (id)
) TABLESPACE pg_default;
create table public.exercises (
  id serial not null,
  title text not null,
  slug text not null,
  description text null,
  category_id integer null,
  subject text not null,
  difficulty integer null default 1,
  time_minutes integer null default 15,
  points integer null default 100,
  questions_count integer null default 10,
  image_url text null,
  is_featured boolean null default false,
  is_published boolean null default true,
  content jsonb null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint exercises_pkey primary key (id),
  constraint exercises_slug_key unique (slug),
  constraint exercises_category_id_fkey foreign KEY (category_id) references categories (id)
) TABLESPACE pg_default;
create table public.leaderboard (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  points integer not null default 0,
  rank integer not null,
  previous_rank integer null,
  badges_count integer not null default 0,
  period text not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint leaderboard_pkey primary key (id),
  constraint leaderboard_user_id_period_key unique (user_id, period),
  constraint leaderboard_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.plan_activities (
  id uuid not null default extensions.uuid_generate_v4 (),
  plan_id uuid not null,
  title text not null,
  description text null,
  day_of_week integer not null,
  time_slot text null,
  topic_id integer null,
  completed boolean not null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  type text null,
  constraint plan_activities_pkey primary key (id),
  constraint plan_activities_topic_id_fkey foreign KEY (topic_id) references exam_topics (id)
) TABLESPACE pg_default;
create table public.profiles (
  id uuid not null,
  username text null,
  first_name text null,
  last_name text null,
  email text not null,
  avatar_url text null,
  bio text null,
  school text null,
  grade text null,
  level integer null default 1,
  completed_exercises integer null default 0,
  streak_days integer null default 0,
  last_login timestamp with time zone null,
  badges_count integer null default 0,
  points integer null default 0,
  preferences jsonb null default '{"language": "cs", "dark_mode": false, "show_progress": true, "sound_effects": true}'::jsonb,
  notifications jsonb null default '{"email": true, "study_tips": true, "content_updates": true, "practice_reminders": true}'::jsonb,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  experience integer not null default 0,
  purchased_titles text[] null default array[]::text[],
  selected_title text null,
  last_reward_claimed_at timestamp with time zone null,
  monthly_claims jsonb null default '{}'::jsonb,
  last_milestone_claimed integer not null default 0,
  constraint profiles_pkey primary key (id),
  constraint profiles_email_key unique (email),
  constraint profiles_username_key unique (username),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id),
  constraint profiles_selected_title_fkey foreign KEY (selected_title) references title_shop (title_key) on update CASCADE on delete set null
) TABLESPACE pg_default;
-- 1. Create the missing table for avatar decorations
CREATE TABLE public.avatar_decorations_shop (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    decoration_key text NOT NULL UNIQUE, -- Unique key for the decoration (e.g., 'neon_border', 'crown')
    name text NOT NULL,             -- Display name (e.g., 'Neonová Hranice', 'Korunka Slávy')
    description text,               -- Optional description
    cost integer NOT NULL CHECK (cost >= 0), -- Cost in credits
    image_url text,                 -- URL to an image preview of the decoration (optional)
    is_available boolean DEFAULT true NOT NULL, -- If the item is available in the shop
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add comments for clarity
COMMENT ON TABLE public.avatar_decorations_shop IS 'Table containing avatar decorations available for purchase.';
COMMENT ON COLUMN public.avatar_decorations_shop.decoration_key IS 'Unique text identifier for the decoration used internally.';
COMMENT ON COLUMN public.avatar_decorations_shop.name IS 'User-facing name of the decoration.';
COMMENT ON COLUMN public.avatar_decorations_shop.cost IS 'Cost of the decoration in credits.';
COMMENT ON COLUMN public.avatar_decorations_shop.image_url IS 'Optional URL for a visual preview of the decoration.';
COMMENT ON COLUMN public.avatar_decorations_shop.is_available IS 'Indicates if the decoration is currently available for purchase.';

-- 2. Alter the existing 'profiles' table to add decoration tracking
--    (Addresses the 'column profiles.purchased_decorations does not exist' error)
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS purchased_decorations text[] DEFAULT ARRAY[]::text[], -- Array of purchased decoration_key's
ADD COLUMN IF NOT EXISTS selected_decoration text; -- decoration_key of the currently equipped decoration

-- Add comments for the new columns in 'profiles'
COMMENT ON COLUMN public.profiles.purchased_decorations IS 'Array containing decoration_key of all avatar decorations purchased by the user.';
COMMENT ON COLUMN public.profiles.selected_decoration IS 'Decoration_key of the currently equipped avatar decoration.';


ALTER TABLE public.profiles
ADD CONSTRAINT profiles_selected_decoration_fkey
FOREIGN KEY (selected_decoration) REFERENCES public.avatar_decorations_shop(decoration_key)
ON UPDATE CASCADE -- If decoration_key changes, update it here too
ON DELETE SET NULL; -- If decoration is deleted from shop, remove selection from profiles

ALTER TABLE public.avatar_decorations_shop ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow logged-in users to read available decorations"
ON public.avatar_decorations_shop
FOR SELECT
USING (auth.role() = 'authenticated' AND is_available = true);

create table public.progress_analytics (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  subject text not null,
  analysis_date date not null,
  topic_progress jsonb null,
  weak_areas jsonb null,
  strong_areas jsonb null,
  predicted_score integer null,
  recommended_topics jsonb null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint progress_analytics_pkey primary key (id),
  constraint progress_analytics_user_id_subject_analysis_date_key unique (user_id, subject, analysis_date),
  constraint progress_analytics_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.progress_snapshots (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  snapshot_date date not null default CURRENT_DATE,
  overall_progress integer null,
  points_total integer null,
  streak_days integer null,
  completed_exercises integer null,
  tests_completed integer null,
  average_score double precision null,
  topic_progress jsonb null,
  created_at timestamp with time zone not null default now(),
  constraint progress_snapshots_pkey primary key (id),
  constraint progress_snapshots_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint progress_snapshots_overall_progress_check check (
    (
      (overall_progress >= 0)
      and (overall_progress <= 100)
    )
  ),
  constraint progress_snapshots_average_score_check check (
    (
      (average_score >= (0)::double precision)
      and (average_score <= (100)::double precision)
    )
  ),
  constraint progress_snapshots_streak_days_check check ((streak_days >= 0)),
  constraint progress_snapshots_tests_completed_check check ((tests_completed >= 0)),
  constraint progress_snapshots_points_total_check check ((points_total >= 0)),
  constraint progress_snapshots_completed_exercises_check check ((completed_exercises >= 0))
) TABLESPACE pg_default;

create index IF not exists idx_progress_snapshots_user_date on public.progress_snapshots using btree (user_id, snapshot_date desc) TABLESPACE pg_default;

create index IF not exists idx_progress_snapshots_user_id on public.progress_snapshots using btree (user_id) TABLESPACE pg_default;
create table public.study_plan_items (
  id uuid not null default extensions.uuid_generate_v4 (),
  plan_id uuid not null,
  title text not null,
  description text null,
  topic text not null,
  subtopic text null,
  order_position integer not null,
  type text not null,
  content_id integer null,
  status text null default 'pending'::text,
  score integer null,
  duration_minutes integer null,
  scheduled_for timestamp with time zone null,
  completed_at timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint study_plan_items_pkey primary key (id)
) TABLESPACE pg_default;
create table public.study_plans (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  diagnostic_id uuid null,
  title text null,
  subject text null default 'Matematika'::text,
  status text not null default 'active'::text,
  plan_content_markdown text not null,
  priority_topics jsonb null,
  estimated_completion_date date null,
  progress integer not null default 0,
  is_auto_adjusted boolean not null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint study_plans_pkey primary key (id),
  constraint study_plans_diagnostic_id_fkey foreign KEY (diagnostic_id) references user_diagnostics (id) on delete set null,
  constraint study_plans_user_id_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE,
  constraint study_plans_progress_check check (
    (
      (progress >= 0)
      and (progress <= 100)
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_study_plans_user_id_status on public.study_plans using btree (user_id, status) TABLESPACE pg_default;

create index IF not exists idx_study_plans_created_at on public.study_plans using btree (created_at desc) TABLESPACE pg_default;

create trigger on_study_plans_update BEFORE
update on study_plans for EACH row
execute FUNCTION handle_updated_at ();
create table public.test_results (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  test_id integer not null,
  score integer not null,
  time_spent integer not null,
  correct_answers integer not null,
  total_questions integer not null,
  topic_results jsonb null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint test_results_pkey primary key (id),
  constraint test_results_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.test_types (
  id serial not null,
  name character varying(255) not null,
  description text null,
  icon character varying(255) null,
  constraint test_types_pkey primary key (id)
) TABLESPACE pg_default;
create table public.tests (
  id serial not null,
  test_type_id integer null,
  title character varying(255) not null,
  description text null,
  details text null,
  constraint tests_pkey primary key (id),
  constraint tests_test_type_id_fkey foreign KEY (test_type_id) references test_types (id)
) TABLESPACE pg_default;
create table public.user_ai_preferences (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  preferred_tutor_id integer null,
  preferred_learning_style text null,
  preferred_session_duration integer null default 30,
  preferred_difficulty text null default 'adaptive'::text,
  preferred_feedback_frequency text null default 'moderate'::text,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint user_ai_preferences_pkey primary key (id),
  constraint user_ai_preferences_user_id_key unique (user_id),
  constraint user_ai_preferences_preferred_tutor_id_fkey foreign KEY (preferred_tutor_id) references ai_tutor_models (id),
  constraint user_ai_preferences_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.user_badges (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  badge_id integer not null,
  earned_at timestamp with time zone null default now(),
  constraint user_badges_pkey primary key (id),
  constraint user_badges_user_id_badge_id_key unique (user_id, badge_id),
  constraint user_badges_badge_id_fkey foreign KEY (badge_id) references badges (id),
  constraint user_badges_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.user_diagnostics (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  completed_at timestamp with time zone not null,
  total_score integer not null,
  total_questions integer not null,
  answers jsonb null,
  topic_results jsonb null,
  analysis jsonb null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  time_spent integer null,
  constraint user_diagnostics_pkey primary key (id),
  constraint user_diagnostics_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.user_exercises (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  exercise_id integer not null,
  status text null default 'not_started'::text,
  progress integer null default 0,
  score integer null default 0,
  attempts integer null default 0,
  last_attempt timestamp with time zone null,
  completed_at timestamp with time zone null,
  answers jsonb null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint user_exercises_pkey primary key (id),
  constraint user_exercises_user_id_exercise_id_key unique (user_id, exercise_id),
  constraint user_exercises_exercise_id_fkey foreign KEY (exercise_id) references exercises (id),
  constraint user_exercises_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.user_notifications (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  title text not null,
  message text not null,
  icon text null,
  type text not null default 'info'::text,
  is_read boolean not null default false,
  created_at timestamp with time zone not null default now(),
  link text null,
  constraint user_notifications_pkey primary key (id),
  constraint user_notifications_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_user_notifications_user_id on public.user_notifications using btree (user_id) TABLESPACE pg_default;
create table public.user_question_responses (
  id uuid not null default extensions.uuid_generate_v4 (),
  attempt_id uuid not null,
  question_id integer not null,
  user_answer text null,
  is_correct boolean null,
  time_spent_seconds integer null,
  created_at timestamp with time zone null default now(),
  constraint user_question_responses_pkey primary key (id),
  constraint user_question_responses_attempt_id_fkey foreign KEY (attempt_id) references user_test_attempts (id),
  constraint user_question_responses_question_id_fkey foreign KEY (question_id) references exam_questions (id)
) TABLESPACE pg_default;
create table public.user_selections (
  id serial not null,
  user_id uuid not null,
  test_id integer null,
  selected_at timestamp without time zone null default CURRENT_TIMESTAMP,
  constraint user_selections_pkey primary key (id),
  constraint user_selections_test_id_fkey foreign KEY (test_id) references tests (id)
) TABLESPACE pg_default;
create table public.user_stats (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  progress integer not null default 0,
  progress_weekly integer not null default 0,
  points integer not null default 0,
  points_weekly integer not null default 0,
  completed_tests integer not null default 0,
  total_tests integer not null default 0,
  streak_current integer not null default 0,
  streak_longest integer not null default 0,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint user_stats_pkey primary key (id),
  constraint user_stats_user_id_key unique (user_id),
  constraint user_stats_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.user_test_attempts (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  test_id integer null,
  started_at timestamp with time zone null default now(),
  completed_at timestamp with time zone null,
  total_questions integer not null,
  correct_answers integer null,
  time_spent_seconds integer null,
  score integer null,
  topic_results jsonb null,
  created_at timestamp with time zone null default now(),
  constraint user_test_attempts_pkey primary key (id),
  constraint user_test_attempts_test_id_fkey foreign KEY (test_id) references diagnostic_tests (id),
  constraint user_test_attempts_user_id_fkey foreign KEY (user_id) references profiles (id)
) TABLESPACE pg_default;
create table public.user_topic_progress (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  topic_id integer not null,
  progress integer not null default 0,
  strength text not null default 'neutral'::text,
  questions_attempted integer not null default 0,
  questions_correct integer not null default 0,
  last_activity timestamp with time zone null default now(),
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint user_topic_progress_pkey primary key (id),
  constraint user_topic_progress_user_id_topic_id_key unique (user_id, topic_id),
  constraint user_topic_progress_topic_id_fkey foreign KEY (topic_id) references exam_topics (id),
  constraint user_topic_progress_user_id_fkey foreign KEY (user_id) references profiles (id)
-- 1. Vytvoření nové tabulky pro obchod s tituly
CREATE TABLE public.title_shop (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title_key text NOT NULL UNIQUE, -- Unikátní klíč pro použití v kódu (např. 'math_master')
    name text NOT NULL,             -- Zobrazovaný název titulu (např. 'Matematický Mistr')
    description text,               -- Volitelný popis
    cost integer NOT NULL CHECK (cost >= 0), -- Cena v kreditech (nemůže být záporná)
    icon text,                      -- Volitelná ikona (např. třída Font Awesome 'fas fa-brain')
    is_available boolean DEFAULT true NOT NULL, -- Zda je titul aktuálně k dispozici v obchodě
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);
-- Add the new column to the title_shop table
ALTER TABLE public.title_shop
ADD COLUMN is_purchasable boolean DEFAULT true NOT NULL;

-- Add a comment to explain the new column
COMMENT ON COLUMN public.title_shop.is_purchasable IS 'Indicates if the title can be bought in the shop (true) or is only awarded (false).';
ALTER TABLE public.profiles
ADD COLUMN learning_goal TEXT CHECK (learning_goal IN ('exam_prep', 'math_learning')) NULL;

COMMENT ON COLUMN public.profiles.learning_goal IS 'Stores the user''s primary learning goal (exam_prep or math_learning)';
-- Сначала удаляем старое ограничение (если оно существует)
-- Название ограничения может отличаться, проверьте его в вашей БД, если команда не сработает.
-- Обычно оно называется что-то вроде profiles_learning_goal_check.
ALTER TABLE public.profiles
DROP CONSTRAINT IF EXISTS profiles_learning_goal_check;

-- Добавляем новое ограничение с расширенным списком целей
ALTER TABLE public.profiles
ADD CONSTRAINT profiles_learning_goal_check
CHECK (learning_goal IN (
    'exam_prep',       -- Подготовка к экзаменам
    'math_accelerate', -- Учение наперед / Ускоренный темп
    'math_review',      -- Дополнение пробелов / Повторение
    'math_explore'    -- Volné prozkoumávání témat
    ));

-- Обновляем комментарий к столбцу (рекомендуется)
COMMENT ON COLUMN public.profiles.learning_goal IS 'Stores the user''s primary learning goal (exam_prep, math_accelerate, math_review, math_explore)';
-- Přidání komentářů pro lepší orientaci
COMMENT ON TABLE public.title_shop IS 'Tabulka obsahující tituly, které si uživatelé mohou zakoupit za kredity.';
COMMENT ON COLUMN public.title_shop.title_key IS 'Unikátní textový identifikátor titulu pro interní použití.';
COMMENT ON COLUMN public.title_shop.name IS 'Název titulu zobrazovaný uživateli.';
COMMENT ON COLUMN public.title_shop.cost IS 'Cena titulu v herní měně (kreditech/bodech).';
COMMENT ON COLUMN public.title_shop.is_available IS 'Určuje, zda je titul viditelný a dostupný k zakoupení v obchodě.';


-- 2. Úprava existující tabulky 'profiles'
ALTER TABLE public.profiles
ADD COLUMN purchased_titles text[] DEFAULT ARRAY[]::text[], -- Pole textových klíčů zakoupených titulů
ADD COLUMN selected_title text;                             -- Textový klíč aktuálně vybraného titulu

-- Přidání komentářů pro nové sloupce v 'profiles'
COMMENT ON COLUMN public.profiles.purchased_titles IS 'Pole obsahující title_key všech titulů zakoupených uživatelem.';
COMMENT ON COLUMN public.profiles.selected_title IS 'Title_key aktuálně nastaveného (používaného) titulu uživatele.';

-- 3. Přidání cizího klíče pro 'selected_title'
-- Toto zajistí, že vybraný titul musí existovat v tabulce title_shop
-- POZNÁMKA: Pokud již máte v profiles záznamy, kde by selected_title mělo hodnotu,
-- která neexistuje v title_shop (což by nemělo být, protože tabulka je nová),
-- museli byste nejprve tyto hodnoty opravit nebo nastavit na NULL.
ALTER TABLE public.profiles
ADD CONSTRAINT profiles_selected_title_fkey
FOREIGN KEY (selected_title) REFERENCES public.title_shop(title_key)
ON UPDATE CASCADE -- Pokud se změní title_key v title_shop, změní se i zde
ON DELETE SET NULL; -- Pokud se titul smaže z title_shop, u uživatelů se nastaví na NULL


-- 4. (Volitelné) Povolení RLS (Row Level Security) pro novou tabulku
-- Doporučeno pro bezpečnost, pokud již RLS používáte.
ALTER TABLE public.title_shop ENABLE ROW LEVEL SECURITY;

-- Příklady politik RLS (přizpůsobte dle vaší logiky):
-- Povolit čtení všech dostupných titulů všem přihlášeným uživatelům:
CREATE POLICY "Allow logged-in users to read available titles"
ON public.title_shop
CREATE TABLE public.learning_logs (
    id UUID DEFAULT gen_random_uuid() NOT NULL,
    user_id UUID REFERENCES auth.users(id) NOT NULL,
    log_text TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    CONSTRAINT learning_logs_pkey PRIMARY KEY (id)
);
FOR SELECT
USING (auth.role() = 'authenticated' AND is_available = true);
) TABLESPACE pg_default;
-- Убеждаемся, что столбец 'preferences' существует в таблице 'profiles'
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS preferences jsonb DEFAULT '{}'::jsonb;

-- (Необязательно, но рекомендуется) Убеждаемся, что значение по умолчанию - пустой объект '{}'
-- Это безопаснее, чем предполагать наличие конкретных ключей по умолчанию.
ALTER TABLE public.profiles
ALTER COLUMN preferences SET DEFAULT '{}'::jsonb;

-- (Необязательно) Добавляем комментарий к столбцу для ясности
COMMENT ON COLUMN public.profiles.preferences
IS 'Stores user interface and learning goal preferences as a JSONB object. Includes keys like "dark_mode", "language", and potentially "goal_details" for specific goal settings.';
ALTER TABLE profiles
ADD COLUMN longest_streak_days INTEGER DEFAULT 0;
CREATE TABLE public.claimed_streak_milestones (
    id UUID PRIMARY KEY DEFAULT extensions.uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    milestone_day INTEGER NOT NULL,
    claimed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    reward_name TEXT, -- Název odměny pro referenci
    CONSTRAINT unique_user_milestone UNIQUE (user_id, milestone_day)
);

COMMENT ON TABLE public.claimed_streak_milestones IS 'Sleduje milníky studijní série, které si uživatelé vyzvedli.';
COMMENT ON COLUMN public.claimed_streak_milestones.milestone_day IS 'Počet dní série pro tento milník (např. 5, 10, 30).';
COMMENT ON COLUMN public.claimed_streak_milestones.reward_name IS 'Popisný název odměny za tento milník.';
-- Rozšíření existující tabulky 'activities'
ALTER TABLE public.activities
ADD COLUMN IF NOT EXISTS icon TEXT,          -- Název Font Awesome ikony (např. 'fa-vial', 'fa-book-open')
ADD COLUMN IF NOT EXISTS link_url TEXT,      -- URL pro proklik na detail aktivity
ADD COLUMN IF NOT EXISTS details JSONB;      -- Doplňující strukturované informace k aktivitě (např. skóre testu)

COMMENT ON COLUMN public.activities.icon IS 'Název ikony (např. Font Awesome) reprezentující typ aktivity.';
COMMENT ON COLUMN public.activities.link_url IS 'URL odkazující na stránku související s aktivitou.';
COMMENT ON COLUMN public.activities.details IS 'Další JSON data k aktivitě, např. {"score": 80, "topic": "Algebra"}.';
CREATE TABLE public.credit_transactions (
    id UUID PRIMARY KEY DEFAULT extensions.uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    transaction_type TEXT NOT NULL, -- např. 'earned_exercise', 'spent_title_shop', 'reward_streak', 'manual_adjustment'
    amount INTEGER NOT NULL, -- Kladné pro zisk, záporné pro utracení
    description TEXT, -- Popis transakce, např. "Dokončení cvičení: Rovnice", "Nákup titulu: Měsíční Maratonec"
    balance_after_transaction INTEGER, -- Volitelný sloupec pro zůstatek po transakci
    reference_activity_id UUID NULL REFERENCES public.activities(id) ON DELETE SET NULL, -- Odkaz na související aktivitu, pokud existuje
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE public.credit_transactions IS 'Zaznamenává historii kreditových transakcí pro uživatele.';
COMMENT ON COLUMN public.credit_transactions.transaction_type IS 'Typ transakce (např. zisk z cvičení, útrata v obchodě).';
COMMENT ON COLUMN public.credit_transactions.amount IS 'Počet kreditů přidaných (kladné) nebo odebraných (záporné).';
COMMENT ON COLUMN public.credit_transactions.description IS 'Textový popis transakce.';
COMMENT ON COLUMN public.credit_transactions.balance_after_transaction IS 'Zůstatek kreditů uživatele po provedení této transakce (volitelné).';
COMMENT ON COLUMN public.credit_transactions.reference_activity_id IS 'Odkaz na ID záznamu v tabulce activities, pokud transakce souvisí s konkrétní aktivitou.';

-- Indexy pro rychlejší dotazování
CREATE INDEX IF NOT EXISTS idx_credit_transactions_user_id_created_at ON public.credit_transactions (user_id, created_at DESC);