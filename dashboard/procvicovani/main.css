/* --- START: Киберпанк CSS Тема (Merged & Adapted for /procvicovani/main.html - v2) --- */
/* --- Base Theme from dashboard.html & Enhancements from other CSS --- */
/* --- FIX: Scrolling & Notification Styles --- */
/* --- FIX v2: Enhanced Reload Button Styles --- */

/* --- Глобальные Настройки и Переменные --- */
:root {
	/* Основа */
	--bg-color: #03020c;
	--bg-secondary: #0a071f;
	--bg-secondary-rgb: 10, 7, 31; /* Added RGB version */
	--card-bg: rgba(15, 10, 45, 0.9); /* More purple, slightly more opaque */
	--card-solid: #0f0a2d;
	--card-solid-rgb: 18, 10, 55; /* Added RGB version */
	--interface-bg: rgba(6, 4, 22, 0.92);
	--interface-border: rgba(0, 240, 255, 0.45); /* Slightly stronger border */
	--dark-purple-accent: #1a0f4a; /* Darker purple */
	--dark-purple-accent-rgb: 26, 15, 74;

	/* Акценты */
	--accent-primary: #00f0ff; /* Brighter Cyan */
	--accent-primary-rgb: 0, 240, 255;
	--accent-secondary: #a85eff; /* Slightly brighter Purple */
	--accent-secondary-rgb: 168, 94, 255;
	--accent-pink: #ff33cc; /* Brighter Pink */
	--accent-pink-rgb: 255, 51, 204;
	--accent-lime: #7fff4d; /* Brighter Lime */
	--accent-lime-rgb: 127, 255, 77;
	--accent-cyan: var(--accent-primary);
	--accent-cyan-rgb: var(--accent-primary-rgb);
	--accent-cyan-glow: rgba(var(--accent-cyan-rgb), 0.75);
	--accent-glow: rgba(var(--accent-primary-rgb), 0.75);
	--accent-secondary-glow: rgba(var(--accent-secondary-rgb), 0.65);
	--accent-pink-glow: rgba(var(--accent-pink-rgb), 0.55);
	--accent-lime-glow: rgba(var(--accent-lime-rgb), 0.65);
	--accent-border-glow: rgba(var(--accent-primary-rgb), 0.85);
	--accent-orange: #ff9933; /* Brighter Orange */
	--accent-orange-rgb: 255, 153, 51;
	--accent-orange-glow: rgba(var(--accent-orange-rgb), 0.65);

	/* Текст */
	--text-light: #f5f7fa;
	--text-medium: #c0c8e7; /* Adjusted medium */
	--text-muted: #8899cc; /* Adjusted muted */
	--text-muted-rgb: 136, 153, 204; /* Added RGB version */
	--text-heading: #ffffff; /* White */
	--text-link: var(--accent-primary);
	--text-link-hover: #ffffff;
	--text-fixed-dark: #02010a; /* For text on light/bright backgrounds */
	--white: #ffffff;
	--white-rgb: 255, 255, 255; /* Added RGB version */
	--black: #000000;

	/* Границы */
	--border-color-light: rgba(var(--accent-secondary-rgb), 0.30); /* Slightly lighter */
	--border-color-medium: rgba(var(--accent-secondary-rgb), 0.50);
	--border-color-strong: rgba(var(--accent-primary-rgb), 0.70);
	--border-interactive: var(--accent-primary);
	--border-glow-gradient: linear-gradient(90deg, transparent, var(--accent-primary), var(--accent-pink), var(--accent-primary), transparent);
	--border-anim-gradient: linear-gradient(90deg, var(--accent-secondary), var(--accent-primary), var(--accent-pink), var(--accent-secondary));

	/* Градиенты */
	--gradient-header: linear-gradient(180deg, rgba(3, 2, 12, 0.98) 0%, rgba(3, 2, 12, 0.92) 100%);
	--gradient-border-anim: linear-gradient(90deg, var(--accent-secondary), var(--accent-primary), var(--accent-pink), var(--accent-primary), var(--accent-secondary));
	--gradient-button: linear-gradient(100deg, var(--accent-secondary) 0%, var(--accent-primary) 100%);
	--gradient-button-hover: linear-gradient(100deg, var(--accent-primary) 0%, var(--accent-pink) 100%);
	--gradient-sidebar: linear-gradient(190deg, var(--bg-secondary) 0%, var(--dark-purple-accent) 100%);
	--gradient-level-up: linear-gradient(45deg, var(--accent-pink), var(--accent-secondary)); /* Для Level Up */
	--gradient-welcome: linear-gradient(135deg, rgba(var(--accent-primary-rgb), 0.2), rgba(var(--accent-secondary-rgb), 0.25)); /* Для Welcome Banner */
	--gradient-cta: linear-gradient(110deg, var(--accent-secondary) 0%, var(--accent-pink) 100%);
	/* Gradients from Oceneni/Plan */
	--gradient-math: linear-gradient(135deg, var(--accent-cyan), var(--accent-secondary));
	--gradient-lang: linear-gradient(135deg, var(--accent-pink), var(--accent-secondary));
	--gradient-special: linear-gradient(135deg, var(--accent-orange), var(--accent-pink));
	--gradient-streak: linear-gradient(135deg, var(--accent-pink), #d90429);
	--gradient-locked: linear-gradient(135deg, #334155, #1e293b);
	--gradient-success: linear-gradient(135deg, var(--accent-lime), #45a247);
	--gradient-warning: linear-gradient(135deg, var(--accent-orange), #f3722c);
	--gradient-danger: linear-gradient(135deg, var(--accent-pink), #b5179e);
	--gradient-info: linear-gradient(135deg, var(--accent-cyan), var(--accent-primary));

	/* Шрифты */
	--font-primary: 'Inter', sans-serif;
	--font-secondary: 'Poppins', sans-serif; /* Заголовки, кнопки */
	--font-mono: 'Roboto Mono', monospace; /* AI демо, код */

	/* Тени */
	--shadow-glow: 0 0 30px var(--accent-glow); /* Increased glow */
	--shadow-card: 0 15px 45px rgba(0, 0, 0, 0.5); /* Stronger card shadow */
	--shadow-interactive: 0 8px 25px rgba(var(--accent-primary-rgb), 0.45); /* Stronger button shadow */
	--shadow-interactive-hover: 0 12px 35px rgba(var(--accent-pink-rgb), 0.50);
	--shadow-card-hover-enhanced: 0 20px 60px rgba(0, 0, 0, 0.55), 0 0 40px var(--accent-glow), inset 0 0 18px rgba(var(--accent-primary-rgb), 0.2);
	--shadow-hud: 0 5px 18px rgba(0,0,0,0.35), inset 0 1px 3px rgba(var(--accent-primary-rgb), 0.15);
	--shadow-text-glow: 0 0 10px rgba(var(--accent-primary-rgb), 0.75); /* Brighter text glow */
    --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.25);
    --shadow-md: 0 6px 15px rgba(0, 0, 0, 0.35);

	/* Размеры и переходы */
	--sidebar-width: 260px;
	--card-radius: 16px; /* Slightly larger */
	--button-radius: 10px;
	--form-element-radius: 8px; /* Unified radius */
	--section-padding-y: clamp(2rem, 5vh, 3rem);
	--container-padding-x: 2rem;
	--transition-speed: 0.3s;
	--transition-fast: all 0.25s ease-out; /* Slightly faster */
	--transition-medium: all 0.4s ease-out; /* Slightly slower */
	--transition-long: all 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);
	--transition-bounce: all 0.45s cubic-bezier(0.175, 0.885, 0.32, 1.275);
	--transition-entrance: all 0.7s cubic-bezier(0.165, 0.84, 0.44, 1);

	/* Skeleton Loader Colors */
	--skeleton-bg: rgba(var(--accent-secondary-rgb), 0.12);
	--skeleton-highlight: rgba(var(--accent-secondary-rgb), 0.22);

    /* Chat specific (from vyuka.css, might be useful) */
    --chat-scrollbar-track: transparent;
	--chat-scrollbar-thumb: rgba(var(--accent-primary-rgb), 0.4);
	--chat-scrollbar-thumb-hover: rgba(var(--accent-primary-rgb), 0.6);
}

/* --- Базовые Стили --- */
* { margin: 0; padding: 0; box-sizing: border-box; }
html { scroll-behavior: smooth; font-size: 16px; -webkit-text-size-adjust: 100%; }
body {
	background-color: var(--bg-color); color: var(--text-medium);
	font-family: var(--font-primary); line-height: 1.7;
	min-height: 100vh;
    display: flex; /* FIX: Added for sidebar layout */
    overflow: hidden; /* FIX: Added for sidebar layout - prevent body scroll */
	-webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
	position: relative;
}

/* Фоновые эффекты */
body::before { /* Сетка */
	content: ""; position: fixed; inset: 0; width: 100%; height: 100%; z-index: -3;
	background-image:
		linear-gradient(rgba(var(--accent-secondary-rgb), 0.05) 1px, transparent 1px),
		linear-gradient(90deg, rgba(var(--accent-secondary-rgb), 0.05) 1px, transparent 1px);
	background-size: 45px 45px; opacity: 0.7;
	animation: bg-grid-pan 120s linear infinite; pointer-events: none;
}
body::after { /* Сканлинии */
	content: ""; position: fixed; inset: 0; width: 100%; height: 100%; z-index: -2;
	background: linear-gradient( to bottom, rgba(10, 7, 31, 0) 50%, rgba(0, 0, 0, 0.09) 50% );
	background-size: 100% 4px; opacity: 0.2;
	animation: scanlines 28s linear infinite; pointer-events: none;
}
@keyframes bg-grid-pan { 0% { background-position: 0 0; } 100% { background-position: 900px 450px; } }
@keyframes scanlines { from { background-position: 0 0; } to { background-position: 0 80px; } }

/* Свечение мыши */
.mouse-follower-glow {
	position: fixed; width: 200px; height: 200px;
	background: radial-gradient(circle, rgba(var(--accent-primary-rgb), 0.06) 0%, transparent 70%);
	border-radius: 50%; pointer-events: none; z-index: -1;
	transform: translate(-50%, -50%); filter: blur(40px); /* Increased blur */
	transition: top 0.1s ease-out, left 0.1s ease-out, background 0.3s ease, opacity 0.3s ease;
	opacity: 0; will-change: top, left, opacity;
}
body.mouse-has-moved .mouse-follower-glow { opacity: 1; }

/* Типография */
h1, h2, h3, h4, h5, h6 { font-family: var(--font-secondary); font-weight: 600; color: var(--text-heading); line-height: 1.4; margin-bottom: 1em; text-shadow: 0 1px 4px rgba(0,0,0,0.4); }
h1 { font-size: clamp(1.7rem, 3.2vw, 2rem); font-weight: 700; text-shadow: 0 0 12px var(--accent-glow); }
h2 { font-size: clamp(1.4rem, 2.6vw, 1.6rem); margin-bottom: 1.5rem; }
h3 { font-size: clamp(1.15rem, 2.1vw, 1.3rem); }
p { margin-bottom: 1.2rem; font-size: clamp(0.95rem, 1.9vw, 1.05rem); max-width: 750px; color: var(--text-medium); }
a { color: var(--text-link); text-decoration: none; transition: color var(--transition-fast), text-shadow 0.3s ease, outline-offset 0.1s ease; }
a:hover { color: var(--text-link-hover); text-shadow: var(--shadow-text-glow); filter: brightness(1.1); }

/* Стили фокуса */
a:focus-visible, button:focus-visible, input:focus-visible, textarea:focus-visible, select:focus-visible {
	outline: 3px solid var(--accent-primary); outline-offset: 5px; border-radius: 6px;
	box-shadow: 0 0 15px var(--accent-glow);
}
:is(a, button, input, textarea, select):focus { outline: none; }

/* Скроллбар */
 ::-webkit-scrollbar { width: 9px; height: 9px; }
 ::-webkit-scrollbar-track { background: rgba(var(--accent-secondary-rgb), 0.1); border-radius: 5px;}
 ::-webkit-scrollbar-thumb { background-color: rgba(var(--accent-primary-rgb), 0.6); border-radius: 5px; border: 2px solid transparent; background-clip: content-box; }
 ::-webkit-scrollbar-thumb:hover { background-color: rgba(var(--accent-primary-rgb), 0.9); }
 body { scrollbar-width: thin; scrollbar-color: rgba(var(--accent-primary-rgb), 0.6) rgba(var(--accent-secondary-rgb), 0.1); }

/* --- Утилиты (Кнопки, Карточки) --- */
.btn { /* Базовый стиль кнопки */
	display: inline-flex; align-items: center; justify-content: center; gap: 0.6em;
	padding: 0.75rem 1.5rem;
	background: transparent; color: var(--accent-primary);
	border: 2px solid var(--accent-primary); border-radius: var(--button-radius);
	font-family: var(--font-secondary); font-weight: 600; font-size: 0.95rem;
	text-align: center; text-transform: uppercase; letter-spacing: 1.1px;
	cursor: pointer; transition: all var(--transition-medium), transform 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	position: relative; overflow: hidden; z-index: 1;
	box-shadow: 0 0 14px -4px var(--accent-glow), inset 0 0 9px -6px var(--accent-glow);
	backdrop-filter: blur(3px); will-change: transform, box-shadow, color, border-color;
	line-height: 1.5; /* Added for consistency */
}
.btn::before { content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: var(--gradient-button); transition: left 0.4s ease-in-out; z-index: -1; }
.btn:hover:not(:disabled) { color: var(--text-fixed-dark); border-color: var(--accent-secondary); box-shadow: 0 0 25px var(--accent-secondary-glow), inset 0 0 12px rgba(var(--accent-secondary-rgb), 0.2); transform: translateY(-4px) scale(1.02); filter: brightness(1.1); }
.btn:hover:not(:disabled)::before { left: 0; background: var(--gradient-button-hover); }
.btn:active:not(:disabled) { transform: translateY(-1px) scale(0.98); box-shadow: 0 0 8px var(--accent-secondary-glow), inset 0 0 15px rgba(0,0,0,0.4); transition-duration: 0.1s; filter: brightness(0.95); }
.btn:disabled { opacity: 0.45; cursor: not-allowed; background-color: transparent !important; border-color: var(--text-muted) !important; color: var(--text-muted) !important; box-shadow: none !important; transform: none !important; filter: grayscale(50%); }
.btn:disabled::before { display: none; }
.btn i { transition: transform 0.3s ease; margin-right: 0.5em;}
.btn:hover:not(:disabled) i { transform: scale(1.15); }
.btn i.fa-spinner { animation: spin 1s linear infinite; transform: none !important; }
@keyframes spin { to { transform: rotate(360deg); } }

/* Button Variants */
.btn-primary { background: var(--gradient-button); border-color: transparent; color: var(--text-fixed-dark); box-shadow: 0 0 18px -2px var(--accent-glow); }
.btn-primary::before { display: none; }
.btn-primary:hover:not(:disabled) { background: var(--gradient-button-hover); border-color: transparent; color: var(--white); box-shadow: 0 0 25px var(--accent-pink-glow); transform: translateY(-4px) scale(1.02); }
.btn-secondary { background-color: rgba(var(--accent-secondary-rgb), 0.12); color: var(--text-medium); border: 1px solid rgba(var(--accent-secondary-rgb), 0.35); box-shadow: none; }
.btn-secondary::before { display: none; }
.btn-secondary:hover:not(:disabled) { background-color: rgba(var(--accent-secondary-rgb), 0.25); border-color: rgba(var(--accent-secondary-rgb), 0.6); color: var(--text-light); box-shadow: 0 0 18px rgba(var(--accent-secondary-rgb), 0.25); transform: translateY(-3px) scale(1.01); }

/* Карточки (базовый стиль + улучшенный ховер) */
.card {
	background: var(--card-bg); border-radius: var(--card-radius);
	border: 1px solid var(--border-color-light);
	box-shadow: var(--shadow-hud);
	transition: transform var(--transition-medium), box-shadow var(--transition-medium), border-color var(--transition-medium), background-color 0.3s ease;
	position: relative; overflow: hidden;
	will-change: transform, box-shadow;
}
.card:hover {
	 transform: translateY(-6px) scale(1.015);
	 box-shadow: var(--shadow-card-hover-enhanced);
	 border-color: var(--border-color-strong);
	 background-color: rgba(var(--card-solid-rgb), 0.95);
}
 /* Уголки для карточек */
 .card::before, .card::after {
	 content: ''; position: absolute; width: 15px; height: 15px;
	 border-color: var(--accent-primary); border-style: solid; opacity: 0;
	 transition: all 0.4s ease; pointer-events: none; z-index: 1;
	 filter: drop-shadow(0 0 3px var(--accent-glow));
 }
 .card::before { top: 8px; left: 8px; border-width: 3px 0 0 3px; }
 .card::after { bottom: 8px; right: 8px; border-width: 0 3px 3px 0; }
 .card:hover::before, .card:hover::after { opacity: 0.8; }
 .card:hover::before { transform: translate(-4px, -4px) rotate(-5deg); }
 .card:hover::after { transform: translate(4px, 4px) rotate(5deg); }

/* --- Sidebar (Identical to dashboard.html) --- */
.sidebar {
    width: var(--sidebar-width); height: 100vh; position: fixed; top: 0; left: 0;
    background: var(--gradient-sidebar); /* Gradient from dashboard */
    color: var(--text-medium);
    padding: 1.5rem 1rem; display: flex; flex-direction: column; z-index: 1000;
    box-shadow: 5px 0 30px rgba(0, 0, 0, 0.4); /* Shadow from dashboard */
    border-right: 1px solid var(--border-color-light);
    transition: transform var(--transition-medium) ease, width var(--transition-medium) ease;
}
.sidebar-header { display: flex; align-items: center; margin-bottom: 2.5rem; padding: 0 0.5rem; position: relative; min-height: 45px; }
#sidebar-close-toggle { display: none; position: absolute; right: 0px; top: 50%; transform: translateY(-50%); background: none; border: none; color: var(--text-muted); font-size: 1.8rem; cursor: pointer; padding: 0.5rem; line-height: 1; transition: color 0.2s ease; }
#sidebar-close-toggle:hover { color: var(--accent-primary); }
.sidebar-logo { font-size: 1.7rem; font-weight: 700; color: var(--text-heading); text-decoration: none; display: flex; align-items: center; gap: 0.8rem; text-shadow: 0 0 8px var(--accent-secondary-glow); }
.sidebar-logo i { font-size: 1.8rem; color: var(--accent-secondary); }
.sidebar-logo span { transition: opacity 0.2s ease; }
.sidebar-menu { list-style: none; padding: 0; margin: 0; flex-grow: 1; overflow-y: auto; }
/* Sidebar scrollbar */
.sidebar-menu::-webkit-scrollbar { width: 5px; }
.sidebar-menu::-webkit-scrollbar-track { background: rgba(255, 255, 255, 0.05); border-radius: 3px;}
.sidebar-menu::-webkit-scrollbar-thumb { background-color: rgba(var(--accent-primary-rgb), 0.4); border-radius: 3px; }
.sidebar-menu::-webkit-scrollbar-thumb:hover { background-color: rgba(var(--accent-primary-rgb), 0.6); }
.sidebar-menu { scrollbar-width: thin; scrollbar-color: rgba(var(--accent-primary-rgb), 0.4) rgba(255, 255, 255, 0.05); }
.sidebar-item { margin-bottom: 0.6rem; }
.sidebar-link { display: flex; align-items: center; padding: 0.85rem 1rem; color: var(--text-medium); text-decoration: none; border-radius: var(--button-radius); transition: background-color 0.25s ease, color 0.25s ease, box-shadow 0.25s ease, border-left-color 0.25s ease; font-weight: 500; position: relative; border-left: 4px solid transparent; }
.sidebar-link i { margin-right: 0.85rem; font-size: 1.25rem; width: 25px; text-align: center; transition: color 0.25s ease; color: var(--text-muted); }
.sidebar-link span { transition: opacity 0.2s ease; }
.sidebar-link:hover { background-color: rgba(var(--accent-primary-rgb), 0.1); color: var(--text-light); box-shadow: inset 3px 0 8px -2px rgba(var(--accent-primary-rgb), 0.3); }
.sidebar-link:hover i { color: var(--accent-primary); }
.sidebar-link.active { background-color: rgba(var(--accent-primary-rgb), 0.15); color: var(--white); font-weight: 600; border-left-color: var(--accent-primary); box-shadow: inset 4px 0 10px -3px rgba(var(--accent-primary-rgb), 0.4); }
.sidebar-link.active i { color: var(--accent-primary); }
.user-profile { display: flex; align-items: center; padding: 1rem; margin-top: 1.5rem; background-color: rgba(var(--accent-secondary-rgb), 0.1); border-radius: 12px; border: 1px solid var(--border-color-light); flex-shrink: 0; }
.user-avatar { width: 42px; height: 42px; border-radius: 50%; background-color: var(--accent-secondary); display: flex; align-items: center; justify-content: center; margin-right: 0.85rem; font-weight: 600; font-size: 1.1rem; overflow: hidden; color: var(--white); border: 2px solid rgba(var(--accent-primary-rgb), 0.3); flex-shrink: 0; box-shadow: 0 0 8px rgba(var(--accent-secondary-rgb), 0.4); }
.user-avatar img { width: 100%; height: 100%; object-fit: cover; }
.user-info { flex-grow: 1; overflow: hidden; }
.user-name { font-weight: 600; font-size: 1rem; color: var(--text-light); white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.user-role { font-size: 0.8rem; color: var(--text-muted); white-space: nowrap; }
.sidebar-footer { margin-top: 1.5rem; padding: 1rem; font-size: 0.8rem; color: var(--text-muted); text-align: center; flex-shrink: 0; opacity: 0.7; }

/* --- Основной контент (FIX: Ensure scrolling) --- */
main {
    flex: 1;
    margin-left: var(--sidebar-width);
    transition: margin-left var(--transition-medium) ease;
    width: calc(100% - var(--sidebar-width));
    height: 100vh; /* Ensure main takes full viewport height */
    display: flex; /* Use flex for internal layout */
    flex-direction: column; /* Stack header and content vertically */
    /* >>> CHANGE: Enable scrolling on main element <<< */
    overflow-y: auto;
    background-color: var(--bg-color);
}
main.loaded { animation: fadeInMain 0.6s ease-out forwards; }
@keyframes fadeInMain { from { opacity: 0; transform: translateY(15px); } to { opacity: 1; transform: translateY(0); } }

/* --- Container for main content - added padding --- */
.main-content-wrapper {
    padding: var(--section-padding-y) var(--container-padding-x);
    /* Removed overflow-y: auto; */
    flex-grow: 1; /* Allow wrapper to take remaining space */
}
.main-content-grid { display: grid; gap: 2rem; }

/* --- Header (FIX: Ensure header doesn't shrink) --- */
.dashboard-header {
    padding: 1rem var(--container-padding-x);
    background-color: rgba(var(--bg-secondary-rgb), 0.75);
    backdrop-filter: blur(15px);
    border-radius: 0 0 var(--card-radius) var(--card-radius);
    box-shadow: var(--shadow-hud);
    display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem;
    position: sticky; top: 0; z-index: 900;
    border-bottom: 1px solid var(--border-color-light);
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
    flex-shrink: 0; /* Prevent header from shrinking */
    margin-left: calc(var(--container-padding-x) * -1); /* Offset padding from main */
    margin-right: calc(var(--container-padding-x) * -1); /* Offset padding from main */
    margin-bottom: var(--section-padding-y); /* Keep bottom margin */
}
body.scrolled .dashboard-header { background-color: rgba(var(--bg-secondary-rgb), 0.9); box-shadow: 0 8px 25px rgba(0,0,0,0.4); }
.header-content { display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem; width: 100%; padding: 0 var(--container-padding-x); /* Add padding inside header */}
.header-content > div:first-child { display: flex; align-items: center; gap: 1rem; flex-grow: 1; }
.mobile-menu-toggle { display: none; background: none; border: none; color: var(--text-medium); font-size: 1.7rem; cursor: pointer; padding: 0.5rem; margin-right: 0.5rem; z-index: 1010; transition: color 0.2s ease; }
.mobile-menu-toggle:hover { color: var(--accent-primary); }
.header-content h1 { font-size: 1.8rem; font-weight: 700; color: var(--text-heading); margin: 0; text-shadow: 0 0 12px var(--accent-glow); }
.header-actions { display: flex; align-items: center; gap: 0.85rem; flex-shrink: 0; }

/* --- START: Notification Styles (from dashboard.html) --- */
.notifications { position: relative; }
.notification-bell { cursor: pointer; padding: 0.7rem; position: relative; display: inline-block; line-height: 1; transition: transform 0.2s ease; }
.notification-bell:hover { transform: scale(1.05); }
.notification-bell i { font-size: 1.5rem; color: var(--text-muted); transition: color 0.2s, filter 0.3s ease; }
.notification-bell:hover i { color: var(--accent-primary); filter: drop-shadow(0 0 5px var(--accent-glow)); }
.notification-badge { position: absolute; top: 0px; right: 0px; width: 19px; height: 19px; background-color: var(--accent-pink); color: var(--white); font-size: 0.7rem; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: 600; border: 2px solid var(--bg-secondary); pointer-events: none; opacity: 0; transform: scale(0.5); transition: opacity 0.3s ease, transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275); box-shadow: 0 0 10px var(--accent-pink-glow); }
.notification-badge.visible { opacity: 1; transform: scale(1); }
.notifications-dropdown-wrapper { position: absolute; top: calc(100% + 15px); right: -10px; width: 390px; background-color: var(--interface-bg); border-radius: 14px; box-shadow: var(--shadow-card); border: 1px solid var(--border-color-medium); z-index: 1010; opacity: 0; visibility: hidden; transform: translateY(18px) scale(0.97); transform-origin: top right; transition: opacity 0.35s ease, transform 0.35s ease, visibility 0s 0.35s; backdrop-filter: blur(6px); }
.notifications-dropdown-wrapper.active { opacity: 1; visibility: visible; transform: translateY(0) scale(1); transition-delay: 0s; }
.notifications-header { padding: 1rem 1.25rem; border-bottom: 1px solid var(--border-color-light); display: flex; justify-content: space-between; align-items: center; }
.notifications-title { font-size: 1.05rem; font-weight: 600; color: var(--text-light); text-shadow: 0 0 5px var(--accent-secondary-glow); }
.mark-all-read-btn { font-size: 0.8rem; color: var(--accent-primary); background: none; border: none; cursor: pointer; font-weight: 500; padding: 0.25rem 0; opacity: 0.8; transition: opacity 0.2s, color 0.2s; }
.mark-all-read-btn:hover:not(:disabled) { text-decoration: underline; opacity: 1; color: var(--white); }
.mark-all-read-btn:disabled { opacity: 0.4; cursor: not-allowed; text-decoration: none !important; color: var(--text-muted) !important; }
#notifications-list { max-height: 360px; overflow-y: auto; padding: 0.5rem 0; }
#notifications-list::-webkit-scrollbar { width: 7px; }
#notifications-list::-webkit-scrollbar-track { background: transparent; }
#notifications-list::-webkit-scrollbar-thumb { background-color: var(--border-color-medium); border-radius: 3.5px; }
.notification-item { display: flex; padding: 1rem 1.25rem; gap: 1rem; border-bottom: 1px solid var(--border-color-light); transition: background-color 0.25s ease, transform 0.2s ease; cursor: pointer; position: relative; }
.notification-item:last-child { border-bottom: none; }
.notification-item:hover { background-color: rgba(var(--accent-primary-rgb), 0.1); transform: translateX(4px); }
.notification-item.is-read { opacity: 0.65; }
.notification-item.is-read:hover { opacity: 0.85; }
.notification-item.is-read .unread-dot { display: none; }
.notification-icon { width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; flex-shrink: 0; font-size: 1.1rem; color: var(--white); box-shadow: 0 3px 6px rgba(0,0,0,0.25); }
.notification-icon.info { background-color: var(--accent-primary); } .notification-icon.success { background-color: var(--accent-lime); color: var(--text-fixed-dark); } .notification-icon.warning { background-color: var(--accent-orange); } .notification-icon.danger { background-color: var(--accent-pink); } .notification-icon.badge { background: linear-gradient(45deg, var(--accent-orange), var(--accent-pink)); } .notification-icon.level_up { background: linear-gradient(45deg, var(--accent-pink), var(--accent-secondary)); } .notification-icon.plan_generated { background: linear-gradient(45deg, var(--accent-secondary), var(--accent-cyan)); } .notification-icon.exercise { background: linear-gradient(45deg, #2a9d8f, var(--accent-lime)); } .notification-icon.test { background: linear-gradient(45deg, var(--accent-secondary), var(--accent-pink)); } .notification-icon.default { background-color: var(--text-muted); }
.notification-content { flex-grow: 1; }
.notification-title { font-weight: 600; color: var(--text-light); margin-bottom: 0.3rem; font-size: 1rem; }
.notification-message { font-size: 0.9rem; color: var(--text-medium); line-height: 1.5; margin-bottom: 0.35rem; }
.notification-time { font-size: 0.8rem; color: var(--text-muted); }
.unread-dot { position: absolute; top: 50%; right: 1.25rem; transform: translateY(-50%); width: 10px; height: 10px; background-color: var(--accent-primary); border-radius: 50%; box-shadow: 0 0 10px var(--accent-glow); animation: pulseDot 1.8s infinite ease-in-out; }
@keyframes pulseDot { 0%, 100% { transform: translateY(-50%) scale(1); opacity: 1; } 50% { transform: translateY(-50%) scale(1.2); opacity: 0.7; } }
.notifications-footer { padding: 0.8rem 1.25rem; border-top: 1px solid var(--border-color-light); text-align: center; background-color: rgba(var(--bg-secondary-rgb, 10, 7, 31), 0.6); border-radius: 0 0 12px 12px; }
.view-all-notifications-link { font-size: 0.9rem; color: var(--accent-primary); text-decoration: none; font-weight: 500; transition: color 0.2s ease; }
.view-all-notifications-link:hover { color: var(--white); text-decoration: underline; }
#no-notifications-msg { padding: 2.5rem 1rem; text-align: center; color: var(--text-muted); font-size: 0.95rem; display: none; }
/* --- END: Notification Styles --- */

/* Content Tabs */
.content-tabs { display: flex; border-bottom: 1px solid var(--border-color-light); margin-bottom: 2rem; overflow-x: auto; padding-bottom: 1px; scrollbar-width: thin; scrollbar-color: rgba(var(--accent-primary-rgb), 0.5) transparent; }
.content-tabs::-webkit-scrollbar { height: 4px; }
.content-tabs::-webkit-scrollbar-track { background: transparent; }
.content-tabs::-webkit-scrollbar-thumb { background-color: rgba(var(--accent-primary-rgb), 0.5); border-radius: 2px; }
.content-tab { padding: 1rem 1.75rem; font-weight: 600; color: var(--text-muted); cursor: pointer; transition: all 0.3s ease; border-bottom: 3px solid transparent; white-space: nowrap; font-size: 1rem; display: flex; align-items: center; gap: 0.6rem; position: relative; }
.content-tab i { font-size: 1.1rem; transition: color 0.3s ease; }
.content-tab::after { content: ''; position: absolute; left: 0; bottom: -2px; width: 100%; height: 3px; background: var(--accent-primary); border-radius: 1.5px; opacity: 0; transform: scaleX(0.5); box-shadow: 0 0 10px var(--accent-glow); transition: opacity 0.3s ease, transform 0.3s ease; transform-origin: center; }
.content-tab:hover { color: var(--text-light); }
.content-tab:hover::after { opacity: 0.5; transform: scaleX(0.8); }
.content-tab.active { color: var(--accent-primary); }
.content-tab.active::after { opacity: 1; transform: scaleX(1); }
.content-tab.active i { color: var(--accent-primary); }

/* Tab Content */
.tab-content { display: none; }
.tab-content.active { display: block; animation: fadeInContent 0.6s ease-out forwards; }
@keyframes fadeInContent { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }

/* Diagnostic Prompt */
.diagnostic-prompt { padding: 1.5rem 2rem; margin-top: 2rem; background-color: rgba(var(--info-color-rgb, 0, 123, 255), 0.1); border: 1px solid rgba(var(--info-color-rgb, 0, 123, 255), 0.3); border-radius: var(--card-radius); display: flex; flex-direction: column; align-items: center; text-align: center; gap: 1rem; box-shadow: var(--shadow-sm); }
.diagnostic-prompt i { font-size: 2rem; color: var(--info-color); margin-bottom: 0.5rem; }
.diagnostic-prompt p { margin: 0; flex-grow: 1; color: var(--text-light); font-size: 1rem; }
.diagnostic-prompt .btn { margin-top: 1rem; }
.diagnostic-prompt .btn i { margin-right: 0.5rem; }

/* Stats Section */
.stats-section { margin-bottom: 2.5rem; }
.dashboard-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(290px, 1fr)); gap: 2rem; }
.dashboard-card { padding: 1.9rem; display: flex; flex-direction: column; min-height: 190px; position: relative; }
.dashboard-card .loading-skeleton { display: none; padding: 1.9rem; position: absolute; inset: 0; z-index: 5; background-color: rgba(var(--card-bg-color-rgb, 15, 10, 45), 0.9); backdrop-filter: blur(2px); flex-direction: column; }
.dashboard-card.loading .loading-skeleton { display: flex; }
.dashboard-card.loading > *:not(.loading-skeleton) { visibility: hidden; }
.card-header { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 1.2rem; }
.card-title { font-size: 1.05rem; font-weight: 600; color: var(--text-light); text-transform: uppercase; letter-spacing: 0.8px; }
.card-badge { font-size: 0.8rem; font-weight: 600; padding: 0.35rem 0.9rem; border-radius: 14px; background-color: rgba(var(--accent-primary-rgb), 0.15); color: var(--accent-primary); border: 1px solid rgba(var(--accent-primary-rgb), 0.3); text-shadow: 0 0 3px rgba(var(--accent-primary-rgb), 0.4); }
.card-badge.success { background-color: rgba(var(--accent-lime-rgb), 0.15); color: var(--accent-lime); border-color: rgba(var(--accent-lime-rgb), 0.3); text-shadow: 0 0 3px rgba(var(--accent-lime-rgb), 0.4); }
.card-badge.warning { background-color: rgba(var(--accent-orange-rgb), 0.15); color: var(--accent-orange); border-color: rgba(var(--accent-orange-rgb), 0.3); text-shadow: 0 0 3px rgba(var(--accent-orange-rgb), 0.4); }
.card-badge.info { background-color: rgba(var(--accent-secondary-rgb), 0.15); color: var(--accent-secondary); border-color: rgba(var(--accent-secondary-rgb), 0.3); text-shadow: 0 0 3px rgba(var(--accent-secondary-rgb), 0.4); }
.card-content { flex-grow: 1; margin-bottom: 1.4rem; }
.card-value { font-size: 2.6rem; font-weight: 700; color: var(--text-heading); margin-bottom: 0.6rem; line-height: 1.1; min-height: 42px; text-shadow: 0 0 10px rgba(var(--white-rgb), 0.4); }
.progress-info, .card-description { font-size: 0.95rem; color: var(--text-medium); display: flex; justify-content: space-between; align-items: center; }
.card-footer { font-size: 0.9rem; color: var(--text-muted); display: flex; align-items: center; gap: 0.5rem; padding-top: 1rem; border-top: 1px solid var(--border-color-light); margin-top: auto; font-weight: 500; }
.card-footer.positive { color: var(--accent-lime); }
.card-footer.negative { color: var(--accent-pink); }
.card-footer i { font-size: 0.9em; }
.progress-container { width: 100%; height: 10px; background-color: rgba(var(--accent-primary-rgb), 0.15); border-radius: 5px; overflow: hidden; margin: 0.7rem 0; box-shadow: inset 0 2px 4px rgba(0,0,0,0.4); }
.progress-bar { height: 100%; border-radius: 5px; background: var(--gradient-button); transition: width 0.6s ease-out; box-shadow: 0 0 10px var(--accent-glow); }

/* Section Styles */
.test-results-section, .study-plan-section, .topic-analysis-section { margin-bottom: 2rem; position: relative; min-height: 300px; }
.loading-overlay { position: absolute; inset: 0; background-color: rgba(var(--card-solid-rgb, 15, 10, 45), 0.8); display: flex; justify-content: center; align-items: center; z-index: 10; border-radius: var(--card-radius); transition: opacity 0.3s ease-out; opacity: 1; backdrop-filter: blur(3px); }
.loading-overlay.hidden { opacity: 0; pointer-events: none; }
.loading-spinner { width: 35px; height: 35px; border: 4px solid var(--accent-primary); border-radius: 50%; border-top-color: transparent; border-right-color: transparent; animation: loading-spinner 0.8s linear infinite; }
.empty-state { padding: 3rem 2rem; text-align: center; color: var(--text-muted); display: none; background-color: transparent; border-radius: var(--card-radius); border: 1px dashed var(--border-color-medium); margin-top: 1rem; }
.empty-state i { font-size: 3rem; margin-bottom: 1.2rem; color: var(--accent-secondary); opacity: 0.6; }
.empty-state h3 { font-size: 1.2rem; font-weight: 600; color: var(--text-light); margin-bottom: 0.75rem; }
.empty-state p { margin: 0 auto 1.5rem auto; font-size: 0.95rem; max-width: 450px; color: var(--text-medium); }
.empty-state .btn { margin-top: 0.5rem; }
.skeleton { background-color: var(--skeleton-bg); border-radius: 6px; position: relative; overflow: hidden; }
.skeleton::after { content: ''; position: absolute; top: 0; left: -150%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent, var(--skeleton-highlight), transparent); animation: skeleton-loading 1.5s infinite linear; }
@keyframes skeleton-loading { 0% { left: -150%; } 100% { left: 150%; } }
.skeleton.title-sm { height: 16px; width: 65%; margin-bottom: 0.7rem; }
.skeleton.value-lg { height: 40px; width: 45%; margin-bottom: 0.5rem; border-radius: 8px; }
.skeleton.text-md { height: 18px; width: 85%; margin-bottom: 0.4rem; }
.skeleton.text-sm { height: 15px; width: 75%; }
.skeleton.footer-sm { height: 14px; width: 60%; }

/* Study Plan Overview */
.schedule-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 1.5rem; }
.schedule-day { background-color: var(--card-solid); border-radius: var(--card-radius); padding: 1.2rem; box-shadow: var(--shadow-hud); border: 1px solid var(--border-color-light); transition: all 0.3s ease; }
.schedule-day:hover { transform: translateY(-4px); box-shadow: var(--shadow-card); border-color: var(--accent-primary); }
.schedule-day-header { padding-bottom: 0.8rem; font-weight: 600; font-size: 1rem; color: var(--text-light); border-bottom: 1px solid var(--border-color-light); margin-bottom: 1rem; text-align: center; }
.schedule-activities { min-height: 100px; display: flex; flex-direction: column; gap: 0.8rem; }
.schedule-activity-item { display: flex; align-items: flex-start; gap: 0.75rem; background-color: transparent; border: none; border-left: 3px solid var(--accent-primary); padding: 0.6rem 0 0.6rem 0.8rem; border-radius: 0; font-size: 0.88rem; transition: border-left-color 0.2s ease; }
.activity-icon { font-size: 1rem; color: var(--accent-primary); width: 20px; text-align: center; margin-top: 2px; flex-shrink: 0; }
.activity-details strong { display: block; font-weight: 500; color: var(--text-light); margin-bottom: 2px; line-height: 1.4; }
.activity-details span { font-size: 0.78rem; color: var(--text-muted); display: block; }
.schedule-activity-item.completed { border-left-color: var(--accent-lime); opacity: 0.7; }
.schedule-activity-item.completed .activity-icon { color: var(--accent-lime); }
.schedule-activity-item.completed strong { text-decoration: line-through; color: var(--text-muted); }
.no-activities-placeholder { text-align: center; font-style: italic; color: var(--text-muted); font-size: 0.85rem; margin: auto; padding: 1rem 0; }
.full-plan-link-container { text-align: center; margin-top: 1.5rem; }

/* Topic Analysis */
.topic-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1.5rem; }
.topic-card { padding: 1.5rem; display: flex; flex-direction: column; }
.topic-header { display: flex; align-items: center; margin-bottom: 1.25rem; gap: 0.8rem; }
.topic-icon { width: 50px; height: 50px; flex-shrink: 0; border-radius: 14px; display: flex; align-items: center; justify-content: center; color: var(--white); background: var(--gradient-info); font-size: 1.5rem; box-shadow: 0 5px 12px rgba(var(--accent-primary-rgb), 0.2); }
.topic-card.strength { border-left: 4px solid var(--accent-lime); }
.topic-card.weakness { border-left: 4px solid var(--accent-pink); }
.topic-card.neutral { border-left: 4px solid var(--accent-orange); }
.topic-card.strength .topic-icon { background: var(--gradient-success); box-shadow: 0 5px 12px rgba(var(--accent-lime-rgb), 0.2); }
.topic-card.weakness .topic-icon { background: var(--gradient-danger); box-shadow: 0 5px 12px rgba(var(--accent-pink-rgb), 0.2); }
.topic-card.neutral .topic-icon { background: var(--gradient-warning); box-shadow: 0 5px 12px rgba(var(--accent-orange-rgb), 0.2); }
.topic-title { font-weight: 600; font-size: 1.1rem; color: var(--text-light); flex-grow: 1; line-height: 1.3; }
.topic-stats { margin-top: auto; padding-top: 1rem; border-top: 1px dashed var(--border-color-light); }
.topic-stat { display: flex; justify-content: space-between; align-items: center; font-size: 0.9rem; margin-bottom: 0.5rem; color: var(--text-medium); }
.topic-stat strong { font-weight: 600; color: var(--text-light); }
.topic-stat .accuracy-value.high { color: var(--accent-lime); }
.topic-stat .accuracy-value.low { color: var(--accent-pink); }
.topic-stat .accuracy-value.medium { color: var(--accent-orange); }
.topic-progress-container { width: 100%; height: 8px; background-color: rgba(var(--accent-primary-rgb), 0.1); border-radius: 4px; overflow: hidden; margin: 0.6rem 0; }
.topic-progress-bar { height: 100%; border-radius: 4px; background: var(--gradient-info); transition: width 0.5s ease-out; }

/* Footer */
.dashboard-footer { margin-top: 2.5rem; padding: 1.5rem 0; text-align: center; color: var(--text-muted); font-size: 0.9rem; border-top: 1px solid var(--border-color-light); opacity: 0.6; flex-shrink: 0; }

/* Responsive */
@media (max-width: 992px) { :root { --sidebar-width: 85px; } main { margin-left: 85px; width: calc(100% - 85px); } .sidebar { width: 85px; } .sidebar-logo span, .sidebar-link span, .user-info, .sidebar-footer { display: none; } .sidebar-link i { margin-right: 0; font-size: 1.6rem; } .sidebar-logo i { margin-right: 0; } .sidebar-header, .sidebar-link { justify-content: center; } .user-profile { justify-content: center; padding: 0.8rem; } .user-avatar { margin-right: 0; width: 45px; height: 45px; } .mobile-menu-toggle#main-mobile-menu-toggle { display: block; } }
@media (max-width: 768px) { main { padding: 0 1rem; } .dashboard-header { padding: 1rem 1.25rem; } body.scrolled .dashboard-header { margin: 0 -1rem 1.5rem -1rem; padding: 1rem 1.25rem; } .header-content { flex-direction: column; align-items: stretch; } .header-content > div:first-child { justify-content: space-between; } .header-actions { justify-content: flex-end; margin-top: 0.5rem; gap: 0.8rem; } .header-title h1 { font-size: 1.5rem; } .dashboard-grid, .stat-cards, .shortcut-grid, .schedule-grid, .topic-grid { grid-template-columns: 1fr; } }
@media (max-width: 576px) { :root { --sidebar-width: 0; } main { margin-left: 0; width: 100%; padding: 0 0.75rem; } .sidebar { transform: translateX(-110%); width: 280px; z-index: 1100; } .sidebar.active { transform: translateX(0); } .sidebar.active .sidebar-logo span, .sidebar.active .sidebar-link span, .sidebar.active .user-info, .sidebar.active .sidebar-footer { display: block; } .sidebar.active .sidebar-link i { margin-right: 0.85rem; font-size: 1.25rem; } .sidebar.active .sidebar-header, .sidebar.active .sidebar-link { justify-content: flex-start; } .sidebar.active .user-profile { padding: 1rem; } .sidebar.active .user-avatar { margin-right: 0.85rem; width: 42px; height: 42px; } .sidebar.active #sidebar-close-toggle { display: block; } .header-title h1 { font-size: 1.3rem; } .header-actions { gap: 0.5rem; } .mouse-follower-glow { display: none !important; } }
.sidebar-overlay { display: none; position: fixed; inset: 0; background-color: rgba(3, 2, 12, 0.7); z-index: 999; opacity: 0; transition: opacity var(--transition-medium) ease; backdrop-filter: blur(5px); }
.sidebar-overlay.active { display: block; opacity: 1; }
@media (prefers-reduced-motion: reduce) { html { scroll-behavior: auto; } *, *::before, *::after { animation-duration: 0.01ms !important; animation-iteration-count: 1 !important; transition-duration: 0.01ms !important; animation-delay: -0.01ms !important; transition-delay: 0ms !important; will-change: auto !important; } .sidebar { transition: transform 0.01ms !important; } .mouse-follower-glow { display: none !important; } body::before, body::after { animation: none !important; } .loading-spinner { animation: none !important; border: 4px solid var(--accent-primary) !important; } .skeleton::after { animation: none !important; background: var(--skeleton-highlight) !important; } main.loaded, .main-content-wrapper [data-animate].animated, .tab-content.active { animation: none !important; } }
/* Tooltipster Theme */
.tooltipster-shadow { border-radius: 8px; background: var(--interface-bg); color: var(--text-light); box-shadow: var(--shadow-card); border: 1px solid var(--border-color-medium); }
.tooltipster-shadow .tooltipster-content { padding: 8px 14px; font-size: 0.88rem; font-family: var(--font-primary); }

/* --- END: Cyberpunk CSS Theme --- */

    </style>
</head>
<body>
    <div class="initial-loading-overlay" id="initial-loader">
        <div class="loading-spinner"></div>
        <p>SYNCHRONIZACE...</p>
    </div>

     <div class="offline-banner" id="offline-banner"> <i class="fas fa-plug"></i> OFFLINE // SPOJENÍ ZTRACENO.</div>

    <div class="sidebar-overlay" id="sidebar-overlay"></div>

    <aside class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <button class="mobile-menu-toggle" id="sidebar-close-toggle" aria-label="Zavřít menu">
                <i class="fas fa-times"></i>
            </button>
            <a href="/dashboard.html" class="sidebar-logo">
                <i class="fas fa-atom"></i> <span>Justax</span>
            </a>
        </div>
        <ul class="sidebar-menu">
             <li class="sidebar-item"> <a href="/dashboard.html" class="sidebar-link active"> <i class="fas fa-tachometer-alt"></i> <span>Nástěnka</span> </a> </li>
             <li class="sidebar-item"> <a href="/dashboard/procvicovani/main.html" class="sidebar-link"> <i class="fas fa-laptop-code"></i> <span>Procvičování</span> </a> </li>
            <li class="sidebar-item"> <a href="/dashboard/pokrok.html" class="sidebar-link"> <i class="fas fa-chart-line"></i> <span>Pokrok</span> </a> </li>
            <li class="sidebar-item"> <a href="/dashboard/oceneni.html" class="sidebar-link"> <i class="fas fa-medal"></i> <span>Ocenění</span> </a> </li>
            <li class="sidebar-item"> <a href="/dashboard/materialy.html" class="sidebar-link"> <i class="fas fa-database"></i> <span>Databanka</span> </a> </li>
            <li class="sidebar-item"> <a href="/dashboard/profile.html" class="sidebar-link"> <i class="fas fa-user-astronaut"></i> <span>Profil</span> </a> </li>
        </ul>
        <div class="user-profile">
            <div class="user-avatar" id="sidebar-avatar">?</div>
            <div class="user-info">
                <div class="user-name" id="sidebar-name">Načítání...</div>
                <div class="user-role">Pilot</div> </div>
        </div>
        <div class="sidebar-footer"> &copy; 2025 Justax Systems </div>
    </aside>

    <main id="main-content">
        <div class="error-container" id="global-error"></div>

        <header class="dashboard-header">
            <div class="header-content">
                 <div>
                      <button class="mobile-menu-toggle" id="main-mobile-menu-toggle" aria-label="Otevřít menu">
                          <i class="fas fa-bars"></i>
                     </button>
                     <h1 id="dashboard-title">Nástěnka // OVERVIEW</h1> </div>
                <div class="header-actions">
                    <button class="refresh-btn" id="refresh-data-btn" title="Obnovit data">
                        <i class="fas fa-sync-alt"></i>
                        <span class="refresh-text">RELOAD</span> </button>
                    <div class="notifications">
                        <div class="notification-bell" id="notification-bell" title="Oznámení">
                             <i class="far fa-bell"></i>
                             <span class="notification-badge" id="notification-count">0</span>
                        </div>
                        <div class="notifications-dropdown-wrapper" id="notifications-dropdown">
                             <div class="notifications-header">
                                 <span class="notifications-title">PŘÍCHOZÍ SIGNÁLY</span>
                                 <button class="mark-all-read-btn" id="mark-all-read" disabled>Vymazat vše</button>
                             </div>
                             <div id="notifications-list">
                                 <div class="notification-item skeleton"> <div class="notification-icon skeleton" style="background-color: var(--skeleton-bg);"></div> <div class="notification-content"> <div class="skeleton" style="height: 16px; width: 70%; margin-bottom: 6px;"></div> <div class="skeleton" style="height: 12px; width: 90%;"></div> <div class="skeleton" style="height: 10px; width: 40%; margin-top: 6px;"></div> </div> </div>
                                 <div class="notification-item skeleton"> <div class="notification-icon skeleton" style="background-color: var(--skeleton-bg);"></div> <div class="notification-content"> <div class="skeleton" style="height: 16px; width: 60%; margin-bottom: 6px;"></div> <div class="skeleton" style="height: 12px; width: 80%;"></div> <div class="skeleton" style="height: 10px; width: 50%; margin-top: 6px;"></div> </div> </div>
                                 <div id="no-notifications-msg" style="display: none;">ŽÁDNÉ NOVÉ SIGNÁLY</div>
                             </div>
                             <div class="notifications-footer">
                                 <a href="#" class="view-all-notifications-link">ZOBRAZIT ARCHIV</a>
                             </div>
                        </div>
                     </div>
                </div>
            </div>
        </header>

        <div class="main-content-wrapper">
            <div class="main-content-grid">
                 <section class="welcome-banner card" data-animate style="--animation-order: 0;"> <div class="welcome-content">
                         <div class="welcome-text-content">
                             <h2 class="welcome-title" id="welcome-title">Vítejte!</h2>
                             <p class="welcome-text">Přehled vašeho kyber-profilu a rychlé akce.</p>
                             <button class="welcome-button" id="start-practice-btn"><i class="fas fa-play"></i> Spustit Trénink</button>
                         </div>
                         <div class="welcome-image">
                              <svg viewBox="0 0 220 160" fill="none" xmlns="http://www.w3.org/2000/svg"> <rect width="220" height="160" rx="12" fill="url(#paint0_linear_dash_db)"/> <path d="M30 110C30 100 70 60 110 80C150 100 190 40 190 40" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/> <circle cx="45" cy="105" r="6" fill="currentColor"/> <circle cx="110" cy="80" r="8" fill="currentColor"/> <circle cx="190" cy="40" r="6" fill="currentColor"/> <rect x="30" y="130" width="160" height="8" rx="4" fill="currentColor"/> <rect x="50" y="120" width="120" height="6" rx="3" fill="currentColor"/> <defs> <linearGradient id="paint0_linear_dash_db" x1="0" y1="0" x2="220" y2="160" gradientUnits="userSpaceOnUse"> <stop stop-color="currentColor" stop-opacity="0.15"/> <stop offset="1" stop-color="currentColor" stop-opacity="0"/> </linearGradient> </defs> </svg>
                         </div>
                     </div>
                 </section>

                <section class="stats-section">
                    <h2 class="section-title" data-animate style="--animation-order: 1;"><i class="fas fa-chart-pie"></i>BOJOVÉ STATISTIKY</h2>
                    <div class="stat-cards">
                        <div class="stat-card card loading" id="progress-card" data-animate style="--animation-order: 2;">
                             <div class="loading-skeleton"> <div class="skeleton-info"> <div class="skeleton title"></div> <div class="skeleton value"></div> <div class="skeleton text text-short"></div> </div> <div class="skeleton icon-placeholder"></div> </div>
                             <div class="stat-card-content"> <div class="stat-card-info"> <div class="stat-card-title"><i class="fas fa-tasks"></i>Celkový Progress</div> <div class="stat-card-value">- %</div> <div class="stat-card-change"><i class="fas fa-minus"></i> Načítání...</div> </div> </div>
                             <div class="stat-card-icon-bg progress-icon"><i class="fas fa-chart-line"></i></div>
                             </div>
                        <div class="stat-card card loading" id="points-card" data-animate style="--animation-order: 3;">
                             <div class="loading-skeleton"> <div class="skeleton-info"> <div class="skeleton title"></div> <div class="skeleton value"></div> <div class="skeleton text text-short"></div> </div> <div class="skeleton icon-placeholder"></div> </div>
                              <div class="stat-card-content"> <div class="stat-card-info"> <div class="stat-card-title"><i class="fas fa-coins"></i>Kredity</div> <div class="stat-card-value">-</div> <div class="stat-card-change"><i class="fas fa-minus"></i> Načítání...</div> </div> </div>
                              <div class="stat-card-icon-bg points-icon"><i class="fas fa-star"></i></div>
                             </div>
                         <div class="stat-card card loading" id="streak-card" data-animate style="--animation-order: 4;">
                             <div class="loading-skeleton"> <div class="skeleton-info"> <div class="skeleton title"></div> <div class="skeleton value"></div> <div class="skeleton text text-short"></div> </div> <div class="skeleton icon-placeholder"></div> </div>
                               <div class="stat-card-content"> <div class="stat-card-info"> <div class="stat-card-title"><i class="fas fa-calendar-check"></i>Série</div> <div class="stat-card-value">-</div> <div class="stat-card-change">MAX: - dní</div> </div> </div>
                              <div class="stat-card-icon-bg streak-icon"><i class="fas fa-fire"></i></div>
                             </div>
                    </div>
                </section>

                <section class="shortcuts-section">
                    <h2 class="section-title" data-animate style="--animation-order: 5;"><i class="fas fa-bolt"></i>RYCHLÉ PORTÁLY</h2>
                    <div class="shortcut-grid">
                        <a href="/dashboard/procvicovani/main.html" class="shortcut-card card" data-animate style="--animation-order: 6;"> <div class="shortcut-icon"> <i class="fas fa-laptop-code"></i> </div> <h3 class="shortcut-title">Tréninková Zóna</h3> <p class="shortcut-desc">Spusťte simulace a procvičte své dovednosti.</p> </a>
                        <a href="/dashboard/pokrok.html" class="shortcut-card card" data-animate style="--animation-order: 7;"> <div class="shortcut-icon"> <i class="fas fa-chart-line"></i> </div> <h3 class="shortcut-title">Analýza Pokroku</h3> <p class="shortcut-desc">Sledujte metriky svého vývoje a úspěchů.</p> </a>
                        <a href="/dashboard/materialy.html" class="shortcut-card card" data-animate style="--animation-order: 8;"> <div class="shortcut-icon"> <i class="fas fa-database"></i> </div> <h3 class="shortcut-title">Databanka Vědomostí</h3> <p class="shortcut-desc">Přístup k výukovým materiálům a zdrojům.</p> </a>
                        <a href="/dashboard/profile.html" class="shortcut-card card" data-animate style="--animation-order: 9;"> <div class="shortcut-icon"> <i class="fas fa-user-astronaut"></i> </div> <h3 class="shortcut-title">Profil Pilota</h3> <p class="shortcut-desc">Konfigurace osobních údajů a nastavení.</p> </a>
                    </div>
                </section>

                <section class="activity-section">
                    <h2 class="section-title" data-animate style="--animation-order: 10;"><i class="fas fa-history"></i>POSLEDNÍ ZÁZNAMY V LOGU</h2>
                    <div class="activity-list-container card loading" id="activity-list-container" data-animate style="--animation-order: 11;">
                        <div class="activity-list" id="activity-list">
                            <div class="loading-placeholder">
                                 <div class="skeleton-activity-item"> <div class="skeleton icon-placeholder"></div> <div style="flex-grow: 1;"> <div class="skeleton activity-line"></div> <div class="skeleton activity-line text-short"></div> <div class="skeleton activity-line-short"></div> </div> </div>
                                 <div class="skeleton-activity-item"> <div class="skeleton icon-placeholder"></div> <div style="flex-grow: 1;"> <div class="skeleton activity-line"></div> <div class="skeleton activity-line text-short"></div> <div class="skeleton activity-line-short"></div> </div> </div>
                                 <div class="skeleton-activity-item"> <div class="skeleton icon-placeholder"></div> <div style="flex-grow: 1;"> <div class="skeleton activity-line"></div> <div class="skeleton activity-line text-short"></div> <div class="skeleton activity-line-short"></div> </div> </div>
                            </div>
                             <div class="empty-state" style="display: none;">
                                <i class="fas fa-satellite-dish"></i><p>LOG PRÁZDNÝ // ŽÁDNÉ AKTIVITY</p>
                             </div>
                             <div class="card-error-state" style="display: none;">
                                 <i class="fas fa-exclamation-triangle"></i><p>CHYBA // NELZE NAČÍST LOG</p>
                             </div>
                        </div>
                         <a href="/dashboard/pokrok.html" class="view-all-link">Zobrazit Kompletní LOG <i class="fas fa-angle-double-right"></i></a>
                     </div>
                </section>
            </div>

             <footer class="dashboard-footer">
                <p>&copy; <span id="currentYearFooter">2025</span> Justax Systems // Secure Channel</p>
            </footer>
        </div> </main>

    <div class="toast-container" id="toast-container"></div>

     <div id="mouse-follower" class="mouse-follower-glow"></div>

    <script>
        // Using an immediately invoked function expression (IIFE) to scope variables
        (function() {
            // --- START: Initialization and Configuration ---
            const supabaseUrl = 'https://qcimhjjwvsbgjsitmvuh.supabase.co'; // ЗАМЕНИТЬ НА ВАШ URL
            const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFjaW1oamp3dnNiZ2pzaXRtdnVoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI1ODA5MjYsImV4cCI6MjA1ODE1NjkyNn0.OimvRtbXuIUkaIwveOvqbMd_cmPN5yY3DbWCBYc9D10'; // ЗАМЕНИТЬ НА ВАШ ANON KEY
            let supabase = null;
            let currentUser = null;
            let currentProfile = null;
            let isLoading = { stats: false, activities: false, notifications: false }; // Состояние загрузки

            // DOM Elements Cache (сгруппировано для ясности)
            const ui = {
                // Loaders & Overlays
                initialLoader: document.getElementById('initial-loader'),
                sidebarOverlay: document.getElementById('sidebar-overlay'),
                // Main Layout & Sidebar
                mainContent: document.getElementById('main-content'),
                sidebar: document.getElementById('sidebar'),
                mainMobileMenuToggle: document.getElementById('main-mobile-menu-toggle'),
                sidebarCloseToggle: document.getElementById('sidebar-close-toggle'),
                // Sidebar Profile
                sidebarAvatar: document.getElementById('sidebar-avatar'),
                sidebarName: document.getElementById('sidebar-name'),
                // Header
                dashboardTitle: document.getElementById('dashboard-title'),
                refreshDataBtn: document.getElementById('refresh-data-btn'),
                // Notifications
                notificationBell: document.getElementById('notification-bell'),
                notificationCount: document.getElementById('notification-count'),
                notificationsDropdown: document.getElementById('notifications-dropdown'),
                notificationsList: document.getElementById('notifications-list'),
                noNotificationsMsg: document.getElementById('no-notifications-msg'),
                markAllReadBtn: document.getElementById('mark-all-read'),
                // Welcome Banner
                welcomeTitle: document.getElementById('welcome-title'),
                startPracticeBtn: document.getElementById('start-practice-btn'),
                // Stat Cards
                progressCard: document.getElementById('progress-card'),
                pointsCard: document.getElementById('points-card'),
                streakCard: document.getElementById('streak-card'),
                // Activity List
                activityListContainer: document.getElementById('activity-list-container'),
                activityList: document.getElementById('activity-list'),
                activityListEmptyState: document.querySelector('#activity-list-container .empty-state'),
                activityListErrorState: document.querySelector('#activity-list-container .card-error-state'),
                // Feedback & Status
                toastContainer: document.getElementById('toast-container'),
                globalError: document.getElementById('global-error'),
                offlineBanner: document.getElementById('offline-banner'),
                // Mouse Follower
                mouseFollower: document.getElementById('mouse-follower')
            };

            // Визуальные настройки для активностей
            const activityVisuals = {
                exercise: { name: 'Trénink', icon: 'fa-laptop-code', class: 'exercise' }, // Изменены иконки
                test: { name: 'Test', icon: 'fa-vial', class: 'test' },
                badge: { name: 'Odznak Získán', icon: 'fa-medal', class: 'badge' },
                diagnostic: { name: 'Diagnostika', icon: 'fa-microscope', class: 'diagnostic' }, // Изменено
                lesson: { name: 'Nová Data', icon: 'fa-book-open', class: 'lesson' }, // Изменено
                plan_generated: { name: 'Plán Aktualizován', icon: 'fa-route', class: 'plan_generated' }, // Изменено
                level_up: { name: 'Level UP!', icon: 'fa-angle-double-up', class: 'level_up' }, // Изменено
                other: { name: 'Systémová Zpráva', icon: 'fa-info-circle', class: 'other' },
                default: { name: 'Aktivita', icon: 'fa-check-circle', class: 'default' }
            };
            // --- END: Initialization and Configuration ---


            // --- START: Helper Functions ---
            function showToast(title, message, type = 'info', duration = 4500) { /* ... (Стилизован под тему) ... */
                if (!ui.toastContainer) return;
                 try {
                     const toastId = `toast-${Date.now()}`;
                     const toastElement = document.createElement('div');
                     toastElement.className = `toast ${type}`;
                     toastElement.id = toastId;
                     toastElement.setAttribute('role', 'alert');
                     toastElement.setAttribute('aria-live', 'assertive');
                     toastElement.innerHTML = `
                         <i class="toast-icon"></i>
                         <div class="toast-content">
                             ${title ? `<div class="toast-title">${sanitizeHTML(title)}</div>` : ''}
                             <div class="toast-message">${sanitizeHTML(message)}</div>
                         </div>
                         <button type="button" class="toast-close" aria-label="Zavřít">&times;</button>
                     `;
                     const icon = toastElement.querySelector('.toast-icon');
                     // Используем FontAwesome классы напрямую
                     icon.className = `toast-icon fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : type === 'warning' ? 'fa-exclamation-triangle' : 'fa-info-circle'}`;
                     toastElement.querySelector('.toast-close').addEventListener('click', () => {
                         toastElement.classList.remove('show');
                         setTimeout(() => toastElement.remove(), 400);
                     });
                     ui.toastContainer.appendChild(toastElement);
                     requestAnimationFrame(() => { toastElement.classList.add('show'); });
                     setTimeout(() => { if (toastElement.parentElement) { toastElement.classList.remove('show'); setTimeout(() => toastElement.remove(), 400); } }, duration);
                 } catch (e) { console.error("Chyba při zobrazování toastu:", e); }
             }
            function showError(message, isGlobal = false) { /* ... (Стилизован под тему) ... */
                 console.error("Došlo k chybě:", message);
                 if (isGlobal && ui.globalError) {
                     ui.globalError.innerHTML = `<div class="error-message"><i class="fas fa-exclamation-triangle"></i><div>${sanitizeHTML(message)}</div><button class="retry-button btn" id="global-retry-btn">Zkusit Znovu</button></div>`; // Добавлен класс btn
                     ui.globalError.style.display = 'block';
                     const retryBtn = document.getElementById('global-retry-btn');
                     if (retryBtn) { retryBtn.addEventListener('click', () => { hideError(); if (currentUser && !isLoading.stats && !isLoading.activities && !isLoading.notifications) { setLoadingState('all', true); loadDashboardData(currentUser, currentProfile); } else { showToast("Info", "Data se načítají nebo nejste přihlášeni.", "info"); } }); }
                 } else { showToast('CHYBA SYSTÉMU', message, 'error', 6000); }
             }
            function hideError() { if (ui.globalError) ui.globalError.style.display = 'none'; }
            function updateOnlineStatus() { if (ui.offlineBanner) ui.offlineBanner.style.display = navigator.onLine ? 'none' : 'block'; if (!navigator.onLine) showToast('Offline', 'Spojení ztraceno.', 'warning'); }
            function getInitials(userData) { /* ... (без изменений) ... */ if (!userData) return '?'; const f = userData.first_name?.[0] || ''; const l = userData.last_name?.[0] || ''; const nameInitial = (f + l).toUpperCase(); const usernameInitial = userData.username?.[0].toUpperCase() || ''; const emailInitial = userData.email?.[0].toUpperCase() || ''; return nameInitial || usernameInitial || emailInitial || '?'; }
            function formatRelativeTime(timestamp) { /* ... (без изменений) ... */ if (!timestamp) return ''; try { const now = new Date(); const date = new Date(timestamp); if (isNaN(date.getTime())) return '-'; const diffMs = now - date; const diffSec = Math.round(diffMs / 1000); const diffMin = Math.round(diffSec / 60); const diffHour = Math.round(diffMin / 60); const diffDay = Math.round(diffHour / 24); const diffWeek = Math.round(diffDay / 7); if (diffSec < 60) return 'Nyní'; if (diffMin < 60) return `Před ${diffMin} min`; if (diffHour < 24) return `Před ${diffHour} hod`; if (diffDay === 1) return `Včera`; if (diffDay < 7) return `Před ${diffDay} dny`; if (diffWeek <= 4) return `Před ${diffWeek} týdny`; return date.toLocaleDateString('cs-CZ', { day: 'numeric', month: 'numeric', year: 'numeric' }); } catch (e) { console.error("Chyba formátování času:", e, "Timestamp:", timestamp); return '-'; } }
            function openMenu() { if (ui.sidebar && ui.sidebarOverlay) { ui.sidebar.classList.add('active'); ui.sidebarOverlay.classList.add('active'); } }
            function closeMenu() { if (ui.sidebar && ui.sidebarOverlay) { ui.sidebar.classList.remove('active'); ui.sidebarOverlay.classList.remove('active'); } }
            function sanitizeHTML(str) { const temp = document.createElement('div'); temp.textContent = str || ''; return temp.innerHTML; }
            function setLoadingState(section, isLoadingFlag) { /* ... (без изменений в логике) ... */
                 const sections = section === 'all' ? ['stats', 'activities', 'notifications'] : [section];
                 sections.forEach(sec => {
                     if (isLoading[sec] === isLoadingFlag && section !== 'all') return;
                     isLoading[sec] = isLoadingFlag;
                     console.log(`[setLoadingState] Section: ${sec}, isLoading: ${isLoadingFlag}`);
                     if (sec === 'stats') { [ui.progressCard, ui.pointsCard, ui.streakCard].forEach(card => card?.classList.toggle('loading', isLoadingFlag)); }
                     else if (sec === 'activities' && ui.activityListContainer) { ui.activityListContainer.classList.toggle('loading', isLoadingFlag); if (isLoadingFlag) { if(ui.activityListEmptyState) ui.activityListEmptyState.style.display = 'none'; if(ui.activityListErrorState) ui.activityListErrorState.style.display = 'none'; if(ui.activityList) ui.activityList.innerHTML = ''; } }
                     else if (sec === 'notifications' && ui.notificationBell) { ui.notificationBell.style.opacity = isLoadingFlag ? 0.5 : 1; if(ui.markAllReadBtn) { const currentUnreadCount = parseInt(ui.notificationCount?.textContent?.replace('+', '') || '0'); ui.markAllReadBtn.disabled = isLoadingFlag || currentUnreadCount === 0; } }
                 });
            }
            // Mouse Follower Logic (из index v19)
            const initMouseFollower = () => {
                const follower = ui.mouseFollower;
                if (!follower || window.innerWidth <= 576) return; // Не показывать на мобильных
                let hasMoved = false;
                const updatePosition = (event) => {
                    if (!hasMoved) { document.body.classList.add('mouse-has-moved'); hasMoved = true; }
                    requestAnimationFrame(() => { follower.style.left = `${event.clientX}px`; follower.style.top = `${event.clientY}px`; });
                 };
                window.addEventListener('mousemove', updatePosition, { passive: true });
                document.body.addEventListener('mouseleave', () => { if (hasMoved) follower.style.opacity = '0'; });
                document.body.addEventListener('mouseenter', () => { if (hasMoved) follower.style.opacity = '1'; });
                window.addEventListener('touchstart', () => { follower.style.display = 'none'; }, { passive: true, once: true });
            };
            // Scroll Animations Logic (из index v19)
             const initScrollAnimations = () => {
                 const animatedElements = document.querySelectorAll('.main-content-wrapper [data-animate]'); // Только внутри контента
                 if (!animatedElements.length || !('IntersectionObserver' in window)) return;
                 const observer = new IntersectionObserver((entries, observerInstance) => {
                     entries.forEach(entry => {
                         if (entry.isIntersecting) {
                             entry.target.classList.add('animated');
                             observerInstance.unobserve(entry.target);
                         }
                     });
                 }, { threshold: 0.15, rootMargin: "0px 0px -50px 0px" }); // Немного раньше запускать
                 animatedElements.forEach(element => observer.observe(element));
             };
             // Detect scroll for header styling
            const initHeaderScrollDetection = () => {
                 let lastScrollY = window.scrollY;
                 window.addEventListener('scroll', () => {
                     const currentScrollY = window.scrollY;
                     if (currentScrollY > 50) { document.body.classList.add('scrolled'); }
                     else { document.body.classList.remove('scrolled'); }
                     lastScrollY = currentScrollY <= 0 ? 0 : currentScrollY;
                 }, { passive: true });
                 if (window.scrollY > 50) document.body.classList.add('scrolled'); // Initial check
             };
             // Update Copyright Year
             const updateCopyrightYear = () => {
                 const currentYearSpan = document.getElementById('currentYearFooter');
                 if (currentYearSpan) { currentYearSpan.textContent = new Date().getFullYear(); }
             };

            // --- END: Helper Functions ---

            // --- START: Data Loading and UI Update Functions ---
            async function initializeApp() { /* ... (Логика без изменений, но теперь с currentProfile) ... */
                 console.log("[INIT Dashboard] initializeApp: Start");
                 if (!initializeSupabase()) return;
                 setupUIEventListeners();
                 if (ui.initialLoader) { ui.initialLoader.classList.remove('hidden'); ui.initialLoader.style.display = 'flex'; }
                 if (ui.mainContent) ui.mainContent.style.display = 'none';
                 try {
                     console.log("[INIT Dashboard] Checking auth session...");
                     const { data: { session }, error: sessionError } = await supabase.auth.getSession();
                     if (sessionError) throw new Error(`Nepodařilo se ověřit sezení: ${sessionError.message}`);
                     if (session?.user) {
                         currentUser = session.user;
                         console.log(`[INIT Dashboard] Uživatel ověřen (ID: ${currentUser.id}). Načítání dat dashboardu...`);
                         currentProfile = await fetchUserProfile(currentUser.id); // Загрузка профиля
                         if (!currentProfile) { console.error("Nepodařilo se načíst profil uživatele."); showError("Nepodařilo se načíst základní data uživatele.", true); }
                         await loadDashboardData(currentUser, currentProfile); // Передача профиля
                         if (ui.initialLoader) { ui.initialLoader.classList.add('hidden'); setTimeout(() => { if (ui.initialLoader) ui.initialLoader.style.display = 'none'; }, 500); } // Немного дольше анимация
                         if (ui.mainContent) { ui.mainContent.style.display = 'block'; requestAnimationFrame(() => ui.mainContent.classList.add('loaded')); }
                         console.log("✅ [INIT Dashboard] Stránka plně načtena.");
                         // Запуск анимаций после загрузки контента
                         requestAnimationFrame(() => { initScrollAnimations(); });
                     } else { console.log('[INIT Dashboard] V sezení není uživatel, přesměrování.'); window.location.href = '/auth/index.html'; }
                 } catch (error) { console.error("❌ [INIT Dashboard] Kritická chyba inicializace:", error); if (ui.initialLoader && !ui.initialLoader.classList.contains('hidden')) { ui.initialLoader.innerHTML = `<p style="color: var(--accent-pink);">CHYBA (${error.message}). OBNOVTE STRÁNKU.</p>`; } else { showError(`Chyba inicializace: ${error.message}`, true); } if (ui.mainContent) ui.mainContent.style.display = 'none'; }
             }
            function initializeSupabase() { /* ... (без изменений) ... */ try { if (typeof window.supabase === 'undefined' || typeof window.supabase.createClient !== 'function') { throw new Error("Knihovna Supabase nebyla správně načtena."); } supabase = window.supabase.createClient(supabaseUrl, supabaseKey); if (!supabase) throw new Error("Vytvoření klienta Supabase selhalo."); console.log('[Supabase] Klient úspěšně inicializován.'); return true; } catch (error) { console.error('[Supabase] Inicializace selhala:', error); showError("Kritická chyba: Nepodařilo se připojit k databázi.", true); return false; } }
            async function fetchUserProfile(userId) { /* ... (без изменений) ... */ if (!supabase || !userId) return null; console.log(`[Profile] Načítání profilu pro uživatele ID: ${userId}`); try { const { data: profile, error } = await supabase.from('profiles').select('*').eq('id', userId).single(); if (error && error.code !== 'PGRST116') { throw error; } if (!profile) { console.warn(`[Profile] Profil nenalezen pro uživatele ${userId}.`); return null; } console.log("[Profile] Data profilu úspěšně načtena."); return profile; } catch (error) { console.error('[Profile] Výjimka při načítání profilu:', error); showToast('Chyba', 'Nepodařilo se načíst data profilu.', 'error'); return null; } }
            async function fetchUserStats(userId, profileData) { /* ... (без изменений) ... */ if (!supabase || !userId || !profileData) { console.error("[Stats] Chybí Supabase klient, ID uživatele nebo data profilu."); return null; } console.log(`[Stats] Načítání statistik pro uživatele ${userId}...`); let fetchedStats = null; let statsError = null; try { const { data, error } = await supabase.from('user_stats').select('progress, progress_weekly, points_weekly, streak_longest, completed_tests').eq('user_id', userId).maybeSingle(); fetchedStats = data; statsError = error; if (statsError) { console.warn("[Stats] Chyba Supabase při načítání user_stats:", statsError.message); } } catch (error) { console.error("[Stats] Neočekávaná chyba při načítání user_stats:", error); statsError = error; } const finalStats = { progress: fetchedStats?.progress ?? 0, progress_weekly: fetchedStats?.progress_weekly ?? 0, points: profileData.points ?? 0, points_weekly: fetchedStats?.points_weekly ?? 0, streak_current: profileData.streak_days ?? 0, streak_longest: Math.max(fetchedStats?.streak_longest ?? 0, profileData.streak_days ?? 0), completed_exercises: profileData.completed_exercises ?? 0, completed_tests: profileData.completed_tests ?? fetchedStats?.completed_tests ?? 0 }; if (statsError) { console.warn("[Stats] Vracení statistik primárně z profilu kvůli chybě načítání."); } else { console.log("[Stats] Statistiky úspěšně načteny/sestaveny:", finalStats); } return finalStats; }
            async function fetchRecentActivities(userId, limit = 5) { /* ... (без изменений) ... */ if (!supabase || !userId) { console.error("[Activities] Chybí Supabase nebo ID uživatele."); return []; } console.log(`[Activities] Načítání posledních ${limit} aktivit pro uživatele ${userId}`); try { const { data, error } = await supabase .from('activities') .select('*') .eq('user_id', userId) .order('created_at', { ascending: false }) .limit(limit); if (error) throw error; console.log(`[Activities] Načteno ${data?.length || 0} aktivit.`); return data || []; } catch (error) { console.error('[Activities] Výjimka při načítání aktivit:', error); showToast('Chyba', 'Nepodařilo se načíst nedávné aktivity.', 'error'); return []; } }
            async function fetchNotifications(userId, limit = 5) { /* ... (без изменений) ... */ if (!supabase || !userId) { console.error("[Notifications] Chybí Supabase nebo ID uživatele."); return { unreadCount: 0, notifications: [] }; } console.log(`[Notifications] Načítání nepřečtených oznámení pro uživatele ${userId}`); try { const { data, error, count } = await supabase .from('user_notifications') .select('*', { count: 'exact' }) .eq('user_id', userId) .eq('is_read', false) .order('created_at', { ascending: false }) .limit(limit); if (error) throw error; console.log(`[Notifications] Načteno ${data?.length || 0} oznámení. Celkem nepřečtených: ${count}`); return { unreadCount: count ?? 0, notifications: data || [] }; } catch (error) { console.error("[Notifications] Výjimka při načítání oznámení:", error); showToast('Chyba', 'Nepodařilo se načíst oznámení.', 'error'); return { unreadCount: 0, notifications: [] }; } }
             async function loadDashboardData(user, profile) { /* ... (Логика без изменений, но с передачей profile) ... */ if (!user || !profile) { showError("Chyba: Nelze načíst data bez profilu uživatele."); setLoadingState('all', false); return; } console.log("[MAIN] loadDashboardData: Start pro uživatele:", user.id); hideError(); setLoadingState('all', true); try { updateSidebarProfile(profile); console.log("[MAIN] loadDashboardData: Načítání statistik, aktivit, oznámení souběžně..."); const results = await Promise.allSettled([ fetchUserStats(user.id, profile), fetchRecentActivities(user.id, 5), fetchNotifications(user.id, 5) ]); console.log("[MAIN] loadDashboardData: Souběžné načítání dokončeno:", results); if (results[0].status === 'fulfilled') { updateStatsCards(results[0].value || null); } else { console.error("❌ Chyba při načítání statistik uživatele:", results[0].reason); showError("Nepodařilo se načíst statistiky."); updateStatsCards(null); } setLoadingState('stats', false); if (results[1].status === 'fulfilled') { renderActivities(results[1].value || []); } else { console.error("❌ Chyba při načítání nedávných aktivit:", results[1].reason); showError("Nepodařilo se načíst nedávné aktivity."); renderActivities(null); } setLoadingState('activities', false); if (results[2].status === 'fulfilled') { const { unreadCount, notifications } = results[2].value || { unreadCount: 0, notifications: [] }; renderNotifications(unreadCount, notifications); } else { console.error("❌ Chyba při načítání oznámení:", results[2].reason); showError("Nepodařilo se načíst oznámení."); renderNotifications(0, []); } setLoadingState('notifications', false); console.log("[MAIN] loadDashboardData: Všechna data zpracována."); } catch (error) { console.error('[MAIN] loadDashboardData: Zachycena hlavní chyba:', error); showError('Nepodařilo se kompletně načíst data nástěnky: ' + error.message); setLoadingState('all', false); updateStatsCards({}); renderActivities(null); renderNotifications(0, []); } }
            // --- END: Data Loading ---

            // --- START: UI Update Functions ---
            function updateSidebarProfile(profile) { /* ... (Стилизован под тему) ... */ console.log("[UI Update] Aktualizace sidebaru..."); if (!ui.sidebarName || !ui.sidebarAvatar) { console.warn("[UI Update] Elementy sidebaru nenalezeny."); return; } if (profile) { const firstName = profile.first_name ?? ''; const displayName = firstName || profile.username || currentUser?.email?.split('@')[0] || 'Pilot'; ui.sidebarName.textContent = displayName; const initials = getInitials(profile); const avatarUrl = profile.avatar_url; ui.sidebarAvatar.innerHTML = avatarUrl ? `<img src="${sanitizeHTML(avatarUrl)}" alt="${sanitizeHTML(initials)}">` : sanitizeHTML(initials); if (ui.welcomeTitle) { ui.welcomeTitle.textContent = `Vítej zpět, ${sanitizeHTML(displayName)}!`; } console.log("[UI Update] Sidebar aktualizován."); } else { console.warn("[UI Update] Chybí data profilu."); ui.sidebarName.textContent = "Pilot"; ui.sidebarAvatar.textContent = '?'; if (ui.welcomeTitle) { ui.welcomeTitle.textContent = `Vítejte!`; } } }
            function updateStatsCards(stats) { /* ... (Стилизован под тему, без футера) ... */ console.log("[UI Update] Aktualizace karet statistik:", stats); const statElements = { progress: ui.progressCard?.querySelector('.stat-card-value'), progressChange: ui.progressCard?.querySelector('.stat-card-change'), points: ui.pointsCard?.querySelector('.stat-card-value'), pointsChange: ui.pointsCard?.querySelector('.stat-card-change'), streak: ui.streakCard?.querySelector('.stat-card-value'), streakLongest: ui.streakCard?.querySelector('.stat-card-change') }; const cards = [ui.progressCard, ui.pointsCard, ui.streakCard]; const displayError = (cardElement) => { if (cardElement) { const content = cardElement.querySelector('.stat-card-content'); const skel = cardElement.querySelector('.loading-skeleton'); const errorState = cardElement.querySelector('.card-error-state'); if (!errorState) { const errorDiv = document.createElement('div'); errorDiv.className = 'card-error-state'; errorDiv.style.display = 'block'; errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle"></i><p>Chyba</p>`; cardElement.appendChild(errorDiv); } else { errorState.style.display = 'block'; } if(content) content.style.visibility = 'hidden'; if(skel) skel.style.display = 'none'; cardElement.classList.remove('loading'); } }; if (!stats) { console.warn("[UI Update] Chybí data statistik, zobrazení chybového stavu."); cards.forEach(displayError); return; } cards.forEach(card => { if (card) { const skel = card.querySelector('.loading-skeleton'); const cont = card.querySelector('.stat-card-content'); card.querySelector('.card-error-state')?.remove(); if(skel) skel.style.display = 'none'; if(cont) cont.style.visibility = 'visible'; card.classList.remove('loading'); } }); if (statElements.progress && statElements.progressChange) { statElements.progress.textContent = `${stats.progress ?? 0}%`; const weeklyChange = stats.progress_weekly ?? 0; statElements.progressChange.classList.remove('positive', 'negative'); statElements.progressChange.innerHTML = weeklyChange > 0 ? `<i class="fas fa-arrow-up"></i> +${weeklyChange}% týdně` : weeklyChange < 0 ? `<i class="fas fa-arrow-down"></i> ${weeklyChange}% týdně` : `<i class="fas fa-minus"></i> --`; if (weeklyChange > 0) statElements.progressChange.classList.add('positive'); else if (weeklyChange < 0) statElements.progressChange.classList.add('negative'); } if (statElements.points && statElements.pointsChange) { statElements.points.textContent = stats.points ?? 0; const weeklyPoints = stats.points_weekly ?? 0; statElements.pointsChange.classList.remove('positive', 'negative'); statElements.pointsChange.innerHTML = weeklyPoints > 0 ? `<i class="fas fa-arrow-up"></i> +${weeklyPoints} týdně` : weeklyPoints < 0 ? `<i class="fas fa-arrow-down"></i> ${weeklyPoints} týdně` : `<i class="fas fa-minus"></i> --`; if (weeklyPoints > 0) statElements.pointsChange.classList.add('positive'); else if (weeklyPoints < 0) statElements.pointsChange.classList.add('negative'); } if (statElements.streak && statElements.streakLongest) { statElements.streak.textContent = stats.streak_current ?? 0; statElements.streakLongest.textContent = `MAX: ${stats.streak_longest ?? 0} dní`; statElements.streakLongest.classList.remove('positive', 'negative'); } console.log("[UI Update] Karty statistik aktualizovány."); }
             function renderActivities(activities) { /* ... (Стилизован под тему) ... */ if (!ui.activityList || !ui.activityListContainer || !ui.activityListEmptyState || !ui.activityListErrorState) { console.error("[Render Activities] Chybí UI elementy."); setLoadingState('activities', false); return; } ui.activityList.innerHTML = ''; ui.activityListEmptyState.style.display = 'none'; ui.activityListErrorState.style.display = 'none'; if (activities === null) { ui.activityListErrorState.style.display = 'block'; console.log("[Render Activities] Zobrazení chybového stavu (null data)."); setLoadingState('activities', false); return; } if (activities.length === 0) { ui.activityListEmptyState.style.display = 'block'; console.log("[Render Activities] Zobrazení prázdného stavu."); setLoadingState('activities', false); return; } const fragment = document.createDocumentFragment(); activities.forEach(activity => { const visual = activityVisuals[activity.type?.toLowerCase()] || activityVisuals.default; const title = sanitizeHTML(activity.title || 'Neznámá aktivita'); const description = sanitizeHTML(activity.description || ''); const timeAgo = formatRelativeTime(activity.created_at); const item = document.createElement('div'); item.className = 'activity-item'; item.innerHTML = `<div class="activity-icon ${visual.class}"><i class="fas ${visual.icon}"></i></div><div class="activity-content"><div class="activity-title">${title}</div><div class="activity-desc">${description}</div><div class="activity-time"><i class="far fa-clock"></i> ${timeAgo}</div></div>`; fragment.appendChild(item); }); ui.activityList.appendChild(fragment); ui.activityListContainer.classList.remove('loading'); console.log(`[Render Activities] Vykresleno ${activities.length} položek.`); setLoadingState('activities', false); }
            function renderNotifications(count, notifications) { /* ... (Стилизован под тему) ... */ console.log("[Render Notifications] Start, Počet:", count, "Oznámení:", notifications); if (!ui.notificationCount || !ui.notificationsList || !ui.noNotificationsMsg || !ui.markAllReadBtn) { console.error("[Render Notifications] Chybí UI elementy."); return; } ui.notificationCount.textContent = count > 9 ? '9+' : (count > 0 ? count : ''); // Показываем пустоту если 0
             ui.notificationCount.classList.toggle('visible', count > 0); if (notifications && notifications.length > 0) { ui.notificationsList.innerHTML = notifications.map(n => { const iconMap = { info: 'fa-info-circle', success: 'fa-check-circle', warning: 'fa-exclamation-triangle', danger: 'fa-exclamation-circle', badge: 'fa-medal', level_up: 'fa-angle-double-up' }; const iconClass = iconMap[n.type] || 'fa-info-circle'; const typeClass = n.type || 'info'; const isReadClass = n.is_read ? 'is-read' : ''; const linkAttr = n.link ? `data-link="${sanitizeHTML(n.link)}"` : ''; return `<div class="notification-item ${isReadClass}" data-id="${n.id}" ${linkAttr}> ${!n.is_read ? '<span class="unread-dot"></span>' : ''} <div class="notification-icon ${typeClass}"><i class="fas ${iconClass}"></i></div> <div class="notification-content"> <div class="notification-title">${sanitizeHTML(n.title)}</div> <div class="notification-message">${sanitizeHTML(n.message)}</div> <div class="notification-time">${formatRelativeTime(n.created_at)}</div> </div> </div>`; }).join(''); ui.noNotificationsMsg.style.display = 'none'; ui.notificationsList.style.display = 'block'; ui.markAllReadBtn.disabled = count === 0; } else { ui.notificationsList.innerHTML = ''; ui.noNotificationsMsg.style.display = 'block'; ui.notificationsList.style.display = 'none'; ui.markAllReadBtn.disabled = true; } console.log("[Render Notifications] Hotovo"); }
            // --- END: UI Update ---

            // --- START: Notification Logic ---
            async function markNotificationRead(notificationId) { /* ... (без изменений) ... */ console.log("[FUNC] markNotificationRead: Označení ID:", notificationId); if (!currentUser || !notificationId) return false; try { const { error } = await supabase.from('user_notifications').update({ is_read: true }).eq('user_id', currentUser.id).eq('id', notificationId); if (error) throw error; console.log("[FUNC] markNotificationRead: Úspěch pro ID:", notificationId); return true; } catch (error) { console.error("[FUNC] markNotificationRead: Chyba:", error); showToast('Chyba', 'Nepodařilo se označit oznámení jako přečtené.', 'error'); return false; } }
            async function markAllNotificationsRead() { /* ... (без изменений) ... */ console.log("[FUNC] markAllNotificationsRead: Start pro uživatele:", currentUser?.id); if (!currentUser || !ui.markAllReadBtn) return; ui.markAllReadBtn.disabled = true; ui.markAllReadBtn.textContent = 'MAŽU...'; try { const { error } = await supabase.from('user_notifications').update({ is_read: true }).eq('user_id', currentUser.id).eq('is_read', false); if (error) throw error; console.log("[FUNC] markAllNotificationsRead: Úspěch"); const { unreadCount, notifications } = await fetchNotifications(currentUser.id, 5); renderNotifications(unreadCount, notifications); showToast('SIGNÁLY VYMAZÁNY', 'Všechna oznámení byla označena jako přečtená.', 'success'); } catch (error) { console.error("[FUNC] markAllNotificationsRead: Chyba:", error); showToast('CHYBA PŘENOSU', 'Nepodařilo se označit všechna oznámení.', 'error'); } finally { if (ui.markAllReadBtn) { ui.markAllReadBtn.disabled = (parseInt(ui.notificationCount.textContent || '0') === 0); ui.markAllReadBtn.textContent = 'Vymazat vše'; } } }
            // --- END: Notification Logic ---

            // --- START: Event Listeners ---
            function setupUIEventListeners() { /* ... (добавлены слушатели для анимаций) ... */
                 console.log("[SETUP] setupUIEventListeners: Start");
                 if (ui.startPracticeBtn) ui.startPracticeBtn.addEventListener('click', () => { window.location.href = '/dashboard/procvicovani/main.html'; });
                 if (ui.mainMobileMenuToggle) ui.mainMobileMenuToggle.addEventListener('click', openMenu);
                 if (ui.sidebarCloseToggle) ui.sidebarCloseToggle.addEventListener('click', closeMenu);
                 if (ui.sidebarOverlay) ui.sidebarOverlay.addEventListener('click', closeMenu);
                 document.querySelectorAll('.sidebar-link').forEach(link => { link.addEventListener('click', () => { if (window.innerWidth <= 992) closeMenu(); }); });
                 window.addEventListener('online', updateOnlineStatus); window.addEventListener('offline', updateOnlineStatus);
                 updateOnlineStatus(); // Initial check

                 // Refresh button
                 if (ui.refreshDataBtn) { ui.refreshDataBtn.addEventListener('click', async () => { if (!currentUser || !currentProfile) { showToast("Chyba", "Pro obnovení je nutné se přihlásit.", "error"); return; } if (isLoading.stats || isLoading.activities || isLoading.notifications) { showToast("PROBÍHÁ SYNCHRONIZACE", "Data se již načítají.", "info"); return; } const icon = ui.refreshDataBtn.querySelector('i'); const text = ui.refreshDataBtn.querySelector('.refresh-text'); if (icon) icon.classList.add('fa-spin'); if (text) text.textContent = 'RELOADING...'; ui.refreshDataBtn.disabled = true; await loadDashboardData(currentUser, currentProfile); if (icon) icon.classList.remove('fa-spin'); if (text) text.textContent = 'RELOAD'; ui.refreshDataBtn.disabled = false; }); }

                 // Notifications Listeners
                 if(ui.notificationBell) { ui.notificationBell.addEventListener('click', (event) => { event.stopPropagation(); ui.notificationsDropdown?.classList.toggle('active'); }); }
                 if(ui.markAllReadBtn) { ui.markAllReadBtn.addEventListener('click', markAllNotificationsRead); }
                 if(ui.notificationsList) { ui.notificationsList.addEventListener('click', async (event) => { const item = event.target.closest('.notification-item'); if (item) { const notificationId = item.dataset.id; const link = item.dataset.link; const isRead = item.classList.contains('is-read'); if (!isRead && notificationId) { const success = await markNotificationRead(notificationId); if (success) { item.classList.add('is-read'); item.querySelector('.unread-dot')?.remove(); const currentCountText = ui.notificationCount.textContent.replace('+', ''); const currentCount = parseInt(currentCountText) || 0; const newCount = Math.max(0, currentCount - 1); ui.notificationCount.textContent = newCount > 9 ? '9+' : (newCount > 0 ? newCount : ''); ui.notificationCount.classList.toggle('visible', newCount > 0); ui.markAllReadBtn.disabled = newCount === 0; } } if (link) window.location.href = link; /* else ui.notificationsDropdown?.classList.remove('active'); */ } }); } // Не закрывать при клике на айтем
                 document.addEventListener('click', (event) => { if (ui.notificationsDropdown?.classList.contains('active') && !ui.notificationsDropdown.contains(event.target) && !ui.notificationBell.contains(event.target)) { ui.notificationsDropdown.classList.remove('active'); } });

                 // Инициализация эффектов после загрузки DOM
                 initMouseFollower();
                 initHeaderScrollDetection();
                 updateCopyrightYear();

                 console.log("[SETUP] setupUIEventListeners: Posluchači nastaveni.");
             }
            // --- END: Event Listeners ---

            // --- START THE APP ---
            initializeApp();

        })(); // End of IIFE
    </script>
</body>
</html>