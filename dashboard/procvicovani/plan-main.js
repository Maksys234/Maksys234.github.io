// –§–∞–π–ª: procvicovani/plan-main.js
// –û–ø–∏—Å–∞–Ω–∏–µ: –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –æ—Ä–∫–µ—Å—Ç—Ä–æ–≤–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Studijn√≠ho pl√°nu.
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–æ–¥—É–ª–µ–π.
// –ó–∞–≤–∏—Å–∏—Ç –æ—Ç plan-core.js –∏ plan-ui.js (–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–≤—ã–º–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ window.PlanApp).
// –í–µ—Ä—Å–∏—è: 1.0 (—Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ plan.js)

(function() { // IIFE –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
	'use strict';

	// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ PlanApp ---
	if (typeof window.PlanApp === 'undefined') {
		console.error("FATAL: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å plan-main.js. –û–±—ä–µ–∫—Ç PlanApp –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ plan-core.js –∏ plan-ui.js –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–≤—ã–º–∏.");
		// –ú–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
		document.body.innerHTML = '<div style="color:red; padding: 20px;">Kritick√° chyba: Z√°kladn√≠ moduly aplikace nebyly naƒçteny. Obnovte str√°nku nebo kontaktujte podporu.</div>';
		return;
	}

	// –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
	const PlanApp = window.PlanApp;

	// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase ---
	// (–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ plan-core.js, –≤—ã–∑—ã–≤–∞–µ–º –æ—Ç—Ç—É–¥–∞)

	// --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π UI (–û—Ä–∫–µ—Å—Ç—Ä–æ–≤–∫–∞) ---
	PlanApp.setupMainEventListeners = () => {
		const ui = PlanApp.ui; // –ü–æ–ª—É—á–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ PlanApp
		console.log("[Main] Setting up main event listeners...");

		if (!ui) {
			console.error("[Main] UI cache not found in PlanApp. Cannot setup listeners.");
			return;
		}

		// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
		ui.planTabs?.forEach(tab => {
			tab.addEventListener('click', () => {
				if (typeof PlanApp.switchTab === 'function') {
					PlanApp.switchTab(tab.dataset.tab);
				} else {
					console.error("PlanApp.switchTab function not found!");
				}
			});
		});

		// –û–±—â–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ (—Å–∞–π–±–¥–∞—Ä, —Ç–µ–º–∞ –∏ —Ç.–¥. - –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ plan-ui.js)
		if (ui.mainMobileMenuToggle && typeof PlanApp.openMenu === 'function') {
            ui.mainMobileMenuToggle.addEventListener('click', PlanApp.openMenu);
        }
		if (ui.sidebarCloseToggle && typeof PlanApp.closeMenu === 'function') {
            ui.sidebarCloseToggle.addEventListener('click', PlanApp.closeMenu);
        }
		if (ui.sidebarOverlay && typeof PlanApp.closeMenu === 'function') {
            ui.sidebarOverlay.addEventListener('click', PlanApp.closeMenu);
        }
		window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
			if (typeof PlanApp.updateTheme === 'function') {
                PlanApp.state.isDarkMode = event.matches; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                PlanApp.updateTheme();
            }
		});
        window.addEventListener('online', () => typeof PlanApp.updateOnlineStatus === 'function' && PlanApp.updateOnlineStatus());
        window.addEventListener('offline', () => typeof PlanApp.updateOnlineStatus === 'function' && PlanApp.updateOnlineStatus());
        window.addEventListener('resize', () => { if (window.innerWidth > 992 && ui.sidebar?.classList.contains('active')) { if(typeof PlanApp.closeMenu === 'function') PlanApp.closeMenu();} });

        // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Ç.–¥.)
        // –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ plan-ui.js –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ
        // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ
        console.log("‚úÖ [Main] Main event listeners setup complete.");
	};

	// --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ ---
	PlanApp.switchTab = async (tabId) => {
		const state = PlanApp.state; // –î–æ—Å—Ç—É–ø –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
		const ui = PlanApp.ui; // –î–æ—Å—Ç—É–ø –∫ UI
		const core = PlanApp; // –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏–∑ plan-core

		if (!state || !ui) {
			console.error("[SwitchTab] State or UI object not found in PlanApp.");
			return;
		}
		if (state.isLoading.current || state.isLoading.history || state.isLoading.create || state.isLoading.detail || state.isLoading.generation || state.isLoading.saving) {
			console.warn(`[SwitchTab] Blocked switching to ${tabId}, operation in progress.`);
			PlanApp.showToast('Operace st√°le prob√≠h√°, poƒçkejte pros√≠m.', 'info');
			return;
		}

		console.log(`[SwitchTab] Switching to tab: ${tabId}`);
		state.currentTab = tabId;
		ui.planTabs?.forEach(tab => tab.classList.toggle('active', tab.dataset.tab === tabId));

		// –°–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
		ui.currentPlanSection?.classList.remove('visible-section');
		ui.historyPlanSection?.classList.remove('visible-section');
		ui.createPlanSection?.classList.remove('visible-section');
		ui.planSection?.classList.remove('visible-section'); // –°–µ–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª–µ–π/–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

		// –°–∫—Ä—ã—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–π (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
		ui.currentPlanContent?.classList.remove('content-visible');
		ui.verticalScheduleList?.classList.remove('schedule-visible');
		ui.verticalScheduleNav?.classList.remove('nav-visible');
		ui.planContent?.classList.remove('content-visible', 'generated-reveal');
		ui.historyPlanContent?.classList.remove('content-visible');
		ui.createPlanContent?.classList.remove('content-visible');

		// –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–∫–∏–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
		if (state.lastGeneratedMarkdown !== null && tabId !== 'detail' && tabId !== 'generation' && !ui.planSection?.classList.contains('visible-section')) {
			console.log("[SwitchTab] Clearing generated plan state.");
			state.lastGeneratedMarkdown = null;
			state.lastGeneratedActivitiesJson = null;
			state.lastGeneratedTopicsData = null;
		}

		if (typeof PlanApp.hideGlobalError === 'function') PlanApp.hideGlobalError();

		try {
			let targetSectionElement = null;
			switch(tabId) {
				case 'current': targetSectionElement = ui.currentPlanSection; break;
				case 'history': targetSectionElement = ui.historyPlanSection; break;
				case 'create': targetSectionElement = ui.createPlanSection; break;
				default: console.warn(`[SwitchTab] Unknown tab ID: ${tabId}`); return;
			}

			if (targetSectionElement) {
				targetSectionElement.classList.add('visible-section');

				// –í—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ plan-core.js
				if (tabId === 'current' && typeof core.loadCurrentPlan === 'function') await core.loadCurrentPlan();
				else if (tabId === 'history' && typeof core.loadPlanHistory === 'function') await core.loadPlanHistory();
				else if (tabId === 'create' && typeof core.checkPlanCreationAvailability === 'function') await core.checkPlanCreationAvailability();
				else if (tabId !== 'current' && tabId !== 'history' && tabId !== 'create') {
					console.warn(`[SwitchTab] No specific load function defined for tab: ${tabId}`);
				}

			} else {
				console.warn(`[SwitchTab] Target section element not found for tab: ${tabId}`);
			}
		} catch (error) {
			console.error(`[SwitchTab] Error loading tab ${tabId}:`, error);
			const errorTargetSection = document.getElementById(`${tabId}PlanSection`);
			const errorContentContainer = errorTargetSection?.querySelector('.section-content');
			if(errorTargetSection) errorTargetSection.classList.add('visible-section'); // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π
			if (errorContentContainer && typeof PlanApp.renderMessage === 'function') {
				PlanApp.renderMessage(errorContentContainer, 'error', 'Chyba naƒç√≠t√°n√≠', `Obsah z√°lo≈æky "${tabId}" nelze naƒç√≠st: ${error.message}`);
			} else if(typeof PlanApp.showGlobalError === 'function') {
				PlanApp.showGlobalError(`Nepoda≈ôilo se naƒç√≠st z√°lo≈æku "${tabId}": ${error.message}`);
			}
			// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
			if(typeof PlanApp.setLoadingState === 'function') {
                if(tabId === 'current') { PlanApp.setLoadingState('current', false); PlanApp.setLoadingState('schedule', false); }
                if(tabId === 'history') PlanApp.setLoadingState('history', false);
                if(tabId === 'create') PlanApp.setLoadingState('create', false);
            }
		}
	};


	// --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
	PlanApp.initializeApp = async () => {
		const ui = PlanApp.ui; // –ü–æ–ª—É—á–∞–µ–º –∫—ç—à UI
		const state = PlanApp.state; // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
		const core = PlanApp; // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —è–¥—Ä–∞

		console.log("üöÄ [Init Main] Starting Plan Page Initialization...");

        // 1. –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
        if (ui.initialLoader) {
            ui.initialLoader.style.display = 'flex';
            ui.initialLoader.classList.remove('hidden');
        }
        if (ui.mainContent) ui.mainContent.style.display = 'none'; // –°–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–∫–∞ –≥—Ä—É–∑–∏–º

		// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase (—á–µ—Ä–µ–∑ core)
		if (typeof core.initializeSupabase !== 'function' || !core.initializeSupabase()) {
			console.error("FATAL: Supabase initialization failed. Cannot proceed.");
			// –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
			if (ui.initialLoader) ui.initialLoader.innerHTML = '<p style="color:red;">Chyba p≈ôipojen√≠ k datab√°zi.</p>';
			return; // Stop initialization
		}

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (—á–µ—Ä–µ–∑ core)
        try {
            console.log("[Init Main] Checking authentication session...");
            const { data: { session }, error: sessionError } = await state.supabase.auth.getSession();
            if (sessionError) throw new Error(`Nepoda≈ôilo se ovƒõ≈ôit sezen√≠: ${sessionError.message}`);

            if (!session || !session.user) {
                console.log('[Init Main] Not logged in. Redirecting...');
                window.location.href = '/auth/index.html'; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
                return; // Stop further execution
            }
            state.currentUser = session.user;
            console.log(`[Init Main] User authenticated (ID: ${state.currentUser.id}). Loading profile...`);

            if (typeof core.fetchUserProfile !== 'function') { throw new Error("fetchUserProfile function is missing in PlanApp core."); }
            state.currentProfile = await core.fetchUserProfile(state.currentUser.id);
            if (!state.currentProfile) { throw new Error("Profil u≈æivatele nenalezen nebo se nepoda≈ôilo naƒç√≠st."); }
            console.log("[Init Main] Profile loaded:", state.currentProfile);

            // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI (—á–µ—Ä–µ–∑ ui)
            if (typeof PlanApp.initializeUI !== 'function') { throw new Error("initializeUI function is missing in PlanApp ui."); }
            if (!PlanApp.initializeUI()) { throw new Error("UI Initialization failed."); } // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –∏ –±–∞–∑–æ–≤—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏

            // 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            PlanApp.setupMainEventListeners();

            // 6. –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
            console.log("[Init Main] Loading initial notifications and default tab...");
            const loadNotificationsPromise = (typeof PlanApp.fetchNotifications === 'function' && typeof PlanApp.renderNotifications === 'function')
                ? PlanApp.fetchNotifications(state.currentUser.id, config.NOTIFICATION_FETCH_LIMIT)
                    .then(({ unreadCount, notifications }) => PlanApp.renderNotifications(unreadCount, notifications))
                    .catch(err => { console.error("Initial notification load failed:", err); if(PlanApp.renderNotifications) PlanApp.renderNotifications(0, []); })
                : Promise.resolve(console.warn("Notification functions not found in PlanApp."));

            const loadInitialTabPromise = PlanApp.switchTab('current'); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∫–ª–∞–¥–∫—É 'current' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            await Promise.all([loadNotificationsPromise, loadInitialTabPromise]);

            // 7. –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫
            if (ui.mainContent) {
                ui.mainContent.style.display = 'flex'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º flex –¥–ª—è layout
                requestAnimationFrame(() => {
                     ui.mainContent.classList.add('loaded');
                     if (typeof PlanApp.initScrollAnimations === 'function') PlanApp.initScrollAnimations();
                });
            }
            console.log("‚úÖ [Init Main] Plan Page Initialized Successfully.");

        } catch (error) {
            console.error("‚ùå [Init Main] Critical initialization error:", error);
            // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (ui.initialLoader && !ui.initialLoader.classList.contains('hidden')) {
                ui.initialLoader.innerHTML = `<p style="color:red;">Chyba inicializace (${error.message}). Obnovte str√°nku.</p>`;
            } else if(typeof PlanApp.showGlobalError === 'function') {
                 PlanApp.showGlobalError(`Chyba inicializace: ${error.message}`);
                 if (ui.mainContent) ui.mainContent.style.display = 'flex'; // –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, —á—Ç–æ–±—ã –±—ã–ª–∞ –≤–∏–¥–Ω–∞ –æ—à–∏–±–∫–∞
            } else {
                 document.body.innerHTML = `<div style="color:red; padding: 20px;">Kritick√° chyba: ${error.message}</div>`;
            }
            // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ
            if(typeof PlanApp.setLoadingState === 'function') PlanApp.setLoadingState('all', false);
        } finally {
             // –í—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
            if (ui.initialLoader) {
                ui.initialLoader.classList.add('hidden');
                setTimeout(() => { if (ui.initialLoader) ui.initialLoader.style.display = 'none'; }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            }
        }
	};

	// --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', PlanApp.initializeApp);
	} else {
		PlanApp.initializeApp();
	}

})(); // –ö–æ–Ω–µ—Ü IIFE