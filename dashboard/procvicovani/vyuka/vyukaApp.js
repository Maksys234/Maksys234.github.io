// vyukaApp.js - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Vyuka, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π

// --- –ò–º–ø–æ—Ä—Ç –ú–æ–¥—É–ª–µ–π ---
import { MAX_GEMINI_HISTORY_TURNS, NOTIFICATION_FETCH_LIMIT, POINTS_TOPIC_COMPLETE } from './config.js';
import { state } from './state.js';
import { ui } from './ui.js';
import {
    sanitizeHTML, getInitials, formatTimestamp, formatRelativeTime, autoResizeTextarea,
    generateSessionId, initTooltips, // <-- initTooltips je nyn√≠ importov√°n zde
    updateOnlineStatus, updateCopyrightYear,
    initMouseFollower, initScrollAnimations, initHeaderScrollDetection
} from './utils.js';
import { showToast, showError, hideError, setLoadingState, updateTheme } from './uiHelpers.js';
import {
    initializeSupabase, fetchUserProfile, fetchNotifications, markNotificationRead,
    markAllNotificationsRead, loadNextUncompletedTopic, markTopicComplete,
    saveChatMessage, deleteChatSessionHistory, awardPoints
} from './supabaseService.js';
import { sendToGemini, parseGeminiResponse } from './geminiService.js';
import { loadVoices, speakText, stopSpeech, handleMicClick, initializeSpeechRecognition, removeBoardHighlight } from './speechService.js';
import { renderMarkdown, clearWhiteboard, appendToWhiteboard } from './whiteboardController.js';
import { addChatMessage, addThinkingIndicator, removeThinkingIndicator, confirmClearChat, saveChatToPDF } from './chatController.js';

// --- –û—Å–Ω–æ–≤–Ω–∞—è –õ–æ–≥–∏–∫–∞ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
async function initializeApp() {
    console.log("üöÄ [Init Vyuka - Kyber] Starting App Initialization...");
    if (ui.initialLoader) {
        ui.initialLoader.style.display = 'flex';
        ui.initialLoader.classList.remove('hidden');
    }
    if (ui.mainContent) ui.mainContent.style.display = 'none';
    hideGlobalError();

    const supabaseInitialized = initializeSupabase();
    if (!supabaseInitialized) {
        showError("Kritick√° chyba: Nepoda≈ôilo se p≈ôipojit k datab√°zi.", true);
        if (ui.initialLoader) ui.initialLoader.innerHTML = `<p style="color: var(--accent-pink);">Chyba p≈ôipojen√≠.</p>`;
        return;
    }
    state.supabase = supabaseInitialized;

    try {
        console.log("[INIT] Checking auth session...");
        const { data: { session }, error: sessionError } = await state.supabase.auth.getSession();
        if (sessionError) throw new Error(`Nepoda≈ôilo se ovƒõ≈ôit sezen√≠: ${sessionError.message}`);
        if (!session || !session.user) {
            console.log('[Init Vyuka - Kyber] Not logged in. Redirecting...');
            window.location.href = '/auth/index.html';
            return;
        }
        state.currentUser = session.user;
        console.log(`[INIT] User authenticated (ID: ${state.currentUser.id}).`);

        setLoadingState('user', true);
        state.currentProfile = await fetchUserProfile(state.currentUser.id);
        if (!state.currentProfile) {
            console.warn(`Profile not found for user ${state.currentUser.id}. Handling potential first login or error.`);
            showError("Profil nenalezen nebo se nepoda≈ôilo naƒç√≠st. Zkuste obnovit str√°nku.", true);
            manageUIState('error', { errorMessage: 'Profil nenalezen.' });
            if (ui.initialLoader) { ui.initialLoader.classList.add('hidden'); setTimeout(() => { if (ui.initialLoader) ui.initialLoader.style.display = 'none'; }, 500); }
            if (ui.mainContent) ui.mainContent.style.display = 'flex';
            setLoadingState('user', false);
            return;
        }
        updateUserInfoUI();
        setLoadingState('user', false);

        initializeUI(); // UI se inicializuje zde, vƒçetnƒõ prvn√≠ho vol√°n√≠ initTooltips

        console.log("[INIT] Loading initial topic and notifications...");
        const loadNotificationsPromise = fetchNotifications(state.currentUser.id, NOTIFICATION_FETCH_LIMIT)
            .then(({ unreadCount, notifications }) => renderNotifications(unreadCount, notifications))
            .catch(err => { console.error("Chyba p≈ôi √∫vodn√≠m naƒç√≠t√°n√≠ notifikac√≠:", err); renderNotifications(0, []); });

        const loadTopicPromise = loadNextTopicFlow();

        await Promise.all([loadNotificationsPromise, loadTopicPromise]);

        if (ui.initialLoader) {
             ui.initialLoader.classList.add('hidden');
             setTimeout(() => { if (ui.initialLoader) ui.initialLoader.style.display = 'none'; }, 500);
        }
        if (ui.mainContent) {
            ui.mainContent.style.display = 'flex';
            requestAnimationFrame(() => { ui.mainContent.classList.add('loaded'); });
        }
        requestAnimationFrame(initScrollAnimations);

        console.log("‚úÖ [Init Vyuka - Kyber] Page Initialized.");

    } catch (error) {
        console.error("‚ùå [Init Vyuka - Kyber] Critical initialization error:", error);
        if (ui.initialLoader && !ui.initialLoader.classList.contains('hidden')) {
            ui.initialLoader.innerHTML = `<p style="color: var(--accent-pink);">CHYBA (${error.message}). Obnovte.</p>`;
        } else {
            showError(`Chyba inicializace: ${error.message}`, true);
        }
        if (ui.mainContent) ui.mainContent.style.display = 'flex';
        setLoadingState('all', false);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ UI.
 */
function initializeUI() {
    try {
        updateTheme();
        setupEventListeners();
        initTooltips(); // <-- PRVN√ç VOL√ÅN√ç ZDE

        if (ui.chatTabButton) ui.chatTabButton.classList.add('active');
        if (ui.chatTabContent) ui.chatTabContent.classList.add('active');

        initializeSpeechRecognition();

        initMouseFollower();
        initHeaderScrollDetection();
        updateCopyrightYear();
        updateOnlineStatus();

        manageUIState('initial');
        console.log("UI Initialized successfully.");
    } catch (error) {
        console.error("UI Init failed:", error);
        showError(`Chyba inicializace UI: ${error.message}`, true);
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π.
 */
function setupEventListeners() {
    console.log("[SETUP] Setting up event listeners...");

    // Sidebar/Menu
    const mainMobileToggle = document.getElementById('main-mobile-menu-toggle'); // Z√≠sk√°n√≠ reference zde
    mainMobileToggle?.addEventListener('click', openMenu); // Pou≈æit√≠ z√≠skan√© reference
    ui.sidebarCloseToggle?.addEventListener('click', closeMenu);
    ui.sidebarOverlay?.addEventListener('click', closeMenu);

    // Chat
    ui.chatInput?.addEventListener('input', () => autoResizeTextarea(ui.chatInput)); // P≈ôid√°n argument ui.chatInput
    ui.sendButton?.addEventListener('click', handleSendMessage);
    ui.chatInput?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    });
    ui.clearChatBtn?.addEventListener('click', () => confirmClearChat()); // Vol√°me funkci p≈ô√≠mo
    ui.saveChatBtn?.addEventListener('click', saveChatToPDF);
    ui.micBtn?.addEventListener('click', handleMicClick);

    // Whiteboard / TTS
    ui.clearBoardBtn?.addEventListener('click', () => {
         clearWhiteboard(false); // Clear without internal toast
         showToast('Vymaz√°no', "Tabule vymaz√°na.", "info"); // Show toast here
    });
    ui.stopSpeechBtn?.addEventListener('click', stopSpeech);

    // Topic Control
    ui.continueBtn?.addEventListener('click', requestContinue);
    ui.markCompleteBtn?.addEventListener('click', handleMarkTopicCompleteFlow);

    // Chat Messages Area (Event Delegation pro TTS tlaƒç√≠tka)
    ui.chatMessages?.addEventListener('click', (event) => {
        const button = event.target.closest('.tts-listen-btn');
        if (button && button.dataset.textToSpeak) {
            speakText(button.dataset.textToSpeak);
        }
    });
    // Whiteboard Area (Event Delegation pro TTS tlaƒç√≠tka se nyn√≠ ≈ôe≈°√≠ v appendToWhiteboard)

    // Theme Change
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
        state.isDarkMode = event.matches;
        console.log("Theme changed, isDarkMode:", state.isDarkMode);
        updateTheme();
    });

    // Window Resize
    window.addEventListener('resize', () => {
        if (window.innerWidth > 992 && ui.sidebar?.classList.contains('active')) {
            closeMenu();
        }
    });

    // Online/Offline Status
    window.addEventListener('online', updateOnlineStatus);
    window.addEventListener('offline', updateOnlineStatus);

    // Notifications Dropdown
    ui.notificationBell?.addEventListener('click', (event) => {
        event.stopPropagation();
        ui.notificationsDropdown?.classList.toggle('active');
    });
    ui.markAllReadBtn?.addEventListener('click', async () => {
        setLoadingState('notifications', true);
        const success = await markAllNotificationsRead(state.currentUser.id);
        if(success) {
            const { unreadCount, notifications } = await fetchNotifications(state.currentUser.id, NOTIFICATION_FETCH_LIMIT);
            renderNotifications(unreadCount, notifications);
            showToast('SIGN√ÅLY VYMAZ√ÅNY', 'V≈°echna ozn√°men√≠ byla oznaƒçena jako p≈ôeƒçten√°.', 'success');
        } else {
             showToast('CHYBA P≈òENOSU', 'Nepoda≈ôilo se oznaƒçit v≈°echna ozn√°men√≠.', 'error');
        }
        setLoadingState('notifications', false);
    });
    ui.notificationsList?.addEventListener('click', async (event) => {
        const item = event.target.closest('.notification-item');
        if (item) {
            const notificationId = item.dataset.id;
            const link = item.dataset.link;
            const isRead = item.classList.contains('is-read');
            if (!isRead && notificationId && state.currentUser) { // P≈ôid√°na kontrola currentUser
                const success = await markNotificationRead(notificationId, state.currentUser.id); // P≈ôed√°no ID u≈æivatele
                if (success) {
                    item.classList.add('is-read');
                    item.querySelector('.unread-dot')?.remove();
                    const currentCountText = ui.notificationCount.textContent.replace('+', '');
                    const currentCount = parseInt(currentCountText) || 0;
                    const newCount = Math.max(0, currentCount - 1);
                    ui.notificationCount.textContent = newCount > 9 ? '9+' : (newCount > 0 ? String(newCount) : '');
                    ui.notificationCount.classList.toggle('visible', newCount > 0);
                    if (ui.markAllReadBtn) ui.markAllReadBtn.disabled = newCount === 0;
                } else {
                     showToast('Chyba', 'Nepoda≈ôilo se oznaƒçit ozn√°men√≠.', 'error');
                }
            }
            if(link) {
                 ui.notificationsDropdown?.classList.remove('active');
                 window.location.href = link;
             } else {
                  // Pokud nen√≠ link, mo≈æn√° dropdown nechceme zav√≠rat automaticky
                  // ui.notificationsDropdown?.classList.remove('active');
             }
        }
    });
    // Close dropdown on outside click
    document.addEventListener('click', (event) => {
        if (ui.notificationsDropdown?.classList.contains('active') &&
            !ui.notificationsDropdown.contains(event.target) &&
            !ui.notificationBell?.contains(event.target)) {
            ui.notificationsDropdown.classList.remove('active');
        }
    });

    console.log("Event listeners setup complete.");
}


// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ---

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ UI (—Å–∞–π–¥–±–∞—Ä).
 */
function updateUserInfoUI() {
    if (!ui.sidebarName || !ui.sidebarAvatar) return;
    if (state.currentUser && state.currentProfile) {
        const displayName = `${state.currentProfile.first_name || ''} ${state.currentProfile.last_name || ''}`.trim() || state.currentProfile.username || state.currentUser.email?.split('@')[0] || 'Pilot';
        ui.sidebarName.textContent = sanitizeHTML(displayName);
        const initials = getInitials(state.currentProfile, state.currentUser.email);
        const avatarUrl = state.currentProfile.avatar_url;
        // Correct path check for local assets
        const isLocalAsset = avatarUrl && avatarUrl.startsWith('assets/');
        const finalUrl = isLocalAsset ? avatarUrl : (avatarUrl ? `${avatarUrl}?t=${Date.now()}` : null); // Add cache busting only for external URLs

        ui.sidebarAvatar.innerHTML = finalUrl ? `<img src="${sanitizeHTML(finalUrl)}" alt="${sanitizeHTML(initials)}">` : sanitizeHTML(initials);

        // Add error handler for the image in the sidebar
        const sidebarImg = ui.sidebarAvatar.querySelector('img');
        if (sidebarImg) {
            sidebarImg.onerror = function() {
                console.warn(`Failed to load sidebar avatar: ${this.src}. Falling back to initials.`);
                ui.sidebarAvatar.innerHTML = sanitizeHTML(initials);
            };
        }
    } else {
        ui.sidebarName.textContent = 'Nep≈ôihl√°≈°en';
        ui.sidebarAvatar.textContent = '?';
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ.
 * @param {number} count - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 * @param {Array} notifications - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 */
 function renderNotifications(count, notifications) {
     console.log("[Render Notifications] Count:", count, "Notifications:", notifications);
     if (!ui.notificationCount || !ui.notificationsList || !ui.noNotificationsMsg || !ui.markAllReadBtn) {
         console.error("[Render Notifications] Missing UI elements.");
         return;
     }
      // Definice vizu√°l≈Ø pro notifikace (p≈ôesunuto sem pro p≈ôehlednost)
      const activityVisuals = {
         test: { icon: 'fa-vial', class: 'test' },
         exercise: { icon: 'fa-pencil-alt', class: 'exercise' },
         badge: { icon: 'fa-medal', class: 'badge' },
         diagnostic: { icon: 'fa-clipboard-check', class: 'diagnostic' },
         lesson: { icon: 'fa-book-open', class: 'lesson' },
         plan_generated: { icon: 'fa-calendar-alt', class: 'plan_generated' },
         level_up: { icon: 'fa-level-up-alt', class: 'level_up' },
         vyuka_start: { icon: 'fa-chalkboard-teacher', class: 'lesson'}, // P≈ô√≠klad pro v√Ωuku
         vyuka_complete: { icon: 'fa-flag-checkered', class: 'test'}, // P≈ô√≠klad pro v√Ωuku
         other: { icon: 'fa-info-circle', class: 'other' },
         default: { icon: 'fa-check-circle', class: 'default' }
     };

     ui.notificationCount.textContent = count > 9 ? '9+' : (count > 0 ? String(count) : '');
     ui.notificationCount.classList.toggle('visible', count > 0);

     if (notifications && notifications.length > 0) {
         ui.notificationsList.innerHTML = notifications.map(n => {
             const visual = activityVisuals[n.type?.toLowerCase()] || activityVisuals.default;
             const isReadClass = n.is_read ? 'is-read' : '';
             const linkAttr = n.link ? `data-link="${sanitizeHTML(n.link)}"` : '';
             return `<div class="notification-item ${isReadClass}" data-id="${n.id}" ${linkAttr}>
                         ${!n.is_read ? '<span class="unread-dot"></span>' : ''}
                         <div class="notification-icon ${visual.class}">
                              <i class="fas ${visual.icon}"></i>
                         </div>
                         <div class="notification-content">
                             <div class="notification-title">${sanitizeHTML(n.title)}</div>
                             <div class="notification-message">${sanitizeHTML(n.message)}</div>
                             <div class="notification-time">${formatRelativeTime(n.created_at)}</div>
                         </div>
                     </div>`;
         }).join('');
         ui.noNotificationsMsg.style.display = 'none';
         ui.notificationsList.style.display = 'block';
         ui.markAllReadBtn.disabled = count === 0;
     } else {
         ui.notificationsList.innerHTML = '';
         ui.noNotificationsMsg.style.display = 'block';
         ui.notificationsList.style.display = 'none';
         ui.markAllReadBtn.disabled = true;
     }
     console.log("[Render Notifications] Finished rendering.");
 }

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
 * @param {'initial'|'loadingTopic'|'learning'|'chatting'|'requestingExplanation'|'waitingForAnswer'|'noPlan'|'planComplete'|'error'|'loggedOut'} mode - –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º UI.
 * @param {object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏.
 */
function manageUIState(mode, options = {}) {
    console.log("[UI State]:", mode, options);
    const isLearningActive = ['learning', 'chatting', 'requestingExplanation', 'waitingForAnswer', 'loadingTopic', 'initial'].includes(mode);

    if (ui.learningInterface) {
        const showInterface = !!state.currentTopic || ['loadingTopic', 'requestingExplanation', 'noPlan', 'planComplete', 'error', 'initial'].includes(mode);
        ui.learningInterface.style.display = showInterface ? 'flex' : 'none';
    }

    if (ui.chatMessages && !isLearningActive) {
        let emptyStateHTML = '';
        switch (mode) {
            case 'loggedOut': emptyStateHTML = `<div class='empty-state'><i class='fas fa-sign-in-alt'></i><h3>NEP≈òIHL√Å≈†EN</h3><p>Pro p≈ô√≠stup k v√Ωuce se pros√≠m <a href="/auth/index.html" style="color: var(--accent-primary)">p≈ôihlaste</a>.</p></div>`; break;
            case 'noPlan': emptyStateHTML = `<div class='empty-state'><i class='fas fa-calendar-times'></i><h3>≈Ω√ÅDN√ù AKTIVN√ç PL√ÅN</h3><p>Nem√°te aktivn√≠ studijn√≠ pl√°n. Nejprve pros√≠m dokonƒçete <a href="/dashboard/procvicovani/test1.html" style="color: var(--accent-primary)">diagnostick√Ω test</a>.</p></div>`; break;
            case 'planComplete': emptyStateHTML = `<div class='empty-state'><i class='fas fa-check-circle'></i><h3>PL√ÅN DOKONƒåEN!</h3><p>V≈°echny napl√°novan√© aktivity jsou hotov√©. Skvƒõl√° pr√°ce! M≈Ø≈æete si <a href="/dashboard/procvicovani/plan.html" style="color: var(--accent-primary)">vytvo≈ôit nov√Ω pl√°n</a>.</p></div>`; break;
            case 'error': emptyStateHTML = `<div class='empty-state'><i class='fas fa-exclamation-triangle'></i><h3>CHYBA SYST√âMU</h3><p>${sanitizeHTML(options.errorMessage || 'Nastala chyba p≈ôi naƒç√≠t√°n√≠ dat.')}</p></div>`; break;
            case 'initial': emptyStateHTML = '<div class="empty-state"><i class="fas fa-spinner fa-spin"></i><h3>Inicializace...</h3></div>'; break;
            default: emptyStateHTML = '';
        }
        if (emptyStateHTML) { ui.chatMessages.innerHTML = emptyStateHTML; }
    } else if (ui.chatMessages && mode === 'loadingTopic') {
        ui.chatMessages.innerHTML = '<div class="empty-state"><i class="fas fa-book-open"></i><h3>NAƒå√çT√ÅN√ç T√âMATU...</h3></div>';
    }

    manageButtonStates();
}

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é/–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∫–Ω–æ–ø–æ–∫.
 */
function manageButtonStates() {
    const canInteractNormally = !!state.currentTopic && !state.geminiIsThinking && !state.topicLoadInProgress && !state.aiIsWaitingForAnswer;
    const canContinueOrComplete = canInteractNormally;
    const canChat = !!state.currentTopic && !state.geminiIsThinking && !state.topicLoadInProgress;

    if (ui.sendButton) {
        ui.sendButton.disabled = !canChat || state.isListening || !ui.chatInput?.value.trim(); // Disable if input is empty too
        ui.sendButton.innerHTML = state.geminiIsThinking ? '<i class="fas fa-spinner fa-spin"></i>' : '<i class="fas fa-paper-plane"></i>';
    }
    if (ui.chatInput) {
        ui.chatInput.disabled = !canChat || state.isListening;
        ui.chatInput.placeholder = state.isListening ? "Poslouch√°m..." : (canChat ? (state.aiIsWaitingForAnswer ? "Odpovƒõzte na ot√°zku AI..." : "Zeptejte se nebo odpovƒõzte...") : "Poƒçkejte pros√≠m...");
    }
    if (ui.continueBtn) {
        ui.continueBtn.disabled = !canContinueOrComplete;
        ui.continueBtn.style.display = state.currentTopic ? 'inline-flex' : 'none';
    }
    if (ui.markCompleteBtn) {
        ui.markCompleteBtn.disabled = !canContinueOrComplete;
        ui.markCompleteBtn.style.display = state.currentTopic ? 'inline-flex' : 'none';
    }
    if (ui.clearBoardBtn) { ui.clearBoardBtn.disabled = !ui.whiteboardContent?.hasChildNodes() || state.geminiIsThinking; } // Check if board has content
    if (ui.stopSpeechBtn) { ui.stopSpeechBtn.disabled = !state.speechSynthesisSupported || !window.speechSynthesis.speaking; } // Disable if not speaking
    if (ui.micBtn) {
        const canUseMic = canChat && state.speechRecognitionSupported;
        ui.micBtn.disabled = !canUseMic || state.geminiIsThinking; // Also disable if Gemini is thinking
        ui.micBtn.classList.toggle('listening', state.isListening);
        ui.micBtn.title = !state.speechRecognitionSupported ? "Nepodporov√°no" : state.isListening ? "Zastavit hlasov√Ω vstup" : "Zah√°jit hlasov√Ω vstup";
    }
    if (ui.clearChatBtn) ui.clearChatBtn.disabled = state.geminiIsThinking || !ui.chatMessages?.hasChildNodes() || ui.chatMessages?.querySelector('.empty-state'); // Disable if chat empty
    if (ui.saveChatBtn) ui.saveChatBtn.disabled = state.geminiIsThinking || !ui.chatMessages?.hasChildNodes() || ui.chatMessages?.querySelector('.empty-state'); // Disable if chat empty
}


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –î–µ–π—Å—Ç–≤–∏–π ---

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞.
 */
async function handleSendMessage() {
    const text = ui.chatInput?.value.trim();
    if (!text || state.geminiIsThinking || !state.currentTopic || state.isListening) return;

    const inputBeforeSend = ui.chatInput?.value; // Ulo≈æ√≠me hodnotu p≈ôed vymaz√°n√≠m
    if (ui.chatInput) { ui.chatInput.value = ''; autoResizeTextarea(ui.chatInput); } // Vymazat a p≈ôizp≈Øsobit

    try {
         // 1. Add user message to UI and context
         await addChatMessage(text, 'user');
         initTooltips(); // <-- Inicializace tooltip≈Ø po p≈ôid√°n√≠ zpr√°vy
         state.geminiChatContext.push({ role: "user", parts: [{ text }] });

         // 2. Set thinking state
         setLoadingState('chat', true);
         addThinkingIndicator();
         manageButtonStates();

         // 3. Define prompt
         let promptForGemini = `Student p√≠≈°e do chatu: "${text}". T√©ma je "${state.currentTopic.name}". Odpovƒõz relevantnƒõ v r√°mci t√©matu a konverzace. Pou≈æij POUZE text do chatu. Nep≈ôid√°vej bloky [BOARD_MARKDOWN] ani [TTS_COMMENTARY].`;
         if (state.aiIsWaitingForAnswer) {
            promptForGemini = `Student odpovƒõdƒõl na p≈ôedchoz√≠ ot√°zku: "${text}". T√©ma je "${state.currentTopic.name}". Vyhodno≈• odpovƒõƒè a pokraƒçuj v konverzaci POUZE textem do chatu. M≈Ø≈æe≈° polo≈æit dal≈°√≠ ot√°zku nebo navrhnout pokraƒçov√°n√≠ v√Ωkladu.`;
            state.aiIsWaitingForAnswer = false;
         }

         // 4. Send request
         const response = await sendToGemini(promptForGemini, true); // true = chat interaction

         // 5. Process response
         removeThinkingIndicator();
         if (response.success && response.data) {
             const { chatText, ttsCommentary } = response.data; // Expecting mostly chatText
             if (chatText) {
                 await addChatMessage(chatText, 'gemini', true, new Date(), ttsCommentary);
                 initTooltips(); // <-- Inicializace tooltip≈Ø po p≈ôid√°n√≠ zpr√°vy AI
                 const lowerChatText = chatText.toLowerCase();
                 state.aiIsWaitingForAnswer = chatText.endsWith('?') || lowerChatText.includes('ot√°zka:') || lowerChatText.includes('zkuste') || lowerChatText.includes('jak byste');
                 manageUIState(state.aiIsWaitingForAnswer ? 'waitingForAnswer' : 'learning');
             } else {
                 console.warn("Gemini chat response missing chatText.");
                 await addChatMessage("(AI neodpovƒõdƒõlo textem)", 'gemini', false);
                 state.aiIsWaitingForAnswer = false;
                 manageUIState('learning');
             }
         } else {
             console.error("Error response from Gemini:", response.error);
             await addChatMessage(`Promi≈àte, nastala chyba: ${response.error || 'Nezn√°m√° chyba AI.'}`, 'gemini', false);
             state.aiIsWaitingForAnswer = false;
             manageUIState('learning');
             // V p≈ô√≠padƒõ chyby vr√°t√≠me p≈Øvodn√≠ text do inputu
             if (ui.chatInput) { ui.chatInput.value = inputBeforeSend; autoResizeTextarea(ui.chatInput); }
         }

    } catch (error) {
         console.error("Error in handleSendMessage:", error);
         showError("Do≈°lo k chybƒõ p≈ôi odes√≠l√°n√≠ zpr√°vy.", false);
         removeThinkingIndicator(); // Ensure indicator is removed on exception
         state.aiIsWaitingForAnswer = false;
         manageUIState('learning');
         // V p≈ô√≠padƒõ chyby vr√°t√≠me p≈Øvodn√≠ text do inputu
         if (ui.chatInput) { ui.chatInput.value = inputBeforeSend; autoResizeTextarea(ui.chatInput); }
    } finally {
         setLoadingState('chat', false);
         manageButtonStates(); // Ensure buttons are updated
    }
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —É AI.
 */
async function requestContinue() {
    if (state.geminiIsThinking || !state.currentTopic || state.aiIsWaitingForAnswer) return;

    setLoadingState('chat', true);
    addThinkingIndicator();
    manageButtonStates();

    const prompt = `Pokraƒçuj ve vysvƒõtlov√°n√≠ t√©matu "${state.currentTopic.name}" pro studenta s √∫rovn√≠ "${state.currentProfile?.skill_level || 'nezn√°m√°'}". Nav√°≈æ na p≈ôedchoz√≠ ƒç√°st. Vygeneruj dal≈°√≠ logickou ƒç√°st v√Ωkladu.\nForm√°t odpovƒõdi MUS√ç b√Ωt:\n[BOARD_MARKDOWN]:\n\`\`\`markdown\n...\`\`\`\n[TTS_COMMENTARY]:\n...`;

    const response = await sendToGemini(prompt, false); // false = explanation request

    removeThinkingIndicator();
    if (response.success && response.data) {
        const { boardMarkdown, ttsCommentary, chatText } = response.data;
        if (boardMarkdown) {
            appendToWhiteboard(boardMarkdown, ttsCommentary || boardMarkdown);
            initTooltips(); // <-- Inicializace tooltip≈Ø po p≈ôid√°n√≠ na tabuli
        }
        if (chatText) {
            await addChatMessage(chatText, 'gemini', true, new Date(), ttsCommentary);
            initTooltips(); // <-- Inicializace tooltip≈Ø po p≈ôid√°n√≠ zpr√°vy
            const lowerChatText = chatText.toLowerCase();
            state.aiIsWaitingForAnswer = chatText.endsWith('?') || lowerChatText.includes('ot√°zka:') || lowerChatText.includes('zkuste') || lowerChatText.includes('jak byste');
            manageUIState(state.aiIsWaitingForAnswer ? 'waitingForAnswer' : 'learning');
        } else if (ttsCommentary && !boardMarkdown) {
            await addChatMessage("(Poslechnƒõte si dal≈°√≠ ƒç√°st koment√°≈ôe)", 'gemini', true, new Date(), ttsCommentary);
            initTooltips(); // <-- Inicializace tooltip≈Ø
            state.aiIsWaitingForAnswer = false;
            manageUIState('learning');
        } else if (!boardMarkdown && !chatText && !ttsCommentary) {
            console.warn("Gemini continue request returned empty content.");
            await addChatMessage("(AI neposkytlo dal≈°√≠ obsah)", 'gemini', false);
            state.aiIsWaitingForAnswer = false;
            manageUIState('learning');
        } else {
            state.aiIsWaitingForAnswer = false;
            manageUIState('learning');
        }
        if (ttsCommentary) { speakText(ttsCommentary); }

    } else {
        console.error("Error response from Gemini on continue:", response.error);
        await addChatMessage(`Promi≈àte, nastala chyba p≈ôi pokraƒçov√°n√≠: ${response.error || 'Nezn√°m√° chyba AI.'}`, 'gemini', false);
        state.aiIsWaitingForAnswer = false;
        manageUIState('learning');
    }

    setLoadingState('chat', false);
    manageButtonStates();
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã.
 */
async function startLearningSession() {
    if (!state.currentTopic) {
        console.error("Cannot start learning session: no current topic.");
        manageUIState('error', {errorMessage: 'Chyba: T√©ma nen√≠ definov√°no.'});
        return;
    }
    state.currentSessionId = generateSessionId();
    manageUIState('requestingExplanation');
    setLoadingState('chat', true);
    addThinkingIndicator();
    manageButtonStates();

    const prompt = `Jsi AI Tutor "Justax". Vysvƒõtli Z√ÅKLADY t√©matu "${state.currentTopic.name}" pro studenta s √∫rovn√≠ "${state.currentProfile?.skill_level || 'nezn√°m√°'}". Rozdƒõl vysvƒõtlen√≠ na men≈°√≠ logick√© ƒç√°sti. Pro PRVN√ç ƒå√ÅST:\nForm√°t odpovƒõdi MUS√ç b√Ωt:\n[BOARD_MARKDOWN]:\n\`\`\`markdown\n...\`\`\`\n[TTS_COMMENTARY]:\n...`;

    const response = await sendToGemini(prompt, false);

    removeThinkingIndicator();
    if (response.success && response.data) {
         const { boardMarkdown, ttsCommentary, chatText } = response.data;
         if (boardMarkdown) {
             appendToWhiteboard(boardMarkdown, ttsCommentary || boardMarkdown);
             initTooltips(); // <-- Inicializace tooltip≈Ø po p≈ôid√°n√≠ na tabuli
         }
         if (chatText) {
             await addChatMessage(chatText, 'gemini', true, new Date(), ttsCommentary);
             initTooltips(); // <-- Inicializace tooltip≈Ø po p≈ôid√°n√≠ zpr√°vy
             const lowerChatText = chatText.toLowerCase();
             state.aiIsWaitingForAnswer = chatText.endsWith('?') || lowerChatText.includes('ot√°zka:') || lowerChatText.includes('zkuste') || lowerChatText.includes('jak byste');
             manageUIState(state.aiIsWaitingForAnswer ? 'waitingForAnswer' : 'learning');
         } else if (ttsCommentary && !boardMarkdown){
             await addChatMessage("(Poslechnƒõte si √∫vodn√≠ koment√°≈ô)", 'gemini', true, new Date(), ttsCommentary);
             initTooltips(); // <-- Inicializace tooltip≈Ø
             state.aiIsWaitingForAnswer = false;
             manageUIState('learning');
         } else if (!boardMarkdown && !chatText && !ttsCommentary){
             console.warn("Gemini initial request returned empty content.");
             await addChatMessage("(AI neposkytlo √∫vodn√≠ obsah)", 'gemini', false);
             state.aiIsWaitingForAnswer = false;
             manageUIState('learning');
         } else {
             state.aiIsWaitingForAnswer = false;
             manageUIState('learning');
         }
         if (ttsCommentary) { speakText(ttsCommentary); }
    } else {
         console.error("Error response from Gemini on initial explanation:", response.error);
         await addChatMessage(`Promi≈àte, nastala chyba p≈ôi zah√°jen√≠ v√Ωkladu: ${response.error || 'Nezn√°m√° chyba AI.'}`, 'gemini', false);
         manageUIState('error', { errorMessage: `Chyba AI: ${response.error}` });
    }

    setLoadingState('chat', false);
    manageButtonStates();
}

/**
 * –ü–æ—Ç–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "Oznaƒçit jako dokonƒçen√©".
 */
async function handleMarkTopicCompleteFlow() {
     if (!state.currentTopic || state.topicLoadInProgress || state.isLoading.points) return;

     if (!confirm(`Opravdu oznaƒçit t√©ma "${state.currentTopic.name}" jako dokonƒçen√©?`)) {
          return;
     }

     console.log(`[Flow] Marking topic ${state.currentTopic.activity_id} as complete.`);
     setLoadingState('currentTopic', true);
     state.topicLoadInProgress = true;
     manageButtonStates();

     try {
          const successMark = await markTopicComplete(state.currentTopic.activity_id, state.currentUser.id);

          if (successMark) {
              console.log(`[Flow] Topic marked complete. Awarding points...`);
              setLoadingState('points', true);
              const pointsAwarded = await awardPoints(state.currentUser.id, POINTS_TOPIC_COMPLETE);
              setLoadingState('points', false);

              if (pointsAwarded) {
                   showToast('+', `${POINTS_TOPIC_COMPLETE} kredit≈Ø z√≠sk√°no!`, 'success', 3000);
              } else {
                   showToast('Varov√°n√≠', 'T√©ma dokonƒçeno, ale body se nepoda≈ôilo p≈ôipsat.', 'warning');
              }

              showToast(`T√©ma "${state.currentTopic.name}" dokonƒçeno.`, "success");
              await loadNextTopicFlow(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É

          } else {
              showToast("Chyba p≈ôi oznaƒçov√°n√≠ t√©matu jako dokonƒçen√©ho.", "error");
              state.topicLoadInProgress = false;
              setLoadingState('currentTopic', false);
              manageButtonStates();
          }
     } catch (error) {
          console.error("Error in handleMarkTopicCompleteFlow:", error);
          showToast("Neoƒçek√°van√° chyba p≈ôi dokonƒçov√°n√≠ t√©matu.", "error");
          state.topicLoadInProgress = false;
          setLoadingState('currentTopic', false);
          manageButtonStates();
     }
}

/**
 * –ü–æ—Ç–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã.
 */
async function loadNextTopicFlow() {
     if (!state.currentUser || state.topicLoadInProgress) return;
     console.log("[Flow] Loading next topic flow started.");
     state.topicLoadInProgress = true;
     setLoadingState('currentTopic', true);
     state.currentTopic = null;
     if (ui.currentTopicDisplay) ui.currentTopicDisplay.innerHTML = '<span class="placeholder"><i class="fas fa-spinner fa-spin"></i> Naƒç√≠t√°m t√©ma...</span>';
     if (ui.chatMessages) ui.chatMessages.innerHTML = '';
     clearWhiteboard(false);
     state.geminiChatContext = [];
     state.aiIsWaitingForAnswer = false;
     manageUIState('loadingTopic');
     manageButtonStates();

     try {
          const result = await loadNextUncompletedTopic(state.currentUser.id);

          if (result.success && result.topic) { // P≈ôid√°na kontrola result.topic
              state.currentTopic = result.topic;
              if (ui.currentTopicDisplay) { ui.currentTopicDisplay.innerHTML = `T√©ma: <strong>${sanitizeHTML(state.currentTopic.name)}</strong>`; }
              await startLearningSession(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ nov√© —Ç–µ–º—ã
          } else {
              state.currentTopic = null;
              if (ui.currentTopicDisplay) ui.currentTopicDisplay.innerHTML = `<span class="placeholder">(${result.message || 'Nen√≠ dal≈°√≠ t√©ma'})</span>`;
              manageUIState(result.reason || 'error', { errorMessage: result.message });
          }
     } catch(error) {
          console.error("Error in loadNextTopicFlow:", error);
          state.currentTopic = null;
           if (ui.currentTopicDisplay) ui.currentTopicDisplay.innerHTML = `<span class="placeholder">(Chyba naƒç√≠t√°n√≠)</span>`;
          manageUIState('error', { errorMessage: `Chyba p≈ôi naƒç√≠t√°n√≠ dal≈°√≠ho t√©matu: ${error.message}` });
     } finally {
          state.topicLoadInProgress = false;
          setLoadingState('currentTopic', false);
          manageButtonStates();
          console.log("[Flow] Loading next topic flow finished.");
     }
}


// --- –ó–∞–ø—É—Å–∫ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
document.addEventListener('DOMContentLoaded', initializeApp);