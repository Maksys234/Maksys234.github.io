// vyukaApp.js - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Vyuka, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π

// --- –ò–º–ø–æ—Ä—Ç –ú–æ–¥—É–ª–µ–π ---
import { MAX_GEMINI_HISTORY_TURNS, NOTIFICATION_FETCH_LIMIT, POINTS_TOPIC_COMPLETE } from './config.js';
import { state } from './state.js';
import { ui } from './ui.js';
import {
    sanitizeHTML, getInitials, formatTimestamp, formatRelativeTime, autoResizeTextarea,
    generateSessionId, initTooltips, updateOnlineStatus, updateCopyrightYear,
    initMouseFollower, initScrollAnimations, initHeaderScrollDetection
} from './utils.js';
import { showToast, showError, hideError, setLoadingState, updateTheme } from './uiHelpers.js'; // <<< –ù–û–í–´–ô –§–ê–ô–õ –î–õ–Ø UI –•–ï–õ–ü–ï–†–û–í (—Å–º. –Ω–∏–∂–µ)
import {
    initializeSupabase, fetchUserProfile, fetchNotifications, markNotificationRead,
    markAllNotificationsRead, loadNextUncompletedTopic, markTopicComplete,
    saveChatMessage, deleteChatSessionHistory, awardPoints
} from './supabaseService.js';
import { sendToGemini, parseGeminiResponse } from './geminiService.js';
import { loadVoices, speakText, stopSpeech, handleMicClick, initializeSpeechRecognition, removeBoardHighlight } from './speechService.js';
import { renderMarkdown, clearWhiteboard, appendToWhiteboard } from './whiteboardController.js';
import { addChatMessage, addThinkingIndicator, removeThinkingIndicator, confirmClearChat, saveChatToPDF } from './chatController.js';

// --- –û—Å–Ω–æ–≤–Ω–∞—è –õ–æ–≥–∏–∫–∞ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
async function initializeApp() {
    console.log("üöÄ [Init Vyuka - Kyber] Starting App Initialization...");
    if (ui.initialLoader) {
        ui.initialLoader.style.display = 'flex';
        ui.initialLoader.classList.remove('hidden');
    }
    if (ui.mainContent) ui.mainContent.style.display = 'none';
    hideGlobalError();

    const supabaseInitialized = initializeSupabase(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
    if (!supabaseInitialized) {
        showError("Kritick√° chyba: Nepoda≈ôilo se p≈ôipojit k datab√°zi.", true);
        if (ui.initialLoader) ui.initialLoader.innerHTML = `<p style="color: var(--accent-pink);">Chyba p≈ôipojen√≠.</p>`;
        return;
    }
    state.supabase = supabaseInitialized; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    try {
        console.log("[INIT] Checking auth session...");
        const { data: { session }, error: sessionError } = await state.supabase.auth.getSession();
        if (sessionError) throw new Error(`Nepoda≈ôilo se ovƒõ≈ôit sezen√≠: ${sessionError.message}`);
        if (!session || !session.user) {
            console.log('[Init Vyuka - Kyber] Not logged in. Redirecting...');
            window.location.href = '/auth/index.html';
            return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        }
        state.currentUser = session.user;
        console.log(`[INIT] User authenticated (ID: ${state.currentUser.id}).`);

        setLoadingState('user', true);
        state.currentProfile = await fetchUserProfile(state.currentUser.id); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        updateUserInfoUI(); // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
        setLoadingState('user', false);
        if (!state.currentProfile) {
            showError("Profil nenalezen nebo se nepoda≈ôilo naƒç√≠st.", true);
            manageUIState('error', { errorMessage: 'Profil nenalezen.' });
             // –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä –∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –æ—à–∏–±–∫–æ–π
             if (ui.initialLoader) { ui.initialLoader.classList.add('hidden'); setTimeout(() => { if (ui.initialLoader) ui.initialLoader.style.display = 'none'; }, 500); }
             if (ui.mainContent) ui.mainContent.style.display = 'flex';
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        initializeUI();

        console.log("[INIT] Loading initial topic and notifications...");
        const loadNotificationsPromise = fetchNotifications(state.currentUser.id, NOTIFICATION_FETCH_LIMIT)
            .then(({ unreadCount, notifications }) => renderNotifications(unreadCount, notifications)) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–Ω–¥–µ—Ä–∞
            .catch(err => {
                console.error("Chyba p≈ôi √∫vodn√≠m naƒç√≠t√°n√≠ notifikac√≠:", err);
                renderNotifications(0, []); // –ü–æ–∫–∞–∑–∞—Ç—å 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
            });

        const loadTopicPromise = loadNextTopicFlow(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º—ã

        await Promise.all([loadNotificationsPromise, loadTopicPromise]);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        if (ui.initialLoader) {
             ui.initialLoader.classList.add('hidden');
             setTimeout(() => { if (ui.initialLoader) ui.initialLoader.style.display = 'none'; }, 500);
        }
        if (ui.mainContent) {
            ui.mainContent.style.display = 'flex'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º flex –¥–ª—è layout
            requestAnimationFrame(() => { ui.mainContent.classList.add('loaded'); }); // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
        }
        requestAnimationFrame(initScrollAnimations); // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π —Å–∫—Ä–æ–ª–ª–∞

        console.log("‚úÖ [Init Vyuka - Kyber] Page Initialized.");

    } catch (error) {
        console.error("‚ùå [Init Vyuka - Kyber] Critical initialization error:", error);
        if (ui.initialLoader && !ui.initialLoader.classList.contains('hidden')) {
            ui.initialLoader.innerHTML = `<p style="color: var(--accent-pink);">CHYBA (${error.message}). Obnovte.</p>`;
        } else {
            showError(`Chyba inicializace: ${error.message}`, true);
        }
        if (ui.mainContent) ui.mainContent.style.display = 'flex'; // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        setLoadingState('all', false); // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ UI.
 */
function initializeUI() {
    try {
        updateTheme(); // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É (–∏–∑ uiHelpers.js)
        setupEventListeners(); // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏
        initTooltips(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—É–ª—Ç–∏–ø—ã (–∏–∑ utils.js)

        // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —á–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (ui.chatTabButton) ui.chatTabButton.classList.add('active');
        if (ui.chatTabContent) ui.chatTabContent.classList.add('active');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS/STT (–≤—ã–∑–æ–≤ –∏–∑ speechService)
        // –ì–æ–ª–æ—Å–∞ —É–∂–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ speechService
        // –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Ç–∞–º –∂–µ
        initializeSpeechRecognition(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–∏–∑ utils.js)
        initMouseFollower();
        initHeaderScrollDetection();
        updateCopyrightYear();
        updateOnlineStatus();

        manageUIState('initial'); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        console.log("UI Initialized successfully.");
    } catch (error) {
        console.error("UI Init failed:", error);
        showError(`Chyba inicializace UI: ${error.message}`, true);
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π.
 */
function setupEventListeners() {
    console.log("[SETUP] Setting up event listeners...");

    // Sidebar/Menu
    ui.mainMobileMenuToggle?.addEventListener('click', openMenu); // –∏–∑ utils.js
    ui.sidebarCloseToggle?.addEventListener('click', closeMenu); // –∏–∑ utils.js
    ui.sidebarOverlay?.addEventListener('click', closeMenu);     // –∏–∑ utils.js

    // Chat
    ui.chatInput?.addEventListener('input', autoResizeTextarea); // –∏–∑ utils.js
    ui.sendButton?.addEventListener('click', handleSendMessage);
    ui.chatInput?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    });
    ui.clearChatBtn?.addEventListener('click', confirmClearChat); // –∏–∑ chatController.js
    ui.saveChatBtn?.addEventListener('click', saveChatToPDF);   // –∏–∑ chatController.js
    ui.micBtn?.addEventListener('click', handleMicClick);     // –∏–∑ speechService.js

    // Whiteboard / TTS
    ui.clearBoardBtn?.addEventListener('click', () => {
         clearWhiteboard(); // –∏–∑ whiteboardController.js
         showToast('Vymaz√°no', "Tabule vymaz√°na.", "info"); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç –∑–¥–µ—Å—å
    });
    ui.stopSpeechBtn?.addEventListener('click', stopSpeech); // –∏–∑ speechService.js

    // Topic Control
    ui.continueBtn?.addEventListener('click', requestContinue);
    ui.markCompleteBtn?.addEventListener('click', handleMarkTopicCompleteFlow);

    // Chat Messages Area (Event Delegation for TTS buttons in messages)
    ui.chatMessages?.addEventListener('click', (event) => {
        const button = event.target.closest('.tts-listen-btn');
        if (button && button.dataset.textToSpeak) {
            speakText(button.dataset.textToSpeak); // –∏–∑ speechService.js
        }
    });
     // Whiteboard Area (Event Delegation for TTS buttons in chunks - moved to whiteboardController)
     // Event delegation is now handled inside appendToWhiteboard

    // Theme Change
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
        state.isDarkMode = event.matches;
        console.log("Theme changed, isDarkMode:", state.isDarkMode);
        updateTheme(); // –∏–∑ uiHelpers.js
    });

    // Window Resize
    window.addEventListener('resize', () => {
        if (window.innerWidth > 992 && ui.sidebar?.classList.contains('active')) {
            closeMenu(); // –∏–∑ utils.js
        }
    });

    // Online/Offline Status
    window.addEventListener('online', updateOnlineStatus); // –∏–∑ utils.js
    window.addEventListener('offline', updateOnlineStatus);// –∏–∑ utils.js

    // Notifications Dropdown
    ui.notificationBell?.addEventListener('click', (event) => {
        event.stopPropagation();
        ui.notificationsDropdown?.classList.toggle('active');
    });
    ui.markAllReadBtn?.addEventListener('click', async () => {
        setLoadingState('notifications', true);
        const success = await markAllNotificationsRead(state.currentUser.id);
        if(success) {
            const { unreadCount, notifications } = await fetchNotifications(state.currentUser.id, NOTIFICATION_FETCH_LIMIT);
            renderNotifications(unreadCount, notifications);
            showToast('SIGN√ÅLY VYMAZ√Å–ù–´', 'V≈°echna ozn√°men√≠ byla oznaƒçena jako p≈ôeƒçten√°.', 'success');
        } else {
             showToast('CHYBA P≈òENOSU', 'Nepoda≈ôilo se oznaƒçit v≈°echna ozn√°men√≠.', 'error');
        }
        setLoadingState('notifications', false);
    });
    ui.notificationsList?.addEventListener('click', async (event) => {
        const item = event.target.closest('.notification-item');
        if (item) {
            const notificationId = item.dataset.id;
            const link = item.dataset.link;
            const isRead = item.classList.contains('is-read');
            if (!isRead && notificationId) {
                const success = await markNotificationRead(notificationId, state.currentUser.id);
                if (success) {
                    item.classList.add('is-read');
                    item.querySelector('.unread-dot')?.remove();
                    const currentCountText = ui.notificationCount.textContent.replace('+', '');
                    const currentCount = parseInt(currentCountText) || 0;
                    const newCount = Math.max(0, currentCount - 1);
                    ui.notificationCount.textContent = newCount > 9 ? '9+' : (newCount > 0 ? String(newCount) : '');
                    ui.notificationCount.classList.toggle('visible', newCount > 0);
                    if (ui.markAllReadBtn) ui.markAllReadBtn.disabled = newCount === 0;
                } else {
                     showToast('Chyba', 'Nepoda≈ôilo se oznaƒçit ozn√°men√≠.', 'error');
                }
            }
            // –°–∫—Ä—ã—Ç—å dropdown –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞)
            if(link) {
                 ui.notificationsDropdown?.classList.remove('active');
                 window.location.href = link;
             }
        }
    });
    document.addEventListener('click', (event) => {
        if (ui.notificationsDropdown?.classList.contains('active') &&
            !ui.notificationsDropdown.contains(event.target) &&
            !ui.notificationBell?.contains(event.target)) {
            ui.notificationsDropdown.classList.remove('active');
        }
    });

    console.log("Event listeners setup complete.");
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ---

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ UI (—Å–∞–π–¥–±–∞—Ä).
 */
function updateUserInfoUI() {
    if (!ui.sidebarName || !ui.sidebarAvatar) return;
    if (state.currentUser && state.currentProfile) {
        const displayName = `${state.currentProfile.first_name || ''} ${state.currentProfile.last_name || ''}`.trim() || state.currentProfile.username || state.currentUser.email?.split('@')[0] || 'Pilot';
        ui.sidebarName.textContent = sanitizeHTML(displayName);
        const initials = getInitials(state.currentProfile, state.currentUser.email); // –∏–∑ utils.js
        const avatarUrl = state.currentProfile.avatar_url;
        const finalUrl = avatarUrl && !avatarUrl.startsWith('assets/') ? `${avatarUrl}?t=${Date.now()}` : avatarUrl; // Cache busting for external URLs
        ui.sidebarAvatar.innerHTML = finalUrl ? `<img src="${sanitizeHTML(finalUrl)}" alt="${sanitizeHTML(initials)}">` : sanitizeHTML(initials);
    } else {
        ui.sidebarName.textContent = 'Nep≈ôihl√°≈°en';
        ui.sidebarAvatar.textContent = '?';
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ.
 * @param {number} count - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 * @param {Array} notifications - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 */
 function renderNotifications(count, notifications) {
     console.log("[Render Notifications] Count:", count, "Notifications:", notifications);
     if (!ui.notificationCount || !ui.notificationsList || !ui.noNotificationsMsg || !ui.markAllReadBtn) {
         console.error("[Render Notifications] Missing UI elements.");
         return;
     }
     ui.notificationCount.textContent = count > 9 ? '9+' : (count > 0 ? String(count) : '');
     ui.notificationCount.classList.toggle('visible', count > 0);

     if (notifications && notifications.length > 0) {
         ui.notificationsList.innerHTML = notifications.map(n => {
             // –ò—Å–ø–æ–ª—å–∑—É–µ–º activityVisuals –¥–ª—è –∏–∫–æ–Ω–æ–∫, –µ—Å–ª–∏ —Ç–∏–ø —Å–æ–≤–ø–∞–¥–∞–µ—Ç
             const visual = activityVisuals[n.type?.toLowerCase()] || activityVisuals.default;
             const isReadClass = n.is_read ? 'is-read' : '';
             const linkAttr = n.link ? `data-link="${sanitizeHTML(n.link)}"` : '';
             return `<div class="notification-item ${isReadClass}" data-id="${n.id}" ${linkAttr}>
                         ${!n.is_read ? '<span class="unread-dot"></span>' : ''}
                         <div class="notification-icon ${visual.class}">
                              <i class="fas ${visual.icon}"></i>
                         </div>
                         <div class="notification-content">
                             <div class="notification-title">${sanitizeHTML(n.title)}</div>
                             <div class="notification-message">${sanitizeHTML(n.message)}</div>
                             <div class="notification-time">${formatRelativeTime(n.created_at)}</div>
                         </div>
                     </div>`;
         }).join('');
         ui.noNotificationsMsg.style.display = 'none';
         ui.notificationsList.style.display = 'block';
         ui.markAllReadBtn.disabled = count === 0;
     } else {
         ui.notificationsList.innerHTML = '';
         ui.noNotificationsMsg.style.display = 'block';
         ui.notificationsList.style.display = 'none';
         ui.markAllReadBtn.disabled = true;
     }
     console.log("[Render Notifications] Finished rendering.");
 }

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∑–∞–≥—Ä—É–∑–∫–∞, –æ—à–∏–±–∫–∏, –ø—É—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è).
 * @param {'initial'|'loadingTopic'|'learning'|'chatting'|'requestingExplanation'|'waitingForAnswer'|'noPlan'|'planComplete'|'error'|'loggedOut'} mode - –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º UI.
 * @param {object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (–Ω–∞–ø—Ä., errorMessage).
 */
function manageUIState(mode, options = {}) {
    console.log("[UI State]:", mode, options);
    const isLearningActive = ['learning', 'chatting', 'requestingExplanation', 'waitingForAnswer', 'loadingTopic', 'initial'].includes(mode);

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—É—á–µ–Ω–∏—è
    if (ui.learningInterface) {
         // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–º–∞, –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –∏–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const showInterface = !!state.currentTopic || ['loadingTopic', 'requestingExplanation', 'noPlan', 'planComplete', 'error', 'initial', 'loadingUser'].includes(mode);
        ui.learningInterface.style.display = showInterface ? 'flex' : 'none';
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è "AI –¥—É–º–∞–µ—Ç..."
    // (–¢–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏/–∑–∞–ø—Ä–æ—Å–∞–º–∏)

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ –ø—É—Å—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –≤ —á–∞—Ç–µ
    if (ui.chatMessages && !isLearningActive && mode !== 'loadingUser') {
        let emptyStateHTML = '';
        switch (mode) {
            case 'loggedOut': emptyStateHTML = `<div class='empty-state'><i class='fas fa-sign-in-alt'></i><h3>NEP≈òIHL√Å≈†EN</h3><p>Pro p≈ô√≠stup k v√Ωuce se pros√≠m <a href="/auth/index.html" style="color: var(--accent-primary)">p≈ôihlaste</a>.</p></div>`; break;
            case 'noPlan': emptyStateHTML = `<div class='empty-state'><i class='fas fa-calendar-times'></i><h3>≈Ω√ÅDN√ù AKTIVN√ç PL√ÅN</h3><p>Nem√°te aktivn√≠ studijn√≠ pl√°n. Nejprve pros√≠m dokonƒçete <a href="/dashboard/procvicovani/test1.html" style="color: var(--accent-primary)">diagnostick√Ω test</a>.</p></div>`; break;
            case 'planComplete': emptyStateHTML = `<div class='empty-state'><i class='fas fa-check-circle'></i><h3>PL√ÅN DOKONƒåEN!</h3><p>V≈°echny napl√°novan√© aktivity jsou hotov√©. Skvƒõl√° pr√°ce! M≈Ø≈æete si <a href="/dashboard/procvicovani/plan.html" style="color: var(--accent-primary)">vytvo≈ôit nov√Ω pl√°n</a>.</p></div>`; break;
            case 'error': emptyStateHTML = `<div class='empty-state'><i class='fas fa-exclamation-triangle'></i><h3>CHYBA SYST√âMU</h3><p>${sanitizeHTML(options.errorMessage || 'Nastala chyba p≈ôi naƒç√≠t√°n√≠ dat.')}</p></div>`; break;
            case 'initial': emptyStateHTML = '<div class="empty-state"><i class="fas fa-spinner fa-spin"></i><h3>Inicializace...</h3></div>'; break;
            default: emptyStateHTML = ''; // –ù–µ –æ—á–∏—â–∞—Ç—å, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ learning –∏–ª–∏ chatting
        }
        if (emptyStateHTML) { ui.chatMessages.innerHTML = emptyStateHTML; }
    } else if (ui.chatMessages && mode === 'loadingTopic') {
        ui.chatMessages.innerHTML = '<div class="empty-state"><i class="fas fa-book-open"></i><h3>NAƒå√çT√ÅN√ç T√âMATU...</h3></div>';
    }

    manageButtonStates(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
}

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é/–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
function manageButtonStates() {
    const canInteractNormally = !!state.currentTopic && !state.geminiIsThinking && !state.topicLoadInProgress && !state.aiIsWaitingForAnswer;
    const canContinueOrComplete = canInteractNormally;
    const canChat = !!state.currentTopic && !state.geminiIsThinking && !state.topicLoadInProgress; // –ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ç–µ–º–∞ –∏ AI –Ω–µ –¥—É–º–∞–µ—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç)

    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç–µ
    if (ui.sendButton) {
        ui.sendButton.disabled = !canChat || state.isListening;
        ui.sendButton.innerHTML = state.geminiIsThinking ? '<i class="fas fa-spinner fa-spin"></i>' : '<i class="fas fa-paper-plane"></i>';
    }
    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Ç–∞
    if (ui.chatInput) {
        ui.chatInput.disabled = !canChat || state.isListening;
        ui.chatInput.placeholder = state.isListening ? "Poslouch√°m..." : (canChat ? (state.aiIsWaitingForAnswer ? "Odpovƒõzte na ot√°zku AI..." : "Zeptejte se nebo odpovƒõzte...") : "Poƒçkejte pros√≠m...");
    }
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–æ–π
    if (ui.continueBtn) {
        ui.continueBtn.disabled = !canContinueOrComplete;
        ui.continueBtn.style.display = state.currentTopic ? 'inline-flex' : 'none';
    }
    if (ui.markCompleteBtn) {
        ui.markCompleteBtn.disabled = !canContinueOrComplete;
        ui.markCompleteBtn.style.display = state.currentTopic ? 'inline-flex' : 'none';
    }
    // –ö–Ω–æ–ø–∫–∏ –¥–æ—Å–∫–∏/—Ä–µ—á–∏
    if (ui.clearBoardBtn) { ui.clearBoardBtn.disabled = !ui.whiteboardContent || state.geminiIsThinking; }
    if (ui.stopSpeechBtn) { ui.stopSpeechBtn.disabled = !state.speechSynthesisSupported; }
    // –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    if (ui.micBtn) {
        const canUseMic = canChat && state.speechRecognitionSupported;
        ui.micBtn.disabled = !canUseMic; // –ë–ª–æ–∫–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–º—ã/AI –¥—É–º–∞–µ—Ç –ò–õ–ò –µ—Å–ª–∏ STT –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        ui.micBtn.classList.toggle('listening', state.isListening);
        ui.micBtn.title = !state.speechRecognitionSupported ? "Nepodporov√°no" : state.isListening ? "Zastavit hlasov√Ω vstup" : "Zah√°jit hlasov√Ω vstup";
    }
    // –£—Ç–∏–ª–∏—Ç—ã —á–∞—Ç–∞
    if (ui.clearChatBtn) ui.clearChatBtn.disabled = state.geminiIsThinking;
    if (ui.saveChatBtn) ui.saveChatBtn.disabled = state.geminiIsThinking;
}


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –î–µ–π—Å—Ç–≤–∏–π ---

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞.
 */
async function handleSendMessage() {
    const text = ui.chatInput?.value.trim();
    if (!text || state.geminiIsThinking || !state.currentTopic || state.isListening) return;

    if (ui.chatInput) { ui.chatInput.value = ''; autoResizeTextarea(); } // –û—á–∏—Å—Ç–∫–∞ –∏ —Ä–µ—Å–∞–π–∑ –∏–∑ utils.js

    // 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UI –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await addChatMessage(text, 'user'); // –∏–∑ chatController.js
    state.geminiChatContext.push({ role: "user", parts: [{ text }] });

    // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç"
    setLoadingState('chat', true);
    addThinkingIndicator(); // –∏–∑ chatController.js
    manageButtonStates(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

    // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
    let promptForGemini;
    if (state.aiIsWaitingForAnswer) {
         // AI –∂–¥–∞–ª –æ—Ç–≤–µ—Ç–∞
         promptForGemini = `Student odpovƒõdƒõl: "${text}". T√©ma je "${state.currentTopic.name}". Vyhodno≈• pros√≠m tuto odpovƒõƒè struƒçnƒõ v r√°mci konverzace. Vysvƒõtli p≈ô√≠padn√© chyby. Odpov√≠dej POUZE textem do chatu. Pot√© polo≈æ dal≈°√≠ ot√°zku NEBO navrhni pokraƒçov√°n√≠ ve v√Ωkladu.`;
         state.aiIsWaitingForAnswer = false; // –°—á–∏—Ç–∞–µ–º, —á—Ç–æ AI —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–æ–º
    } else {
         // –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         promptForGemini = `Student p√≠≈°e do chatu: "${text}". Odpovƒõz textem v chatu k t√©matu "${state.currentTopic.name}". Mƒõj na pamƒõti, co u≈æ bylo vysvƒõtleno. Odpov√≠dej POUZE textem do chatu. Nepos√≠lej ≈æ√°dn√Ω Markdown pro tabuli, pokud to nen√≠ explicitnƒõ vy≈æ√°d√°no pro opravu nebo doplnƒõn√≠ tabule.`;
    }

    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini
    const response = await sendToGemini(promptForGemini, true); // true - —ç—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ —á–∞—Ç–µ

    // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    removeThinkingIndicator(); // –∏–∑ chatController.js
    if (response.success && response.data) {
        const { chatText, ttsCommentary } = response.data; // –ù–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ chatText –∏, –≤–æ–∑–º–æ–∂–Ω–æ, TTS –¥–ª—è –Ω–µ–≥–æ
        if (chatText) {
            await addChatMessage(chatText, 'gemini', true, new Date(), ttsCommentary); // –∏–∑ chatController.js
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–ª –ª–∏ –ò–ò –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞
             const lowerChatText = chatText.toLowerCase();
             if (lowerChatText.includes('zkuste') || lowerChatText.includes('jak byste') || lowerChatText.includes('vypoƒç√≠tejte') || lowerChatText.includes('ot√°zka:') || chatText.endsWith('?') || lowerChatText.includes('m≈Ø≈æe≈° mi ≈ô√≠ct') ) {
                state.aiIsWaitingForAnswer = true;
                console.log("AI is waiting for an answer.");
                manageUIState('waitingForAnswer');
             } else {
                state.aiIsWaitingForAnswer = false;
                manageUIState('learning'); // –ò–ª–∏ 'chatting'
             }
        } else {
             // –ï—Å–ª–∏ AI –æ—Ç–≤–µ—Ç–∏–ª —Ç–æ–ª—å–∫–æ TTS –∏–ª–∏ –Ω–∏—á–µ–≥–æ (—á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª—è —á–∞—Ç–∞)
             console.warn("Gemini responded only with TTS/Board or empty for a chat interaction.");
             if (ttsCommentary) await addChatMessage("(Poslechnƒõte si koment√°≈ô)", 'gemini', true, new Date(), ttsCommentary);
             state.aiIsWaitingForAnswer = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
             manageUIState('learning');
        }
    } else {
        // –û—à–∏–±–∫–∞ –æ—Ç Gemini
        console.error("Error response from Gemini:", response.error);
        await addChatMessage(`Promi≈àte, nastala chyba: ${response.error || 'Nezn√°m√° chyba AI.'}`, 'gemini', false, new Date());
        state.aiIsWaitingForAnswer = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        manageUIState('learning'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    }

    setLoadingState('chat', false);
    manageButtonStates();
}


/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —É AI.
 */
async function requestContinue() {
    if (state.geminiIsThinking || !state.currentTopic || state.aiIsWaitingForAnswer) return;

    setLoadingState('chat', true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ª–æ–∞–¥–µ—Ä —á–∞—Ç–∞
    addThinkingIndicator(); // –∏–∑ chatController.js
    manageButtonStates();

    const prompt = `Pokraƒçuj ve vysvƒõtlov√°n√≠ t√©matu "${state.currentTopic.name}" pro studenta s √∫rovn√≠ "${state.currentProfile?.skill_level || 'nezn√°m√°'}". Nav√°≈æ na p≈ôedchoz√≠ ƒç√°st. Vygeneruj dal≈°√≠ logickou ƒç√°st v√Ωkladu.\nForm√°t odpovƒõdi MUS√ç b√Ωt:\n[BOARD_MARKDOWN]:\n\`\`\`markdown\n...\`\`\`\n[TTS_COMMENTARY]:\n...`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é _buildContinuePrompt –∏–∑ geminiService

    const response = await sendToGemini(prompt, false); // false - —ç—Ç–æ –Ω–µ –ø—Ä—è–º–æ–π —á–∞—Ç, –∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ

    removeThinkingIndicator();
    if (response.success && response.data) {
        const { boardMarkdown, ttsCommentary, chatText } = response.data;
        if (boardMarkdown) {
            appendToWhiteboard(boardMarkdown, ttsCommentary || boardMarkdown); // –∏–∑ whiteboardController.js
        }
        if (chatText) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI –≤ —á–∞—Ç–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–ø—Ä–æ—Å)
            await addChatMessage(chatText, 'gemini', true, new Date(), ttsCommentary); // –∏–∑ chatController.js
            const lowerChatText = chatText.toLowerCase();
             if (lowerChatText.includes('zkuste') || lowerChatText.includes('jak byste') || lowerChatText.includes('vypoƒç√≠tejte') || lowerChatText.includes('ot√°zka:') || chatText.endsWith('?') || lowerChatText.includes('m≈Ø≈æe≈° mi ≈ô√≠ct') ) {
                state.aiIsWaitingForAnswer = true;
                console.log("AI asked a question after continuing.");
                manageUIState('waitingForAnswer');
             } else {
                 state.aiIsWaitingForAnswer = false;
                 manageUIState('learning');
             }
        } else if (ttsCommentary && !boardMarkdown) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ TTS, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ —á–∞—Ç
            await addChatMessage("(Poslechnƒõte si dal≈°√≠ ƒç√°st koment√°≈ôe)", 'gemini', true, new Date(), ttsCommentary);
             state.aiIsWaitingForAnswer = false;
             manageUIState('learning');
        } else if (!boardMarkdown && !chatText && !ttsCommentary){
            console.warn("Gemini continue request returned empty content.");
            await addChatMessage("(AI neposkytlo dal≈°√≠ obsah)", 'gemini', false, new Date());
             state.aiIsWaitingForAnswer = false;
             manageUIState('learning');
        } else {
             state.aiIsWaitingForAnswer = false;
             manageUIState('learning');
        }
        // –û–∑–≤—É—á–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω (–¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª markdown)
        if (ttsCommentary) {
             speakText(ttsCommentary); // –∏–∑ speechService.js
        }

    } else {
        console.error("Error response from Gemini on continue:", response.error);
        await addChatMessage(`Promi≈àte, nastala chyba p≈ôi pokraƒçov√°n√≠: ${response.error || 'Nezn√°m√° chyba AI.'}`, 'gemini', false, new Date());
        state.aiIsWaitingForAnswer = false;
        manageUIState('learning');
    }

    setLoadingState('chat', false);
    manageButtonStates();
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã.
 */
async function startLearningSession() {
    if (!state.currentTopic) {
        console.error("Cannot start learning session: no current topic.");
        manageUIState('error', {errorMessage: 'Chyba: T√©ma nen√≠ definov√°no.'});
        return;
    }
    state.currentSessionId = generateSessionId(); // –∏–∑ utils.js
    manageUIState('requestingExplanation'); // –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –º—ã –∂–¥–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    setLoadingState('chat', true);
    addThinkingIndicator(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    manageButtonStates();

    const prompt = `Jsi AI Tutor "Justax". Vysvƒõtli Z√ÅKLADY t√©matu "${state.currentTopic.name}" pro studenta s √∫rovn√≠ "${state.currentProfile?.skill_level || 'nezn√°m√°'}". Rozdƒõl vysvƒõtlen√≠ na men≈°√≠ logick√© ƒç√°sti. Pro PRVN√ç ƒå√ÅST:\nForm√°t odpovƒõdi MUS√ç b√Ωt:\n[BOARD_MARKDOWN]:\n\`\`\`markdown\n...\`\`\`\n[TTS_COMMENTARY]:\n...`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º _buildInitialPrompt –∏–∑ geminiService

    const response = await sendToGemini(prompt, false); // –ù–µ —á–∞—Ç-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ

    removeThinkingIndicator();
    if (response.success && response.data) {
         const { boardMarkdown, ttsCommentary, chatText } = response.data;
         if (boardMarkdown) {
             appendToWhiteboard(boardMarkdown, ttsCommentary || boardMarkdown); // –∏–∑ whiteboardController.js
         }
         if (chatText) { // –ï—Å–ª–∏ AI –¥–æ–±–∞–≤–∏–ª–æ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–ø—Ä–æ—Å)
             await addChatMessage(chatText, 'gemini', true, new Date(), ttsCommentary); // –∏–∑ chatController.js
             const lowerChatText = chatText.toLowerCase();
              if (lowerChatText.includes('zkuste') || lowerChatText.includes('jak byste') || lowerChatText.includes('vypoƒç√≠tejte') || lowerChatText.includes('ot√°zka:') || chatText.endsWith('?') || lowerChatText.includes('m≈Ø≈æe≈° mi ≈ô√≠ct') ) {
                 state.aiIsWaitingForAnswer = true;
                 manageUIState('waitingForAnswer');
              } else {
                  state.aiIsWaitingForAnswer = false;
                  manageUIState('learning');
              }
         } else if (ttsCommentary && !boardMarkdown){ // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ TTS
             await addChatMessage("(Poslechnƒõte si √∫vodn√≠ koment√°≈ô)", 'gemini', true, new Date(), ttsCommentary);
              state.aiIsWaitingForAnswer = false;
              manageUIState('learning');
         } else if (!boardMarkdown && !chatText && !ttsCommentary){
             console.warn("Gemini initial request returned empty content.");
             await addChatMessage("(AI neposkytlo √∫vodn√≠ obsah)", 'gemini', false, new Date());
              state.aiIsWaitingForAnswer = false;
              manageUIState('learning');
         } else {
              state.aiIsWaitingForAnswer = false;
              manageUIState('learning');
         }
         // –û–∑–≤—É—á–∏–≤–∞–µ–º TTS, –µ—Å–ª–∏ –µ—Å—Ç—å
         if (ttsCommentary) {
              speakText(ttsCommentary); // –∏–∑ speechService.js
         }
    } else {
         console.error("Error response from Gemini on initial explanation:", response.error);
         await addChatMessage(`Promi≈àte, nastala chyba p≈ôi zah√°jen√≠ v√Ωkladu: ${response.error || 'Nezn√°m√° chyba AI.'}`, 'gemini', false, new Date());
         manageUIState('error', { errorMessage: `Chyba AI: ${response.error}` });
    }

    setLoadingState('chat', false);
    manageButtonStates();
}

/**
 * –ü–æ—Ç–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "Oznaƒçit jako dokonƒçen√©".
 */
async function handleMarkTopicCompleteFlow() {
     if (!state.currentTopic || state.topicLoadInProgress || state.isLoading.points) return;

     // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
     if (!confirm(`Opravdu oznaƒçit t√©ma "${state.currentTopic.name}" jako dokonƒçen√©?`)) {
          return;
     }

     console.log(`[Flow] Marking topic ${state.currentTopic.activity_id} as complete.`);
     setLoadingState('currentTopic', true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –Ω–∞ –º–µ—Å—Ç–µ —Ç–µ–º—ã
     state.topicLoadInProgress = true;
     manageButtonStates(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏

     const successMark = await markTopicComplete(state.currentTopic.activity_id, state.currentUser.id); // –∏–∑ supabaseService

     if (successMark) {
         console.log(`[Flow] Topic marked complete. Awarding points...`);
         setLoadingState('points', true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—á–∫–æ–≤
         const pointsAwarded = await awardPoints(state.currentUser.id, POINTS_TOPIC_COMPLETE); // –∏–∑ supabaseService
         setLoadingState('points', false);

         if (pointsAwarded) {
              showToast('+', `${POINTS_TOPIC_COMPLETE} kredit≈Ø z√≠sk√°no!`, 'success', 3000);
         } else {
              showToast('Varov√°n√≠', 'T√©ma dokonƒçeno, ale body se nepoda≈ôilo p≈ôipsat.', 'warning');
         }

         showToast(`T√©ma "${state.currentTopic.name}" dokonƒçeno.`, "success");
         await loadNextTopicFlow(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É

     } else {
         showToast("Chyba p≈ôi oznaƒçov√°n√≠ t√©matu jako dokonƒçen√©ho.", "error");
         state.topicLoadInProgress = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
         setLoadingState('currentTopic', false);
         manageButtonStates();
     }
}

/**
 * –ü–æ—Ç–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã.
 */
async function loadNextTopicFlow() {
     if (!state.currentUser || state.topicLoadInProgress) return;
     console.log("[Flow] Loading next topic flow started.");
     state.topicLoadInProgress = true;
     setLoadingState('currentTopic', true);
     state.currentTopic = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
     if (ui.currentTopicDisplay) ui.currentTopicDisplay.innerHTML = '<span class="placeholder"><i class="fas fa-spinner fa-spin"></i> Naƒç√≠t√°m t√©ma...</span>';
     if (ui.chatMessages) ui.chatMessages.innerHTML = ''; // –û—á–∏—â–∞–µ–º —á–∞—Ç
     clearWhiteboard(false); // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     state.geminiChatContext = []; // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é Gemini
     state.aiIsWaitingForAnswer = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
     manageUIState('loadingTopic'); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º UI –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏
     manageButtonStates();

     const result = await loadNextUncompletedTopic(state.currentUser.id); // –∏–∑ supabaseService

     if (result.success) {
         state.currentTopic = result.topic;
         if (ui.currentTopicDisplay) { ui.currentTopicDisplay.innerHTML = `T√©ma: <strong>${sanitizeHTML(state.currentTopic.name)}</strong>`; }
         await startLearningSession(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã
     } else {
         // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ç–µ–º (no_plan, plan_complete) –∏–ª–∏ –æ—à–∏–±–∫–∞ (load_error)
         state.currentTopic = null; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–º–∞ –ø—É—Å—Ç–∞
         if (ui.currentTopicDisplay) ui.currentTopicDisplay.innerHTML = `<span class="placeholder">(${result.message || 'N/A'})</span>`;
         manageUIState(result.reason || 'error', { errorMessage: result.message });
     }

     state.topicLoadInProgress = false;
     setLoadingState('currentTopic', false);
     manageButtonStates();
     console.log("[Flow] Loading next topic flow finished.");
}


// --- –ó–∞–ø—É—Å–∫ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
document.addEventListener('DOMContentLoaded', initializeApp);