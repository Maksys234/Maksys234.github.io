// vyukaApp.js - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Vyuka (–í–µ—Ä—Å–∏—è 3.6 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Zastavit, –†–∞–∑–º–µ—Ä–∞ UI)

// --- –ò–º–ø–æ—Ä—Ç –ú–æ–¥—É–ª–µ–π ---
import { MAX_GEMINI_HISTORY_TURNS, NOTIFICATION_FETCH_LIMIT, POINTS_TOPIC_COMPLETE } from './config.js';
import { state } from './state.js';
import { ui } from './ui.js';
import {
    sanitizeHTML, getInitials, formatTimestamp, formatRelativeTime, autoResizeTextarea,
    generateSessionId, initTooltips, updateOnlineStatus, updateCopyrightYear,
    initMouseFollower, initScrollAnimations, initHeaderScrollDetection,
    openMenu, closeMenu
} from './utils.js';
import { showToast, showError, hideError, setLoadingState, updateTheme } from './uiHelpers.js';
import {
    initializeSupabase, fetchUserProfile, fetchNotifications, markNotificationRead,
    markAllNotificationsRead, loadNextUncompletedTopic, markTopicComplete,
    saveChatMessage, deleteChatSessionHistory, awardPoints
} from './supabaseService.js';
import { sendToGemini, parseGeminiResponse } from './geminiService.js';
// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º stopSpeech
import { loadVoices, speakText, stopSpeech, handleMicClick, initializeSpeechRecognition, removeBoardHighlight } from './speechService.js';
import { renderMarkdown, clearWhiteboard, appendToWhiteboard } from './whiteboardController.js';
import { addChatMessage, addThinkingIndicator, removeThinkingIndicator, confirmClearChat, saveChatToPDF, updateGeminiThinkingState /* –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç */ } from './chatController.js';

// --- –û—Å–Ω–æ–≤–Ω–∞—è –õ–æ–≥–∏–∫–∞ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

const activityVisuals = { // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    test: { icon: 'fa-vial', class: 'test' }, exercise: { icon: 'fa-pencil-alt', class: 'exercise' }, badge: { icon: 'fa-medal', class: 'badge' },
    diagnostic: { icon: 'fa-clipboard-check', class: 'diagnostic' }, lesson: { icon: 'fa-book-open', class: 'lesson' }, plan_generated: { icon: 'fa-calendar-alt', class: 'plan_generated' },
    level_up: { icon: 'fa-level-up-alt', class: 'level_up' }, vyuka_start: { icon: 'fa-chalkboard-teacher', class: 'lesson'}, vyuka_complete: { icon: 'fa-flag-checkered', class: 'test'},
    achievement: { icon: 'fa-trophy', class: 'badge'}, info: { icon: 'fa-info-circle', class: 'info' }, warning: { icon: 'fa-exclamation-triangle', class: 'warning' },
    error: { icon: 'fa-exclamation-circle', class: 'danger' }, other: { icon: 'fa-info-circle', class: 'other' }, default: { icon: 'fa-check-circle', class: 'default' }
};

/** –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. */
async function initializeApp() {
    console.log("üöÄ [Init Vyuka - Kyber V3.6] Starting App Initialization...");
    let initializationError = null;
    if (ui.initialLoader) { ui.initialLoader.style.display = 'flex'; ui.initialLoader.classList.remove('hidden'); }
    if (ui.mainContent) ui.mainContent.style.display = 'none';
    hideError(); // –°–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏

    try {
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
        const supabaseInitialized = initializeSupabase();
        if (!supabaseInitialized) throw new Error("Kritick√° chyba: Nepoda≈ôilo se p≈ôipojit k datab√°zi.");
        state.supabase = supabaseInitialized;
        console.log("[INIT] Supabase Initialized.");

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log("[INIT] Checking auth session...");
        const { data: { session }, error: sessionError } = await state.supabase.auth.getSession();
        if (sessionError) throw new Error(`Nepoda≈ôilo se ovƒõ≈ôit sezen√≠: ${sessionError.message}`);
        if (!session || !session.user) {
            console.log('[INIT] Not logged in. Redirecting...');
            window.location.href = '/auth/index.html'; // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        }
        state.currentUser = session.user;
        console.log(`[INIT] User authenticated (ID: ${state.currentUser.id}). Fetching profile...`);

        // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setLoadingState('user', true);
        state.currentProfile = await fetchUserProfile(state.currentUser.id);
        setLoadingState('user', false);
        if (!state.currentProfile) {
            console.warn(`Profile not found for user ${state.currentUser.id}. Displaying error state.`);
            initializationError = new Error("Profil nenalezen nebo se nepoda≈ôilo naƒç√≠st. Zkuste obnovit str√°nku.");
            try { initializeUI(); updateUserInfoUI(); } // –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å UI –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
            catch (uiError) { console.error("UI Init failed during profile error:", uiError); }
            manageUIState('error', { errorMessage: initializationError.message });
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—à–∏–±–∫—É
        } else {
            console.log("[INIT] Profile fetched successfully.");
        }

        // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ UI
        console.log("[INIT] Initializing base UI...");
        initializeUI(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —Ç–µ–º—ã –∏ —Ç.–¥.
        updateUserInfoUI(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∞–π–¥–±–∞—Ä–µ

        // 5. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–º–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω
        if (state.currentProfile && !initializationError) {
            console.log("[INIT] Loading initial topic and notifications...");
            setLoadingState('currentTopic', true);
            setLoadingState('notifications', true);

            const loadNotificationsPromise = fetchNotifications(state.currentUser.id, NOTIFICATION_FETCH_LIMIT)
                .then(({ unreadCount, notifications }) => renderNotifications(unreadCount, notifications))
                .catch(err => {
                    console.error("Chyba p≈ôi √∫vodn√≠m naƒç√≠t√°n√≠ notifikac√≠:", err);
                    renderNotifications(0, []); // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                    showToast('Chyba Notifikac√≠', 'Nepoda≈ôilo se naƒç√≠st sign√°ly.', 'error');
                })
                .finally(() => {
                    setLoadingState('notifications', false);
                    manageButtonStates(); // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                });

            const loadTopicPromise = loadNextTopicFlow() // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã
                .catch(err => {
                    console.error("Chyba p≈ôi naƒç√≠t√°n√≠ √∫vodn√≠ho t√©matu:", err);
                    manageUIState('error', { errorMessage: `Chyba naƒç√≠t√°n√≠ t√©matu: ${err.message}` });
                    state.topicLoadInProgress = false; // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
                    setLoadingState('currentTopic', false);
                });

            await Promise.all([loadNotificationsPromise, loadTopicPromise]);
            console.log("[INIT] Initial data loading complete (or errors handled).");
        } else {
            // –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
             setLoadingState('currentTopic', false);
             setLoadingState('notifications', false);
             manageButtonStates();
        }

    } catch (error) {
        console.error("‚ùå [Init Vyuka - Kyber V3.6] Critical initialization error:", error);
        initializationError = error;
        // –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å UI, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
        if (!document.getElementById('main-mobile-menu-toggle')) {
            try { initializeUI(); }
            catch (uiError) { console.error("Failed to initialize UI during critical error handling:", uiError); }
        }
        manageUIState('error', { errorMessage: error.message }); // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
        setLoadingState('all', false); // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        showError(`Chyba inicializace: ${error.message}`, true); // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    } finally {
        console.log("[INIT] Finalizing initialization (finally block)...");
        // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if (ui.initialLoader) {
            ui.initialLoader.classList.add('hidden');
            setTimeout(() => { if (ui.initialLoader) ui.initialLoader.style.display = 'none'; }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        }
        if (ui.mainContent) {
            ui.mainContent.style.display = 'flex'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º flex, —Ç.–∫. –æ—Å–Ω–æ–≤–Ω–æ–π layout –Ω–∞ flexbox
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            requestAnimationFrame(() => {
                if (ui.mainContent) ui.mainContent.classList.add('loaded');
                initScrollAnimations(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            });
        }
        manageButtonStates(); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        console.log("‚úÖ [Init Vyuka - Kyber V3.6] App Initialization Finished (finally block).");
    }
}

/** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ UI –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. */
function initializeUI() {
    console.log("[UI Init] Initializing UI elements and handlers...");
    try {
        updateTheme();              // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É (dark/light)
        setupEventListeners();      // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        initTooltips();             // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if (ui.chatTabButton) ui.chatTabButton.classList.add('active'); // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —á–∞—Ç–∞
        if (ui.chatTabContent) ui.chatTabContent.classList.add('active');
        initializeSpeechRecognition(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        loadVoices(); // –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≥–æ–ª–æ—Å–æ–≤ TTS
        initMouseFollower();         // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –º—ã—à–∏
        initHeaderScrollDetection(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —à–∞–ø–∫–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        updateCopyrightYear();       // –û–±–Ω–æ–≤–∏—Ç—å –≥–æ–¥ –≤ —Ñ—É—Ç–µ—Ä–µ
        updateOnlineStatus();        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å
        manageUIState('initial');   // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        console.log("[UI Init] UI Initialized successfully.");
    } catch (error) {
        console.error("UI Init failed:", error);
        showError(`Chyba inicializace UI: ${error.message}`, false); // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É (–Ω–µ –≥–ª–æ–±–∞–ª—å–Ω—É—é)
        if (error.stack) console.error("Original stack trace:", error.stack);
    }
}

/** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π. */
function setupEventListeners() {
    console.log("[SETUP] Setting up event listeners...");
    let listenersAttached = 0;

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç–∞
    function addListener(element, event, handler, elementName) {
        if (element) {
            element.addEventListener(event, handler);
            listenersAttached++;
        } else {
            console.warn(`[SETUP] Element '${elementName}' not found. Listener not attached.`);
        }
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    addListener(ui.mainMobileMenuToggle, 'click', openMenu, 'mainMobileMenuToggle');
    addListener(ui.sidebarCloseToggle, 'click', closeMenu, 'sidebarCloseToggle');
    addListener(ui.sidebarOverlay, 'click', closeMenu, 'sidebarOverlay');

    // –ß–∞—Ç
    addListener(ui.chatInput, 'input', () => autoResizeTextarea(ui.chatInput), 'chatInput (input)');
    addListener(ui.sendButton, 'click', handleSendMessage, 'sendButton');
    addListener(ui.chatInput, 'keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) { // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (–±–µ–∑ Shift)
            e.preventDefault();
            handleSendMessage();
        }
    }, 'chatInput (keypress)');
    addListener(ui.clearChatBtn, 'click', () => confirmClearChat(), 'clearChatBtn');
    addListener(ui.saveChatBtn, 'click', saveChatToPDF, 'saveChatBtn');
    addListener(ui.micBtn, 'click', handleMicClick, 'micBtn'); // –ú–∏–∫—Ä–æ—Ñ–æ–Ω

    // –î–æ—Å–∫–∞ –∏ TTS
    addListener(ui.clearBoardBtn, 'click', () => {
        clearWhiteboard(false); // –û—á–∏—Å—Ç–∏—Ç—å –¥–æ—Å–∫—É –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–Ω–æ –Ω–∏–∂–µ)
        showToast('Vymaz√°no', "Tabule vymaz√°na.", "info");
    }, 'clearBoardBtn');
    addListener(ui.stopSpeechBtn, 'click', stopSpeech, 'stopSpeechBtn'); // <<<=== –í–∞–∂–Ω–æ: –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TTS

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–æ–π
    addListener(ui.continueBtn, 'click', requestContinue, 'continueBtn');
    addListener(ui.markCompleteBtn, 'click', handleMarkTopicCompleteFlow, 'markCompleteBtn');

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ TTS –∫–Ω–æ–ø–∫–∏ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)
    addListener(ui.chatMessages, 'click', handleDynamicTTSClick, 'chatMessages (TTS Delegation)');
    addListener(ui.whiteboardContent, 'click', handleDynamicTTSClick, 'whiteboardContent (TTS Delegation)');

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const darkModeMatcher = window.matchMedia('(prefers-color-scheme: dark)');
    if (darkModeMatcher && typeof darkModeMatcher.addEventListener === 'function') {
        darkModeMatcher.addEventListener('change', event => {
            state.isDarkMode = event.matches;
            updateTheme();
        });
        listenersAttached++;
    } else {
        console.warn("[SETUP] Cannot add theme change listener.");
    }
    window.addEventListener('resize', () => { // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ –æ–∫–Ω–∞
        if (window.innerWidth > 992 && ui.sidebar?.classList.contains('active')) {
            closeMenu();
        }
    }); listenersAttached++;
    window.addEventListener('online', updateOnlineStatus); listenersAttached++;
    window.addEventListener('offline', updateOnlineStatus); listenersAttached++;

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    addListener(ui.notificationBell, 'click', (event) => {
        event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–ø–ª—ã—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–∫—Ä—ã—Ç—å —Å—Ä–∞–∑—É –ø–æ –∫–ª–∏–∫—É –Ω–∞ document
        ui.notificationsDropdown?.classList.toggle('active');
    }, 'notificationBell');

    addListener(ui.markAllReadBtn, 'click', async () => {
        if (state.isLoading.notifications || !state.currentUser) return;
        setLoadingState('notifications', true);
        manageButtonStates();
        try {
            const success = await markAllNotificationsRead(state.currentUser.id);
            if(success) {
                const { unreadCount, notifications } = await fetchNotifications(state.currentUser.id, NOTIFICATION_FETCH_LIMIT);
                renderNotifications(unreadCount, notifications); // –û–±–Ω–æ–≤–∏—Ç—å UI
                showToast('SIGN√ÅLY VYMAZ√ÅNY', 'V≈°echna ozn√°men√≠ oznaƒçena.', 'success');
            } else {
                showToast('CHYBA P≈òENOSU', 'Nepoda≈ôilo se oznaƒçit ozn√°men√≠.', 'error');
            }
        } catch (err) {
            console.error("Error marking all notifications read:", err);
            showToast('CHYBA SYST√âMU', 'P≈ôi oznaƒçov√°n√≠ nastala chyba.', 'error');
        } finally {
            setLoadingState('notifications', false);
            manageButtonStates();
        }
    }, 'markAllReadBtn');

    addListener(ui.notificationsList, 'click', async (event) => {
        const item = event.target.closest('.notification-item');
        if (item && !state.isLoading.notifications && state.currentUser) {
            const notificationId = item.dataset.id;
            const link = item.dataset.link;
            const isRead = item.classList.contains('is-read');

            // –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
            if (!isRead && notificationId) {
                item.style.opacity = '0.5'; // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
                const success = await markNotificationRead(notificationId, state.currentUser.id);
                item.style.opacity = ''; // –£–±—Ä–∞—Ç—å —Ñ–∏–¥–±–µ–∫
                if (success) {
                    item.classList.add('is-read');
                    item.querySelector('.unread-dot')?.remove();
                    // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤ —à–∞–ø–∫–µ
                    const countEl = ui.notificationCount;
                    if (countEl) {
                        const currentCount = parseInt(countEl.textContent.replace('+', '') || '0');
                        const newCount = Math.max(0, currentCount - 1);
                        countEl.textContent = newCount > 9 ? '9+' : (newCount > 0 ? String(newCount) : '');
                        countEl.classList.toggle('visible', newCount > 0);
                    }
                    manageButtonStates(); // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "Vymazat v≈°e"
                } else {
                    showToast('Chyba', 'Nepoda≈ôilo se oznaƒçit ozn√°men√≠.', 'error');
                }
            }
            // –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if (link) {
                ui.notificationsDropdown?.classList.remove('active'); // –ó–∞–∫—Ä—ã—Ç—å –¥—Ä–æ–ø–¥–∞—É–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                window.location.href = link;
            }
        }
    }, 'notificationsList');

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–æ–ø–¥–∞—É–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', (event) => {
        if (ui.notificationsDropdown?.classList.contains('active') &&
            !ui.notificationsDropdown.contains(event.target) &&
            !ui.notificationBell?.contains(event.target)) {
            ui.notificationsDropdown.classList.remove('active');
        }
    }); listenersAttached++;

    console.log(`[SETUP] Event listeners setup complete. Total attached (approx): ${listenersAttached}`);
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ---

/** –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ UI (—Å–∞–π–¥–±–∞—Ä). */
function updateUserInfoUI() {
    if (!ui.sidebarName || !ui.sidebarAvatar) { console.warn("updateUserInfoUI: Sidebar elements not found."); return; }
    if (state.currentUser && state.currentProfile) {
        // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const displayName = `${state.currentProfile.first_name || ''} ${state.currentProfile.last_name || ''}`.trim() || state.currentProfile.username || state.currentUser.email?.split('@')[0] || 'Pilot';
        ui.sidebarName.textContent = sanitizeHTML(displayName);

        // –ê–≤–∞—Ç–∞—Ä
        const initials = getInitials(state.currentProfile, state.currentUser.email);
        const avatarUrl = state.currentProfile.avatar_url;
        let finalUrl = avatarUrl;
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL (–ø—Ä–æ—Å—Ç–µ–π—à–∞—è)
        if (avatarUrl && !avatarUrl.startsWith('http') && !avatarUrl.startsWith('//') && !avatarUrl.startsWith('data:')) {
            finalUrl = null; // –°—á–∏—Ç–∞–µ–º URL –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–ª–∏ data URI
            console.warn("Invalid avatar URL:", avatarUrl);
        } else if (avatarUrl) {
            finalUrl = sanitizeHTML(avatarUrl); // –û—á–∏—Å—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ URL
        }
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
        ui.sidebarAvatar.innerHTML = finalUrl ? `<img src="${finalUrl}" alt="${sanitizeHTML(initials)}">` : sanitizeHTML(initials);
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const sidebarImg = ui.sidebarAvatar.querySelector('img');
        if (sidebarImg) {
            sidebarImg.onerror = function() {
                console.warn(`Failed to load avatar: ${this.src}`);
                ui.sidebarAvatar.innerHTML = sanitizeHTML(initials); // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            };
        }
    } else {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        ui.sidebarName.textContent = 'Nep≈ôihl√°≈°en';
        ui.sidebarAvatar.textContent = '?';
    }
}

/** –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ. */
 function renderNotifications(count, notifications) {
    console.log("[Render Notifications] Count:", count, "Notifications:", notifications ? notifications.length : 0);
    if (!ui.notificationCount || !ui.notificationsList || !ui.noNotificationsMsg || !ui.markAllReadBtn) {
        console.error("[Render Notifications] Missing UI elements.");
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    ui.notificationCount.textContent = count > 9 ? '9+' : (count > 0 ? String(count) : '');
    ui.notificationCount.classList.toggle('visible', count > 0);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    if (notifications && notifications.length > 0) {
        ui.notificationsList.innerHTML = notifications.map(n => {
            const visual = activityVisuals[(n.type || 'default').toLowerCase()] || activityVisuals.default;
            const isReadClass = n.is_read ? 'is-read' : '';
            const linkAttr = n.link ? `data-link="${sanitizeHTML(n.link)}"` : ''; // –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
            const title = n.title || 'Nov√© ozn√°men√≠';
            const message = n.message || '';
            const timeAgo = formatRelativeTime(n.created_at); // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

            return `<div class="notification-item ${isReadClass}" data-id="${n.id}" ${linkAttr}>
                        ${!n.is_read ? '<span class="unread-dot"></span>' : ''}
                        <div class="notification-icon ${visual.class}">
                            <i class="fas ${visual.icon}"></i>
                        </div>
                        <div class="notification-content">
                            <div class="notification-title">${sanitizeHTML(title)}</div>
                            <div class="notification-message">${sanitizeHTML(message)}</div>
                            <div class="notification-time">${timeAgo}</div>
                        </div>
                    </div>`;
        }).join('');
        ui.noNotificationsMsg.style.display = 'none';
        ui.notificationsList.style.display = 'block';
        ui.notificationsList.closest('.notifications-dropdown-wrapper')?.classList.add('has-content');
    } else {
        // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç
        ui.notificationsList.innerHTML = '';
        ui.noNotificationsMsg.style.display = 'block';
        ui.notificationsList.style.display = 'none';
        ui.notificationsList.closest('.notifications-dropdown-wrapper')?.classList.remove('has-content');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "Vymazat v≈°e"
    const currentUnreadCount = parseInt(ui.notificationCount.textContent.replace('+', '') || '0');
    ui.markAllReadBtn.disabled = currentUnreadCount === 0 || state.isLoading.notifications;
    console.log("[Render Notifications] Finished rendering.");
 }

/** –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è). */
function manageUIState(mode, options = {}) {
    console.log("[UI State Change]:", mode, options);
    const isLearningActive = state.currentTopic && ['learning', 'chatting', 'requestingExplanation', 'waitingForAnswer'].includes(mode);
    const isEmptyState = ['noPlan', 'planComplete', 'error', 'loggedOut', 'initial', 'loadingTopic'].includes(mode);

    // –ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—É—á–µ–Ω–∏—è (–¥–æ—Å–∫–∞ + —á–∞—Ç)
    if (ui.learningInterface) {
        const shouldShowInterface = !isEmptyState;
        ui.learningInterface.style.display = shouldShowInterface ? 'flex' : 'none';
        console.log(`[UI State] Learning interface display: ${shouldShowInterface ? 'flex' : 'none'}`);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞ (–∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É)
    if (ui.chatMessages) {
        let emptyStateHTML = '';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –ø—É—Å—Ç–æ–π —Å—Ç–µ–π—Ç –ò–õ–ò –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—â–µ –Ω–µ—Ç
        if (isEmptyState || (isLearningActive && !ui.chatMessages.querySelector('.chat-message'))) {
            // –û—á–∏—â–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ—á–∏—â–∞—Ç—å –∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–≥–ª—É—à–∫—É
             if (isEmptyState && ui.chatMessages.innerHTML !== '') {
                 ui.chatMessages.innerHTML = '';
             } else if (isLearningActive && ui.chatMessages.querySelector('.empty-state')) {
                 ui.chatMessages.innerHTML = ''; // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–≥–ª—É—à–∫—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
             }

            switch (mode) {
                case 'loggedOut':
                    emptyStateHTML = `<div class='empty-state'><i class='fas fa-sign-in-alt'></i><h3>NEP≈òIHL√Å≈†EN</h3><p>Pro p≈ô√≠stup k v√Ωuce se pros√≠m <a href="/auth/index.html" style="color: var(--accent-primary)">p≈ôihlaste</a>.</p></div>`;
                    break;
                case 'noPlan':
                    emptyStateHTML = `<div class='empty-state'><i class='fas fa-calendar-times'></i><h3>≈Ω√ÅDN√ù AKTIVN√ç PL√ÅN</h3><p>Nem√°te aktivn√≠ studijn√≠ pl√°n. Nejprve pros√≠m dokonƒçete <a href="/dashboard/procvicovani/test1.html" style="color: var(--accent-primary)">diagnostick√Ω test</a>.</p></div>`;
                    break;
                case 'planComplete':
                    emptyStateHTML = `<div class='empty-state'><i class='fas fa-check-circle'></i><h3>PL√ÅN DOKONƒåEN!</h3><p>V≈°echny napl√°novan√© aktivity jsou hotov√©. Skvƒõl√° pr√°ce! M≈Ø≈æete si <a href="/dashboard/procvicovani/plan.html" style="color: var(--accent-primary)">vytvo≈ôit nov√Ω pl√°n</a>.</p></div>`;
                    break;
                case 'error':
                    emptyStateHTML = `<div class='empty-state'><i class='fas fa-exclamation-triangle'></i><h3>CHYBA SYST√âMU</h3><p>${sanitizeHTML(options.errorMessage || 'Nastala chyba p≈ôi naƒç√≠t√°n√≠ dat.')}</p></div>`;
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –≤–∏–¥–Ω–∞
                    if (options.errorMessage && !document.getElementById('global-error')?.offsetParent) {
                        showError(options.errorMessage, true);
                    }
                    break;
                case 'initial':
                    emptyStateHTML = '<div class="empty-state"><i class="fas fa-cog fa-spin"></i><h3>Inicializace...</h3></div>';
                    break;
                case 'loadingTopic':
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –µ—Å–ª–∏ chatMessages –µ—â–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                    if (!ui.chatMessages.querySelector('.chat-message')) {
                       emptyStateHTML = '<div class="empty-state initial-load-placeholder"><i class="fas fa-book-open" style="font-size: 2rem; margin-bottom: 1rem;"></i><p>Naƒç√≠t√°n√≠ t√©matu...</p></div>';
                    }
                    break;
                case 'learning':
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                    if (!ui.chatMessages.querySelector('.chat-message')) {
                        emptyStateHTML = `<div class='empty-state'><i class='fas fa-comments'></i><h3>Chat p≈ôipraven</h3><p>Poƒçkejte na prvn√≠ vysvƒõtlen√≠ od AI nebo polo≈æte ot√°zku.</p></div>`;
                    }
                    break;
            }
            if (emptyStateHTML) {
                ui.chatMessages.innerHTML = emptyStateHTML;
                console.log(`[UI State] Chat set to state: ${mode}`);
            }
        } else if (isLearningActive && ui.chatMessages.querySelector('.empty-state')) {
             // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω –∏ –≤ —á–∞—Ç–µ –µ—Å—Ç—å –∑–∞–≥–ª—É—à–∫–∞, –Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –ø–æ–ø–∞–ª–∏ –≤ if –≤—ã—à–µ), —É–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
             ui.chatMessages.querySelector('.empty-state').remove();
             console.log("[UI State] Removed chat placeholder as learning is active and messages should appear.");
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ—Å–∫–∏ (–∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É)
    if (ui.whiteboardContent) {
        const existingPlaceholder = ui.whiteboardContent.querySelector('.initial-load-placeholder, .empty-state');
         // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –ø—É—Å—Ç–æ–π —Å—Ç–µ–π—Ç –ò–õ–ò –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–æ –∫—É—Å–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—â–µ –Ω–µ—Ç
        if (isEmptyState || (isLearningActive && !ui.whiteboardContent.querySelector('.whiteboard-chunk'))) {
            let emptyBoardHTML = '';
             // –û—á–∏—â–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ—á–∏—â–∞—Ç—å –∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–≥–ª—É—à–∫—É
             if (isEmptyState && ui.whiteboardContent.innerHTML !== '') {
                ui.whiteboardContent.innerHTML = '';
             } else if (isLearningActive && ui.whiteboardContent.querySelector('.empty-state')) {
                 ui.whiteboardContent.innerHTML = ''; // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–≥–ª—É—à–∫—É
             }

            switch (mode) {
                case 'loadingTopic':
                    emptyBoardHTML = '<div class="empty-state initial-load-placeholder"><i class="fas fa-spinner fa-spin" style="font-size: 2rem; margin-bottom: 1rem;"></i><p>Naƒç√≠t√°n√≠ prvn√≠ lekce...</p></div>';
                    break;
                case 'error':
                    emptyBoardHTML = `<div class='empty-state error'><i class='fas fa-exclamation-triangle'></i><h3>Chyba Tabule</h3><p>${sanitizeHTML(options.errorMessage || 'Obsah nelze zobrazit.')}</p></div>`;
                    break;
                case 'noPlan':
                case 'planComplete':
                case 'loggedOut':
                    emptyBoardHTML = `<div class='empty-state'><i class='fas fa-chalkboard'></i><h3>Tabule</h3><p>Nejprve vyberte nebo naƒçtƒõte t√©ma.</p></div>`;
                    break;
                case 'initial':
                     emptyBoardHTML = `<div class='empty-state'><i class='fas fa-spinner fa-spin'></i><h3>Inicializace...</h3></div>`;
                    break;
                case 'learning':
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç –∫—É—Å–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if (!ui.whiteboardContent.querySelector('.whiteboard-chunk')) {
                        emptyBoardHTML = `<div class='empty-state'><i class='fas fa-chalkboard'></i><h3>Tabule p≈ôipravena</h3><p>Zde se bude zobrazovat vysvƒõtlen√≠ od AI.</p></div>`;
                    }
                    break;
            }
            if (emptyBoardHTML) {
                ui.whiteboardContent.innerHTML = emptyBoardHTML;
                console.log(`[UI State] Whiteboard set to state: ${mode}`);
            }
        } else if (isLearningActive && existingPlaceholder) {
            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–∞ –¥–æ—Å–∫–µ –µ—Å—Ç—å –∑–∞–≥–ª—É—à–∫–∞, –Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—É—Å–∫–∏ (–Ω–µ –ø–æ–ø–∞–ª–∏ –≤ if –≤—ã—à–µ), —É–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            existingPlaceholder.remove();
            console.log("[UI State] Removed whiteboard placeholder as learning is active and chunks should appear.");
        }
    }

    manageButtonStates(); // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º UI state
}

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é/–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
 * –í–µ—Ä—Å–∏—è 3.6: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π Zastavit.
 */
function manageButtonStates() {
    // --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
    const hasTopic = !!state.currentTopic;
    const isThinking = state.geminiIsThinking;
    const isLoadingTopic = state.topicLoadInProgress;
    const isWaitingForAnswer = state.aiIsWaitingForAnswer;
    const isListening = state.isListening;
    // *** –ò–ó–ú–ï–ù–ï–ù–ò–ï v3.6: –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ speechSynthesis ***
    const isSpeaking = state.speechSynthesisSupported && window.speechSynthesis.speaking;
    const isLoadingPoints = state.isLoading.points;
    const notificationsLoading = state.isLoading.notifications;
    const chatInputHasText = ui.chatInput?.value.trim().length > 0;
    const chatIsEmpty = !ui.chatMessages?.hasChildNodes() || !!ui.chatMessages?.querySelector('.empty-state');
    const boardIsEmpty = !ui.whiteboardContent?.hasChildNodes() || !!ui.whiteboardContent?.querySelector('.empty-state');
    const unreadNotifCount = parseInt(ui.notificationCount?.textContent?.replace('+', '') || '0');

    // --- –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏ ---
    // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (–∫—Ä–æ–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏ –≥–æ–≤–æ—Ä–µ–Ω–∏—è)?
    const isBusyProcessing = isThinking || isLoadingTopic || isListening || isLoadingPoints;
    // –ú–æ–∂–Ω–æ –ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–º–∞ –∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–Ω—è—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π)?
    // –ì–æ–≤–æ—Ä–µ–Ω–∏–µ (isSpeaking) –ù–ï –¥–æ–ª–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–æ—Ç–ø—Ä–∞–≤–∫—É, –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ).
    const canInteract = hasTopic && !isBusyProcessing;
    // –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–º—É? (–ì–æ–≤–æ—Ä–µ–Ω–∏–µ —Ç–æ–∂–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)
    const canComplete = hasTopic && !isBusyProcessing;
     // –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω? (–ù–µ–ª—å–∑—è, –µ—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç –∏–ª–∏ –∑–∞–Ω—è—Ç)
     const canUseMic = hasTopic && !isBusyProcessing && !isSpeaking && state.speechRecognitionSupported;

    // --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
    // console.log(`[BTN STATE CHECK v3.6] Flags: hasTopic=${hasTopic}, isThinking=${isThinking}, isLoadingTopic=${isLoadingTopic}, isWaiting=${isWaitingForAnswer}, isListening=${isListening}, isSpeaking=${isSpeaking}, isLoadingPoints=${isLoadingPoints}`);
    // console.log(`[BTN STATE CHECK v3.6] Derived: isBusyProcessing=${isBusyProcessing}, canInteract=${canInteract}, canComplete=${canComplete}, canUseMic=${canUseMic}`);

    // --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º ---
    const setButtonState = (button, isDisabled, reason) => {
        if (button && button.disabled !== isDisabled) {
            // console.log(`[BTN STATE] ${button.id || button.tagName}: ${isDisabled ? 'DISABLED' : 'ENABLED'} (Reason: ${reason})`);
            button.disabled = isDisabled;
        } else if (!button) {
             // console.warn(`[BTN STATE] Attempted to set state for non-existent button.`);
        }
    };

    // –ö–Ω–æ–ø–∫–∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç canInteract –∏ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞
    setButtonState(ui.sendButton, !canInteract || !chatInputHasText, `canInteract=${canInteract}, hasText=${chatInputHasText}`);
    if (ui.sendButton) ui.sendButton.innerHTML = isThinking ? '<i class="fas fa-spinner fa-spin"></i>' : '<i class="fas fa-paper-plane"></i>';

    // –ü–æ–ª–µ –≤–≤–æ–¥–∞: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç canInteract
    setButtonState(ui.chatInput, !canInteract, `canInteract=${canInteract}`);
    if (ui.chatInput) {
        ui.chatInput.placeholder = isListening ? "Poslouch√°m..."
                                 : (ui.chatInput.disabled ? (isThinking ? "AI p≈ôem√Ω≈°l√≠..." : (isLoadingTopic ? "Naƒç√≠t√°m t√©ma..." : "Akce nen√≠ dostupn√°..."))
                                 : (isWaitingForAnswer ? "Odpovƒõzte AI nebo pokraƒçujte..." : "Zeptejte se nebo odpovƒõzte..."));
    }

    // –ö–Ω–æ–ø–∫–∞ Pokracovat: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç canInteract
    setButtonState(ui.continueBtn, !canInteract, `canInteract=${canInteract}`);
    if (ui.continueBtn) ui.continueBtn.style.display = hasTopic ? 'inline-flex' : 'none';

    // –ö–Ω–æ–ø–∫–∞ Dokonƒçit: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç canComplete
    setButtonState(ui.markCompleteBtn, !canComplete, `canComplete=${canComplete}`);
    if (ui.markCompleteBtn) ui.markCompleteBtn.style.display = hasTopic ? 'inline-flex' : 'none';

    // *** –ò–ó–ú–ï–ù–ï–ù–ò–ï v3.6: –ö–Ω–æ–ø–∫–∞ Zastavit —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é isSpeaking ***
    setButtonState(ui.stopSpeechBtn, !isSpeaking, `isSpeaking=${isSpeaking}`);

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    setButtonState(ui.clearBoardBtn, boardIsEmpty || isBusyProcessing || isSpeaking, `boardEmpty=${boardIsEmpty}, isBusy=${isBusyProcessing}, isSpeaking=${isSpeaking}`);
    setButtonState(ui.micBtn, !canUseMic, `canUseMic=${canUseMic}`);
    if (ui.micBtn) {
        ui.micBtn.classList.toggle('listening', isListening);
        ui.micBtn.title = !state.speechRecognitionSupported ? "Nepodporov√°no" : (isListening ? "Zastavit hlasov√Ω vstup" : (ui.micBtn.disabled ? (isSpeaking ? "Hlasov√Ω vstup nedostupn√Ω (AI mluv√≠)" : "Hlasov√Ω vstup nedostupn√Ω") : "Zah√°jit hlasov√Ω vstup"));
    }
    setButtonState(ui.clearChatBtn, isBusyProcessing || chatIsEmpty || isSpeaking, `isBusy=${isBusyProcessing}, chatEmpty=${chatIsEmpty}, isSpeaking=${isSpeaking}`);
    setButtonState(ui.saveChatBtn, isBusyProcessing || chatIsEmpty || isSpeaking, `isBusy=${isBusyProcessing}, chatEmpty=${chatIsEmpty}, isSpeaking=${isSpeaking}`);
    setButtonState(ui.markAllReadBtn, unreadNotifCount === 0 || notificationsLoading, `unread=${unreadNotifCount}, loading=${notificationsLoading}`);
}


/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö TTS –∫–Ω–æ–ø–æ–∫ (–≤ —á–∞—Ç–µ –∏ –Ω–∞ –¥–æ—Å–∫–µ).
 */
function handleDynamicTTSClick(event) {
    const button = event.target.closest('.tts-listen-btn');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—Å—Ç –∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ–Ω–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if (button && button.dataset.textToSpeak && !button.disabled) {
        const textToSpeak = button.dataset.textToSpeak;
        // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å–∫–∏)
        const chunkElement = button.closest('.whiteboard-chunk');
        speakText(textToSpeak, chunkElement); // –í—ã–∑—ã–≤–∞–µ–º TTS
    }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –î–µ–π—Å—Ç–≤–∏–π ---

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞.
 * !!! –ó–¥–µ—Å—å –±—É–¥—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
async function handleSendMessage() {
    if (!state.currentUser || !state.currentProfile) { showError("Nelze odeslat zpr√°vu, chyb√≠ data u≈æivatele.", false); return; }
    console.log("[ACTION] handleSendMessage triggered.");

    // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–≥–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    const canSendNow = state.currentTopic && !state.geminiIsThinking && !state.topicLoadInProgress && !state.isListening;
    const text = ui.chatInput?.value.trim();

    console.log(`[ACTION] handleSendMessage: Check canSend=${canSendNow}, hasText=${!!text}`);

    if (!canSendNow || !text) {
        if (!canSendNow) showToast('Poƒçkejte pros√≠m', 'Syst√©m je zanepr√°zdnƒõn.', 'warning');
        if (!text) console.log("[ACTION] handleSendMessage: No text to send.");
        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    const inputBeforeSend = ui.chatInput?.value;
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –°–†–ê–ó–£ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    if (ui.chatInput) { ui.chatInput.value = ''; autoResizeTextarea(ui.chatInput); }

    try {
        // 1. –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UI –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç Gemini
        await addChatMessage(text, 'user'); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –≤–Ω—É—Ç—Ä–∏ addChatMessage
        initTooltips(); // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—É–ª—Ç–∏–ø—ã, –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–∏–º–∏
        state.geminiChatContext.push({ role: "user", parts: [{ text }] });

        // 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç"
        console.log("[ACTION] handleSendMessage: Setting isThinking=true, aiWaiting=false");
        state.geminiIsThinking = true;
        state.aiIsWaitingForAnswer = false; // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ AI
        addThinkingIndicator();
        manageButtonStates(); // –û–±–Ω–æ–≤–∏—Ç—å UI –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ –∏ –∫–Ω–æ–ø–∫—É)

        // 3. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        // –ü—Ä–æ–º–ø—Ç —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ _buildGeminiPayloadContents
        let promptForGemini = text; // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        // 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini
        console.log("[ACTION] handleSendMessage: Calling sendToGemini...");
        // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ —á–∞—Ç–µ (isChatInteraction = true)
        const response = await sendToGemini(promptForGemini, true);
        console.log("[ACTION] handleSendMessage: Gemini response received:", response);

        // 5. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç Gemini
        if (response.success && response.data) {
            const { chatText, ttsCommentary } = response.data; // –î–æ—Å–∫–∞ –∑–¥–µ—Å—å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è
            const isMeaningfulChatText = chatText && chatText.trim() !== '?';

            if (isMeaningfulChatText) {
                await addChatMessage(chatText, 'gemini', true, new Date(), ttsCommentary); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI
                initTooltips(); // –û–±–Ω–æ–≤–∏—Ç—å —Ç—É–ª—Ç–∏–ø—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ TTS –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ AI
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç AI –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
                const lowerChatText = chatText.toLowerCase();
                const isNowWaiting = chatText.endsWith('?') || lowerChatText.includes('ot√°zka:') || lowerChatText.includes('zkuste') || lowerChatText.includes('jak byste');
                console.log(`[STATE CHANGE] aiIsWaitingForAnswer evaluated to ${isNowWaiting} based on Gemini chat response.`);
                state.aiIsWaitingForAnswer = isNowWaiting;
            } else {
                // –ï—Å–ª–∏ Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞ (–∏–ª–∏ —Ç–æ–ª—å–∫–æ "?")
                console.warn("Gemini chat response missing or only '?'. Not setting aiIsWaitingForAnswer=true.");
                 state.aiIsWaitingForAnswer = false; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–±—Ä–æ—à–µ–Ω–æ
                 if (!chatText) {
                     // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                     // await addChatMessage("(AI neodpovƒõdƒõlo textem)", 'gemini', false);
                 }
            }
             // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è —Ç–æ–ª—å–∫–æ ttsCommentary (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è —á–∞—Ç–∞, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
             if (ttsCommentary && !isMeaningfulChatText) {
                  speakText(ttsCommentary); // –ü—Ä–æ—Å—Ç–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫
             }

        } else {
            // –û—à–∏–±–∫–∞ –æ—Ç Gemini
            console.error("Error response from Gemini:", response.error);
            await addChatMessage(`Promi≈àte, nastala chyba: ${response.error || 'Nezn√°m√° chyba AI.'}`, 'gemini', false);
            state.aiIsWaitingForAnswer = false; // –°–±—Ä–æ—Å–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (Gemini error).`);
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (ui.chatInput) { ui.chatInput.value = inputBeforeSend; autoResizeTextarea(ui.chatInput); }
        }
    } catch (error) {
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (—Å–µ—Ç—å, javascript)
        console.error("Error in handleSendMessage catch block:", error);
        showError(`Do≈°lo k chybƒõ p≈ôi odes√≠l√°n√≠ zpr√°vy: ${error.message}`, false);
        state.aiIsWaitingForAnswer = false; // –°–±—Ä–æ—Å–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (exception).`);
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (ui.chatInput) { ui.chatInput.value = inputBeforeSend; autoResizeTextarea(ui.chatInput); }
    } finally {
        // 6. –£–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        console.log("[ACTION] handleSendMessage: Entering finally block.");
        removeThinkingIndicator();
        console.log("[ACTION] handleSendMessage: Setting isThinking=false in finally.");
        state.geminiIsThinking = false; // <<<=== –í–∞–∂–Ω–æ: –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ "–¥—É–º–∞–µ—Ç"
        setLoadingState('chat', false); // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π —Å—Ç–µ–π—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞
        manageUIState(state.aiIsWaitingForAnswer ? 'waitingForAnswer' : 'learning'); // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π UI state
        manageButtonStates(); // <<<=== –í–∞–∂–Ω–æ: –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥/–æ—Ç–ø—Ä–∞–≤–∫—É)
        console.log("[ACTION] handleSendMessage: Exiting finally block.");
    }
}


/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —É AI (–∫–Ω–æ–ø–∫–∞ "Pokraƒçuj").
 */
async function requestContinue() {
    console.log("[ACTION] requestContinue triggered.");
    // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
    const canContinueNow = state.currentTopic && !state.geminiIsThinking && !state.topicLoadInProgress && !state.isListening;
    console.log(`[ACTION] requestContinue: Check canContinue=${canContinueNow}`);

    if (!canContinueNow) {
        console.warn(`Cannot request continue: thinking=${state.geminiIsThinking}, loading=${state.topicLoadInProgress}, listening=${state.isListening}`);
        showToast('Nelze pokraƒçovat', 'Syst√©m je zanepr√°zdnƒõn.', 'warning');
        return;
    }

    // 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç"
    console.log("[ACTION] requestContinue: Setting isThinking=true, aiWaiting=false");
    state.geminiIsThinking = true;
    state.aiIsWaitingForAnswer = false; // "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ
    addThinkingIndicator(); // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ —á–∞—Ç–µ
    manageButtonStates(); // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏

    // 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç
    // –ü—Ä–æ–º–ø—Ç —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ _buildGeminiPayloadContents
    const prompt = `Pokraƒçuj ve vysvƒõtlov√°n√≠ t√©matu "${state.currentTopic.name}". Nav√°≈æ na p≈ôedchoz√≠ ƒç√°st. Vygeneruj dal≈°√≠ logickou ƒç√°st v√Ωkladu.`;

    try {
        // 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini (–Ω–µ –∫–∞–∫ —á–∞—Ç)
        console.log("[ACTION] requestContinue: Calling sendToGemini...");
        const response = await sendToGemini(prompt, false); // isChatInteraction = false
        console.log("[ACTION] requestContinue: Gemini response received:", response);

        // 4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç
        if (response.success && response.data) {
            const { boardMarkdown, ttsCommentary, chatText } = response.data;
            let domChanged = false; // –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É–ª—Ç–∏–ø–æ–≤
            const isMeaningfulChatText = chatText && chatText.trim() !== '?';

            // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –¥–æ—Å–∫—É
            if (boardMarkdown) {
                const placeholder = ui.whiteboardContent?.querySelector('.initial-load-placeholder, .empty-state');
                if (placeholder) placeholder.remove(); // –£–±—Ä–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
                appendToWhiteboard(boardMarkdown, ttsCommentary || boardMarkdown); // TTS –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É —Å—é–¥–∞
                domChanged = true;
            }

            // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (isMeaningfulChatText) {
                 // –ü–µ—Ä–µ–¥–∞–µ–º ttsCommentary —Å—é–¥–∞, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ TTS –≤ —á–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                await addChatMessage(chatText, 'gemini', true, new Date(), ttsCommentary);
                domChanged = true;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –≤–æ–ø—Ä–æ—Å
                const lowerChatText = chatText.toLowerCase();
                const isNowWaiting = chatText.endsWith('?') || lowerChatText.includes('ot√°zka:') || lowerChatText.includes('zkuste') || lowerChatText.includes('jak byste');
                console.log(`[STATE CHANGE] aiIsWaitingForAnswer evaluated to ${isNowWaiting} based on Gemini response.`);
                state.aiIsWaitingForAnswer = isNowWaiting;
            } else if (ttsCommentary && !boardMarkdown){
                 // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ TTS (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∏ "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
                 await addChatMessage("(Poslechnƒõte si dal≈°√≠ ƒç√°st koment√°≈ôe)", 'gemini', true, new Date(), ttsCommentary); domChanged = true;
                 state.aiIsWaitingForAnswer = false; // –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ -> –Ω–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
                 console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (only TTS).`);
            } else if (!boardMarkdown && !isMeaningfulChatText && !ttsCommentary){
                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ–π
                console.warn("Gemini continue request returned empty/meaningless content.");
                await addChatMessage("(AI neposkytlo dal≈°√≠ obsah, zkuste pokraƒçovat znovu nebo polo≈æte ot√°zku.)", 'gemini', false);
                state.aiIsWaitingForAnswer = false;
                console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (empty response).`);
            } else {
                 // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å–∫–∞, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ
                 state.aiIsWaitingForAnswer = false; // –ù–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
                 console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (no meaningful chat text).`);
            }
            if (domChanged) initTooltips(); // –û–±–Ω–æ–≤–∏—Ç—å —Ç—É–ª—Ç–∏–ø—ã
        } else {
             // –û—à–∏–±–∫–∞ –æ—Ç Gemini
             console.error("Error response from Gemini:", response.error);
             await addChatMessage(`Promi≈àte, nastala chyba p≈ôi pokraƒçov√°n√≠: ${response.error || 'Nezn√°m√° chyba AI.'}`, 'gemini', false);
             state.aiIsWaitingForAnswer = false;
             console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (Gemini error).`);
        }
    } catch (error) {
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        console.error("Error in requestContinue catch block:", error);
        showError(`Do≈°lo k chybƒõ p≈ôi ≈æ√°dosti o pokraƒçov√°n√≠: ${error.message}`, false);
        state.aiIsWaitingForAnswer = false;
        console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (exception).`);
    } finally {
        // 5. –£–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        console.log("[ACTION] requestContinue: Entering finally block.");
        removeThinkingIndicator();
        console.log("[ACTION] requestContinue: Setting isThinking=false in finally.");
        state.geminiIsThinking = false; // <<<=== –í–∞–∂–Ω–æ: –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥
        setLoadingState('chat', false);
        manageUIState(state.aiIsWaitingForAnswer ? 'waitingForAnswer' : 'learning'); // –û–±–Ω–æ–≤–∏—Ç—å UI
        manageButtonStates(); // <<<=== –í–∞–∂–Ω–æ: –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        console.log("[ACTION] requestContinue: Exiting finally block.");
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã (–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã).
 */
async function startLearningSession() {
    if (!state.currentTopic) {
        console.error("[ACTION] startLearningSession: No current topic defined!");
        manageUIState('error', {errorMessage: 'Chyba: T√©ma nen√≠ definov√°no.'});
        return;
    }
    console.log("[ACTION] startLearningSession triggered for topic:", state.currentTopic.name);

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    state.currentSessionId = generateSessionId();
    state.geminiChatContext = []; // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è Gemini
    state.boardContentHistory = []; // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ—Å–∫–∏
    if (ui.chatMessages) ui.chatMessages.innerHTML = ''; // –û—á–∏—â–∞–µ–º —á–∞—Ç
    if (ui.whiteboardContent) ui.whiteboardContent.innerHTML = ''; // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É

    // 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç" –∏ –æ–±–Ω–æ–≤–∏—Ç—å UI
    console.log("[ACTION] startLearningSession: Setting isThinking=true, aiWaiting=false");
    state.geminiIsThinking = true;
    state.aiIsWaitingForAnswer = false;
    manageUIState('requestingExplanation'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ "–ó–∞–ø—Ä–æ—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è..."
    addThinkingIndicator(); // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ —á–∞—Ç–µ
    manageButtonStates(); // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏

    // 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    // –ü—Ä–æ–º–ø—Ç —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ _buildGeminiPayloadContents
    const prompt = `Vysvƒõtli Z√ÅKLADY t√©matu "${state.currentTopic.name}". Zaƒçni PRVN√ç ƒç√°st√≠ v√Ωkladu.`;

    try {
        // 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini
        console.log("[ACTION] startLearningSession: Calling sendToGemini...");
        const response = await sendToGemini(prompt, false); // isChatInteraction = false
        console.log("[ACTION] startLearningSession: Gemini response received:", response);

        // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        const boardPlaceholder = ui.whiteboardContent?.querySelector('.initial-load-placeholder, .empty-state');
        if (boardPlaceholder) { boardPlaceholder.remove(); console.log("Initial whiteboard placeholder removed."); }
        else if (ui.whiteboardContent) { ui.whiteboardContent.innerHTML = ''; } // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º
        const chatPlaceholder = ui.chatMessages?.querySelector('.empty-state, .initial-load-placeholder');
        // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —á–∞—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if (response.success && response.data && (response.data.boardMarkdown || response.data.chatText || response.data.ttsCommentary)) {
            if (chatPlaceholder) { chatPlaceholder.remove(); console.log("Initial chat placeholder removed.");}
        } else if (chatPlaceholder) {
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫—É —á–∞—Ç–∞ –Ω–∞ "–æ–∂–∏–¥–∞–Ω–∏–µ"
             chatPlaceholder.innerHTML = `<i class='fas fa-comments'></i><h3>Chat p≈ôipraven</h3><p>Poƒçkejte na prvn√≠ vysvƒõtlen√≠ od AI nebo polo≈æte ot√°zku.</p>`;
        }

        // 4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç
        if (response.success && response.data) {
            const { boardMarkdown, ttsCommentary, chatText } = response.data;
            let domChanged = false;
            const isMeaningfulChatText = chatText && chatText.trim() !== '?';

            // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –¥–æ—Å–∫—É
            if (boardMarkdown) {
                appendToWhiteboard(boardMarkdown, ttsCommentary || boardMarkdown);
                domChanged = true;
            }

            // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            if (isMeaningfulChatText) {
                await addChatMessage(chatText, 'gemini', true, new Date(), ttsCommentary);
                domChanged = true;
                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –≤–æ–ø—Ä–æ—Å
                const lowerChatText = chatText.toLowerCase();
                const isNowWaiting = chatText.endsWith('?') || lowerChatText.includes('ot√°zka:') || lowerChatText.includes('zkuste') || lowerChatText.includes('jak byste');
                console.log(`[STATE CHANGE] aiIsWaitingForAnswer evaluated to ${isNowWaiting} based on Gemini response.`);
                state.aiIsWaitingForAnswer = isNowWaiting;
            } else if (ttsCommentary && !boardMarkdown){
                 // –¢–æ–ª—å–∫–æ TTS
                await addChatMessage("(Poslechnƒõte si √∫vodn√≠ koment√°≈ô)", 'gemini', true, new Date(), ttsCommentary); domChanged = true;
                state.aiIsWaitingForAnswer = false;
                console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (only TTS).`);
            } else if (!boardMarkdown && !isMeaningfulChatText && !ttsCommentary){
                 // –°–æ–≤—Å–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                 console.warn("Gemini initial response was empty/meaningless.");
                 await addChatMessage("(AI neposkytlo √∫vodn√≠ obsah. Zkuste polo≈æit ot√°zku nebo po≈æ√°dat o pokraƒçov√°n√≠.)", 'gemini', false);
                 // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –Ω–∞ –¥–æ—Å–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
                 if (!boardMarkdown && ui.whiteboardContent && !ui.whiteboardContent.hasChildNodes()) {
                      ui.whiteboardContent.innerHTML = `<div class='empty-state'><i class='fas fa-chalkboard'></i><h3>Tabule pr√°zdn√°</h3><p>AI neposkytlo obsah.</p></div>`;
                 }
                 state.aiIsWaitingForAnswer = false; // –ù–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
                 console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (empty response).`);
            } else {
                 // –ï—Å—Ç—å –¥–æ—Å–∫–∞, –Ω–µ—Ç —á–∞—Ç–∞
                 state.aiIsWaitingForAnswer = false; // –ù–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
                 console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (no meaningful chat text).`);
            }
            if(domChanged) { initTooltips(); } // –û–±–Ω–æ–≤–∏—Ç—å —Ç—É–ª—Ç–∏–ø—ã
        } else {
             // –û—à–∏–±–∫–∞ –æ—Ç Gemini
             console.error("Error response from Gemini:", response.error);
             await addChatMessage(`Promi≈àte, nastala chyba p≈ôi zah√°jen√≠ v√Ωkladu: ${response.error || 'Nezn√°m√° chyba AI.'}`, 'gemini', false);
             // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –¥–æ—Å–∫–µ
             if (ui.whiteboardContent) { ui.whiteboardContent.innerHTML = `<div class='empty-state error'><i class='fas fa-exclamation-triangle'></i><h3>Chyba naƒç√≠t√°n√≠</h3><p>Obsah pro tabuli nelze zobrazit.</p></div>`; }
             state.aiIsWaitingForAnswer = false;
             console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (Gemini error).`);
             showError(`Chyba AI p≈ôi startu: ${response.error}`, false);
        }
    } catch(error) {
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        console.error("Error in startLearningSession catch block:", error);
        showError(`Do≈°lo k chybƒõ p≈ôi zah√°jen√≠ v√Ωkladu: ${error.message}`, false);
        // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –¥–æ—Å–∫–µ –∏ –≤ —á–∞—Ç–µ
        if (ui.whiteboardContent) { ui.whiteboardContent.innerHTML = `<div class='empty-state error'><i class='fas fa-exclamation-triangle'></i><h3>Chyba syst√©mu</h3><p>Nelze zah√°jit v√Ωuku.</p></div>`; }
        await addChatMessage(`Syst√©mov√° chyba p≈ôi startu: ${error.message}`, 'gemini', false);
        state.aiIsWaitingForAnswer = false;
        console.log(`[STATE CHANGE] aiIsWaitingForAnswer set to false (exception).`);
    } finally {
        // 5. –£–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        console.log("[ACTION] startLearningSession: Entering finally block.");
        removeThinkingIndicator();
        console.log("[ACTION] startLearningSession: Setting isThinking=false in finally.");
        state.geminiIsThinking = false; // <<<=== –í–∞–∂–Ω–æ: –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥
        setLoadingState('chat', false);
        manageUIState(state.aiIsWaitingForAnswer ? 'waitingForAnswer' : 'learning'); // –û–±–Ω–æ–≤–∏—Ç—å UI
        manageButtonStates(); // <<<=== –í–∞–∂–Ω–æ: –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        console.log("[ACTION] startLearningSession: Exiting finally block.");
    }
}


/** –ü–æ—Ç–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "Oznaƒçit jako dokonƒçen√©". */
async function handleMarkTopicCompleteFlow() {
    // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
    const canCompleteNow = !!state.currentTopic && !state.topicLoadInProgress && !state.isLoading.points && !state.geminiIsThinking && !window.speechSynthesis.speaking;
    console.log(`[ACTION] handleMarkTopicCompleteFlow: Check canComplete=${canCompleteNow}`);

    if (!canCompleteNow) {
        showToast("Nelze dokonƒçit", "Poƒçkejte na dokonƒçen√≠ p≈ôedchoz√≠ akce nebo p≈ôehr√°v√°n√≠ zvuku.", "warning");
        return;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (!confirm(`Opravdu oznaƒçit t√©ma "${state.currentTopic.name}" jako dokonƒçen√©? Z√≠sk√°te ${POINTS_TOPIC_COMPLETE} kredit≈Ø.`)) {
        return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
    }

    console.log(`[Flow] Marking topic ${state.currentTopic.activity_id} as complete. Setting flags...`);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    state.topicLoadInProgress = true; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç —Ñ–ª–∞–≥, —Ç.–∫. –æ–Ω –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—á—Ç–∏ –≤—Å–µ
    setLoadingState('points', true);
    manageButtonStates(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏

    try {
        // 1. –û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–º—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –≤ –ë–î
        const successMark = await markTopicComplete(state.currentTopic.activity_id, state.currentUser.id);

        if (successMark) {
            console.log(`[Flow] Topic marked complete. Awarding points...`);
            // 2. –ù–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏ (–µ—Å–ª–∏ —Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞)
            const pointsAwarded = await awardPoints(state.currentUser.id, POINTS_TOPIC_COMPLETE);
            setLoadingState('points', false); // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–∫–æ–≤
            console.log(`[Flow] Points awarding finished (Awarded: ${pointsAwarded}). Reset isLoading.points=false`);

            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (pointsAwarded) {
                showToast('+', `${POINTS_TOPIC_COMPLETE} kredit≈Ø z√≠sk√°no!`, 'success', 3000);
                // –û–±–Ω–æ–≤–∏—Ç—å –æ—á–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ª–æ–∫–∞–ª—å–Ω–æ
                if(state.currentProfile) {
                    state.currentProfile.points = (state.currentProfile.points || 0) + POINTS_TOPIC_COMPLETE;
                    updateUserInfoUI(); // –û–±–Ω–æ–≤–∏—Ç—å UI —Å–∞–π–¥–±–∞—Ä–∞
                }
            } else {
                showToast('Varov√°n√≠', 'T√©ma dokonƒçeno, ale body se nepoda≈ôilo p≈ôipsat.', 'warning');
            }
            showToast(`T√©ma "${state.currentTopic.name}" dokonƒçeno!`, "success");

            // 3. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É
            console.log("[Flow] Topic completion success. Resetting topicLoadInProgress=false and loading next topic.");
            state.topicLoadInProgress = false; // –°–Ω–∏–º–∞–µ–º –æ–±—â–∏–π —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã
            await loadNextTopicFlow(); // <<<=== –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã

        } else {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–º—É
            showToast("Chyba p≈ôi oznaƒçov√°n√≠ t√©matu jako dokonƒçen√©ho.", "error");
            console.log("[Flow] Topic completion failed (markTopicComplete returned false). Resetting flags.");
            state.topicLoadInProgress = false;
            setLoadingState('points', false);
            manageButtonStates(); // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        }
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        console.error("Error in handleMarkTopicCompleteFlow catch block:", error);
        showToast(`Neoƒçek√°van√° chyba p≈ôi dokonƒçov√°n√≠ t√©matu: ${error.message}`, "error");
        console.log("[Flow] Topic completion exception. Resetting flags.");
        state.topicLoadInProgress = false;
        setLoadingState('points', false);
        manageButtonStates(); // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    }
    // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å topicLoadInProgress –∑–¥–µ—Å—å, —Ç.–∫. –æ–Ω —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ loadNextTopicFlow –∏–ª–∏ –≤ catch/else
}

/** –ü–æ—Ç–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã. */
async function loadNextTopicFlow() {
    if (!state.currentUser) { console.log(`[Flow] Load next topic skipped: No user.`); return; }
    // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ state.topicLoadInProgress, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if (state.topicLoadInProgress) { console.log(`[Flow] Load next topic skipped: Already in progress.`); return; }

    console.log("[Flow] Loading next topic flow STARTED. Setting topicLoadInProgress=true.");
    state.topicLoadInProgress = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –Ω–∞—á–∞–ª–µ
    setLoadingState('currentTopic', true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è UI
    state.currentTopic = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    state.geminiChatContext = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    state.aiIsWaitingForAnswer = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    console.log("[STATE CHANGE] aiIsWaitingForAnswer set to false by loadNextTopicFlow start.");

    // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    if (ui.currentTopicDisplay) ui.currentTopicDisplay.innerHTML = '<span class="placeholder"><i class="fas fa-spinner fa-spin"></i> Naƒç√≠t√°m dal≈°√≠ t√©ma...</span>';
    clearWhiteboard(false); // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É
    if (ui.chatMessages) ui.chatMessages.innerHTML = ''; // –û—á–∏—â–∞–µ–º —á–∞—Ç
    manageUIState('loadingTopic'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    manageButtonStates(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏

    try {
        console.log("[Flow] Calling loadNextUncompletedTopic...");
        const result = await loadNextUncompletedTopic(state.currentUser.id);
        console.log("[Flow] loadNextUncompletedTopic result:", result);

        if (result.success && result.topic) {
            // –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            state.currentTopic = result.topic;
            if (ui.currentTopicDisplay) {
                ui.currentTopicDisplay.innerHTML = `T√©ma: <strong>${sanitizeHTML(state.currentTopic.name)}</strong>`;
            }
            console.log("[Flow] Topic loaded successfully. Resetting topicLoadInProgress=false. Starting session...");
            state.topicLoadInProgress = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Å—Å–∏–∏
            setLoadingState('currentTopic', false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ UI
            await startLearningSession(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã

        } else {
            // –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—É (–ø–ª–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞)
            state.currentTopic = null;
            const message = result.message || 'Nen√≠ dal≈°√≠ t√©ma nebo nastala chyba.';
            if (ui.currentTopicDisplay) ui.currentTopicDisplay.innerHTML = `<span class="placeholder">(${sanitizeHTML(message)})</span>`;
            console.log(`[Flow] No topic loaded or error. Reason: ${result.reason}. Resetting topicLoadInProgress=false.`);
            state.topicLoadInProgress = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            setLoadingState('currentTopic', false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ UI
            manageUIState(result.reason || 'error', { errorMessage: message }); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
            manageButtonStates(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        }
    } catch(error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        console.error("Error in loadNextTopicFlow execution:", error);
        state.currentTopic = null;
        if (ui.currentTopicDisplay) ui.currentTopicDisplay.innerHTML = `<span class="placeholder">(Chyba naƒç√≠t√°n√≠)</span>`;
        console.log("[Flow] Exception loading topic. Resetting topicLoadInProgress=false.");
        state.topicLoadInProgress = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        setLoadingState('currentTopic', false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ UI
        manageUIState('error', { errorMessage: `Chyba p≈ôi naƒç√≠t√°n√≠ dal≈°√≠ho t√©matu: ${error.message}` });
        manageButtonStates(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    } finally {
         // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–ª–∞–≥ —Ç–æ—á–Ω–æ —Å–±—Ä–æ—à–µ–Ω –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
         if (state.topicLoadInProgress) {
              console.warn("[Flow] topicLoadInProgress was still true in finally block. Resetting.");
              state.topicLoadInProgress = false;
              setLoadingState('currentTopic', false);
              manageButtonStates();
         }
    }
    console.log("[Flow] Loading next topic flow FINISHED.");
}

// --- –ó–∞–ø—É—Å–∫ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
document.addEventListener('DOMContentLoaded', initializeApp);